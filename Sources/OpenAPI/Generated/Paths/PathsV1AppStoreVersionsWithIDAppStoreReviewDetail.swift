// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersions.WithID {
	public var appStoreReviewDetail: AppStoreReviewDetail {
		AppStoreReviewDetail(path: path + "/appStoreReviewDetail")
	}

	public struct AppStoreReviewDetail {
		/// Path: `/v1/appStoreVersions/{id}/appStoreReviewDetail`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreReviewDetailResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersions-appStoreReviewDetail-get_to_one_related")
		}

		public struct GetParameters {
			public var fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments]?
			public var limitAppStoreReviewAttachments: Int?
			public var include: [Include]?

			public enum FieldsAppStoreReviewDetails: String, Codable, CaseIterable {
				case appStoreReviewAttachments
				case appStoreVersion
				case contactEmail
				case contactFirstName
				case contactLastName
				case contactPhone
				case demoAccountName
				case demoAccountPassword
				case demoAccountRequired
				case notes
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case ageRatingDeclaration
				case alternativeDistributionPackage
				case app
				case appClipDefaultExperience
				case appStoreReviewDetail
				case appStoreState
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case appStoreVersionLocalizations
				case appStoreVersionPhasedRelease
				case appStoreVersionSubmission
				case appVersionState
				case build
				case copyright
				case createdDate
				case customerReviews
				case downloadable
				case earliestReleaseDate
				case platform
				case releaseType
				case reviewType
				case routingAppCoverage
				case versionString
			}

			public enum FieldsAppStoreReviewAttachments: String, Codable, CaseIterable {
				case appStoreReviewDetail
				case assetDeliveryState
				case fileName
				case fileSize
				case sourceFileChecksum
				case uploadOperations
				case uploaded
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreReviewAttachments
				case appStoreVersion
			}

			public init(fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments]? = nil, limitAppStoreReviewAttachments: Int? = nil, include: [Include]? = nil) {
				self.fieldsAppStoreReviewDetails = fieldsAppStoreReviewDetails
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAppStoreReviewAttachments = fieldsAppStoreReviewAttachments
				self.limitAppStoreReviewAttachments = limitAppStoreReviewAttachments
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAppStoreReviewDetails, forKey: "fields[appStoreReviewDetails]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAppStoreReviewAttachments, forKey: "fields[appStoreReviewAttachments]")
				encoder.encode(limitAppStoreReviewAttachments, forKey: "limit[appStoreReviewAttachments]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
