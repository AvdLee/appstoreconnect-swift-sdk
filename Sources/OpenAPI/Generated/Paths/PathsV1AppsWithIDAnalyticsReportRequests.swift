// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var analyticsReportRequests: AnalyticsReportRequests {
		AnalyticsReportRequests(path: path + "/analyticsReportRequests")
	}

	public struct AnalyticsReportRequests {
		/// Path: `/v1/apps/{id}/analyticsReportRequests`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AnalyticsReportRequestsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_analyticsReportRequests_getToManyRelated")
		}

		public struct GetParameters {
			public var filterAccessType: [FilterAccessType]?
			public var fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests]?
			public var fieldsAnalyticsReports: [FieldsAnalyticsReports]?
			public var limit: Int?
			public var include: [Include]?
			public var limitReports: Int?

			public enum FilterAccessType: String, Codable, CaseIterable {
				case oneTimeSnapshot = "ONE_TIME_SNAPSHOT"
				case ongoing = "ONGOING"
			}

			public enum FieldsAnalyticsReportRequests: String, Codable, CaseIterable {
				case accessType
				case stoppedDueToInactivity
				case reports
			}

			public enum FieldsAnalyticsReports: String, Codable, CaseIterable {
				case name
				case category
				case instances
			}

			public enum Include: String, Codable, CaseIterable {
				case reports
			}

			public init(filterAccessType: [FilterAccessType]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests]? = nil, fieldsAnalyticsReports: [FieldsAnalyticsReports]? = nil, limit: Int? = nil, include: [Include]? = nil, limitReports: Int? = nil) {
				self.filterAccessType = filterAccessType
				self.fieldsAnalyticsReportRequests = fieldsAnalyticsReportRequests
				self.fieldsAnalyticsReports = fieldsAnalyticsReports
				self.limit = limit
				self.include = include
				self.limitReports = limitReports
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterAccessType, forKey: "filter[accessType]")
				encoder.encode(fieldsAnalyticsReportRequests, forKey: "fields[analyticsReportRequests]")
				encoder.encode(fieldsAnalyticsReports, forKey: "fields[analyticsReports]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitReports, forKey: "limit[reports]")
				return encoder.items
			}
		}
	}
}
