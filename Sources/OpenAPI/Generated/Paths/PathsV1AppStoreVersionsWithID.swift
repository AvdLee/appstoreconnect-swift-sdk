// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersions {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/appStoreVersions/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreVersionResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersions_getInstance")
		}

		public struct GetParameters {
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations]?
			public var fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations]?
			public var fieldsBuilds: [FieldsBuilds]?
			public var fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases]?
			public var fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions]?
			public var fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages]?
			public var fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]?
			public var fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions]?
			public var fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences]?
			public var fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]?
			public var fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]?
			public var include: [Include]?
			public var limitAppStoreVersionExperiments: Int?
			public var limitAppStoreVersionExperimentsV2: Int?
			public var limitAppStoreVersionLocalizations: Int?

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsAgeRatingDeclarations: String, Codable, CaseIterable {
				case advertising
				case alcoholTobaccoOrDrugUseOrReferences
				case contests
				case gambling
				case gamblingSimulated
				case gunsOrOtherWeapons
				case healthOrWellnessTopics
				case kidsAgeBand
				case lootBox
				case medicalOrTreatmentInformation
				case messagingAndChat
				case parentalControls
				case profanityOrCrudeHumor
				case ageAssurance
				case sexualContentGraphicAndNudity
				case sexualContentOrNudity
				case horrorOrFearThemes
				case matureOrSuggestiveThemes
				case unrestrictedWebAccess
				case userGeneratedContent
				case violenceCartoonOrFantasy
				case violenceRealisticProlongedGraphicOrSadistic
				case violenceRealistic
				case ageRatingOverride
				case ageRatingOverrideV2
				case koreaAgeRatingOverride
				case developerAgeRatingInfoURL = "developerAgeRatingInfoUrl"
			}

			public enum FieldsAppStoreVersionLocalizations: String, Codable, CaseIterable {
				case description
				case locale
				case keywords
				case marketingURL = "marketingUrl"
				case promotionalText
				case supportURL = "supportUrl"
				case whatsNew
				case appStoreVersion
				case appScreenshotSets
				case appPreviewSets
				case searchKeywords
			}

			public enum FieldsBuilds: String, Codable, CaseIterable {
				case version
				case uploadedDate
				case expirationDate
				case expired
				case minOsVersion
				case lsMinimumSystemVersion
				case computedMinMacOsVersion
				case computedMinVisionOsVersion
				case iconAssetToken
				case processingState
				case buildAudienceType
				case usesNonExemptEncryption
				case preReleaseVersion
				case individualTesters
				case betaGroups
				case betaBuildLocalizations
				case appEncryptionDeclaration
				case betaAppReviewSubmission
				case app
				case buildBetaDetail
				case appStoreVersion
				case icons
				case buildBundles
				case buildUpload
				case perfPowerMetrics
				case diagnosticSignatures
			}

			public enum FieldsAppStoreVersionPhasedReleases: String, Codable, CaseIterable {
				case phasedReleaseState
				case startDate
				case totalPauseDuration
				case currentDayNumber
			}

			public enum FieldsGameCenterAppVersions: String, Codable, CaseIterable {
				case enabled
				case compatibilityVersions
				case appStoreVersion
			}

			public enum FieldsRoutingAppCoverages: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case sourceFileChecksum
				case uploadOperations
				case assetDeliveryState
				case appStoreVersion
			}

			public enum FieldsAppStoreReviewDetails: String, Codable, CaseIterable {
				case contactFirstName
				case contactLastName
				case contactPhone
				case contactEmail
				case demoAccountName
				case demoAccountPassword
				case demoAccountRequired
				case notes
				case appStoreVersion
				case appStoreReviewAttachments
			}

			public enum FieldsAppStoreVersionSubmissions: String, Codable, CaseIterable {
				case appStoreVersion
			}

			public enum FieldsAppClipDefaultExperiences: String, Codable, CaseIterable {
				case action
				case appClip
				case releaseWithAppStoreVersion
				case appClipDefaultExperienceLocalizations
				case appClipAppStoreReviewDetail
			}

			public enum FieldsAppStoreVersionExperiments: String, Codable, CaseIterable {
				case name
				case trafficProportion
				case state
				case reviewRequired
				case startDate
				case endDate
				case appStoreVersion
				case appStoreVersionExperimentTreatments
				case platform
				case app
				case latestControlVersion
				case controlVersions
			}

			public enum FieldsAlternativeDistributionPackages: String, Codable, CaseIterable {
				case versions
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case alternativeDistributionPackage
			}

			public init(fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]? = nil, include: [Include]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil) {
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAgeRatingDeclarations = fieldsAgeRatingDeclarations
				self.fieldsAppStoreVersionLocalizations = fieldsAppStoreVersionLocalizations
				self.fieldsBuilds = fieldsBuilds
				self.fieldsAppStoreVersionPhasedReleases = fieldsAppStoreVersionPhasedReleases
				self.fieldsGameCenterAppVersions = fieldsGameCenterAppVersions
				self.fieldsRoutingAppCoverages = fieldsRoutingAppCoverages
				self.fieldsAppStoreReviewDetails = fieldsAppStoreReviewDetails
				self.fieldsAppStoreVersionSubmissions = fieldsAppStoreVersionSubmissions
				self.fieldsAppClipDefaultExperiences = fieldsAppClipDefaultExperiences
				self.fieldsAppStoreVersionExperiments = fieldsAppStoreVersionExperiments
				self.fieldsAlternativeDistributionPackages = fieldsAlternativeDistributionPackages
				self.include = include
				self.limitAppStoreVersionExperiments = limitAppStoreVersionExperiments
				self.limitAppStoreVersionExperimentsV2 = limitAppStoreVersionExperimentsV2
				self.limitAppStoreVersionLocalizations = limitAppStoreVersionLocalizations
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAgeRatingDeclarations, forKey: "fields[ageRatingDeclarations]")
				encoder.encode(fieldsAppStoreVersionLocalizations, forKey: "fields[appStoreVersionLocalizations]")
				encoder.encode(fieldsBuilds, forKey: "fields[builds]")
				encoder.encode(fieldsAppStoreVersionPhasedReleases, forKey: "fields[appStoreVersionPhasedReleases]")
				encoder.encode(fieldsGameCenterAppVersions, forKey: "fields[gameCenterAppVersions]")
				encoder.encode(fieldsRoutingAppCoverages, forKey: "fields[routingAppCoverages]")
				encoder.encode(fieldsAppStoreReviewDetails, forKey: "fields[appStoreReviewDetails]")
				encoder.encode(fieldsAppStoreVersionSubmissions, forKey: "fields[appStoreVersionSubmissions]")
				encoder.encode(fieldsAppClipDefaultExperiences, forKey: "fields[appClipDefaultExperiences]")
				encoder.encode(fieldsAppStoreVersionExperiments, forKey: "fields[appStoreVersionExperiments]")
				encoder.encode(fieldsAlternativeDistributionPackages, forKey: "fields[alternativeDistributionPackages]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppStoreVersionExperiments, forKey: "limit[appStoreVersionExperiments]")
				encoder.encode(limitAppStoreVersionExperimentsV2, forKey: "limit[appStoreVersionExperimentsV2]")
				encoder.encode(limitAppStoreVersionLocalizations, forKey: "limit[appStoreVersionLocalizations]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.AppStoreVersionUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.AppStoreVersionResponse> {
			Request(path: path, method: "PATCH", body: body, id: "appStoreVersions_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "appStoreVersions_deleteInstance")
		}
	}
}
