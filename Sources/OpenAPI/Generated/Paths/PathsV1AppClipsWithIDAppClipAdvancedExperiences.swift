// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppClips.WithID {
	public var appClipAdvancedExperiences: AppClipAdvancedExperiences {
		AppClipAdvancedExperiences(path: path + "/appClipAdvancedExperiences")
	}

	public struct AppClipAdvancedExperiences {
		/// Path: `/v1/appClips/{id}/appClipAdvancedExperiences`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppClipAdvancedExperiencesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appClips_appClipAdvancedExperiences_getToManyRelated")
		}

		public struct GetParameters {
			public var filterStatus: [FilterStatus]?
			public var filterPlaceStatus: [FilterPlaceStatus]?
			public var filterAction: [FilterAction]?
			public var fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences]?
			public var fieldsAppClips: [FieldsAppClips]?
			public var fieldsAppClipAdvancedExperienceImages: [FieldsAppClipAdvancedExperienceImages]?
			public var fieldsAppClipAdvancedExperienceLocalizations: [FieldsAppClipAdvancedExperienceLocalizations]?
			public var limit: Int?
			public var include: [Include]?
			public var limitLocalizations: Int?

			public enum FilterStatus: String, Codable, CaseIterable {
				case received = "RECEIVED"
				case deactivated = "DEACTIVATED"
				case appTransferInProgress = "APP_TRANSFER_IN_PROGRESS"
			}

			public enum FilterPlaceStatus: String, Codable, CaseIterable {
				case pending = "PENDING"
				case matched = "MATCHED"
				case noMatch = "NO_MATCH"
			}

			public enum FilterAction: String, Codable, CaseIterable {
				case `open` = "OPEN"
				case view = "VIEW"
				case play = "PLAY"
			}

			public enum FieldsAppClipAdvancedExperiences: String, Codable, CaseIterable {
				case link
				case version
				case status
				case action
				case isPoweredBy
				case place
				case placeStatus
				case businessCategory
				case defaultLanguage
				case appClip
				case headerImage
				case localizations
			}

			public enum FieldsAppClips: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case app
				case appClipDefaultExperiences
				case appClipAdvancedExperiences
			}

			public enum FieldsAppClipAdvancedExperienceImages: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case sourceFileChecksum
				case imageAsset
				case uploadOperations
				case assetDeliveryState
			}

			public enum FieldsAppClipAdvancedExperienceLocalizations: String, Codable, CaseIterable {
				case language
				case title
				case subtitle
			}

			public enum Include: String, Codable, CaseIterable {
				case appClip
				case headerImage
				case localizations
			}

			public init(filterStatus: [FilterStatus]? = nil, filterPlaceStatus: [FilterPlaceStatus]? = nil, filterAction: [FilterAction]? = nil, fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences]? = nil, fieldsAppClips: [FieldsAppClips]? = nil, fieldsAppClipAdvancedExperienceImages: [FieldsAppClipAdvancedExperienceImages]? = nil, fieldsAppClipAdvancedExperienceLocalizations: [FieldsAppClipAdvancedExperienceLocalizations]? = nil, limit: Int? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil) {
				self.filterStatus = filterStatus
				self.filterPlaceStatus = filterPlaceStatus
				self.filterAction = filterAction
				self.fieldsAppClipAdvancedExperiences = fieldsAppClipAdvancedExperiences
				self.fieldsAppClips = fieldsAppClips
				self.fieldsAppClipAdvancedExperienceImages = fieldsAppClipAdvancedExperienceImages
				self.fieldsAppClipAdvancedExperienceLocalizations = fieldsAppClipAdvancedExperienceLocalizations
				self.limit = limit
				self.include = include
				self.limitLocalizations = limitLocalizations
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterStatus, forKey: "filter[status]")
				encoder.encode(filterPlaceStatus, forKey: "filter[placeStatus]")
				encoder.encode(filterAction, forKey: "filter[action]")
				encoder.encode(fieldsAppClipAdvancedExperiences, forKey: "fields[appClipAdvancedExperiences]")
				encoder.encode(fieldsAppClips, forKey: "fields[appClips]")
				encoder.encode(fieldsAppClipAdvancedExperienceImages, forKey: "fields[appClipAdvancedExperienceImages]")
				encoder.encode(fieldsAppClipAdvancedExperienceLocalizations, forKey: "fields[appClipAdvancedExperienceLocalizations]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				return encoder.items
			}
		}
	}
}
