// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var backgroundAssets: BackgroundAssets {
		BackgroundAssets(path: path + "/backgroundAssets")
	}

	public struct BackgroundAssets {
		/// Path: `/v1/apps/{id}/backgroundAssets`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.BackgroundAssetsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_backgroundAssets_getToManyRelated")
		}

		public struct GetParameters {
			public var filterAssetPackIdentifier: [String]?
			public var fieldsBackgroundAssets: [FieldsBackgroundAssets]?
			public var fieldsApps: [FieldsApps]?
			public var fieldsBackgroundAssetVersions: [FieldsBackgroundAssetVersions]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsBackgroundAssets: String, Codable, CaseIterable {
				case assetPackIdentifier
				case createdDate
				case app
				case versions
				case appStoreVersion
				case internalBetaVersion
				case externalBetaVersion
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case accessibilityURL = "accessibilityUrl"
				case name
				case bundleID = "bundleId"
				case sku
				case primaryLocale
				case isOrEverWasMadeForKids
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
				case contentRightsDeclaration
				case streamlinedPurchasingEnabled
				case accessibilityDeclarations
				case appEncryptionDeclarations
				case ciProduct
				case betaTesters
				case betaGroups
				case appStoreVersions
				case appTags
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case appPricePoints
				case endUserLicenseAgreement
				case appPriceSchedule
				case appAvailabilityV2
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case perfPowerMetrics
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case customerReviews
				case customerReviewSummarizations
				case gameCenterDetail
				case appStoreVersionExperimentsV2
				case alternativeDistributionKey
				case analyticsReportRequests
				case marketplaceSearchDetail
				case buildUploads
				case backgroundAssets
				case betaFeedbackScreenshotSubmissions
				case betaFeedbackCrashSubmissions
				case searchKeywords
				case webhooks
			}

			public enum FieldsBackgroundAssetVersions: String, Codable, CaseIterable {
				case createdDate
				case platforms
				case state
				case version
				case backgroundAsset
				case internalBetaRelease
				case externalBetaRelease
				case appStoreRelease
				case assetFile
				case manifestFile
				case backgroundAssetUploadFiles
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case appStoreVersion
				case internalBetaVersion
				case externalBetaVersion
			}

			public init(filterAssetPackIdentifier: [String]? = nil, fieldsBackgroundAssets: [FieldsBackgroundAssets]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsBackgroundAssetVersions: [FieldsBackgroundAssetVersions]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterAssetPackIdentifier = filterAssetPackIdentifier
				self.fieldsBackgroundAssets = fieldsBackgroundAssets
				self.fieldsApps = fieldsApps
				self.fieldsBackgroundAssetVersions = fieldsBackgroundAssetVersions
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterAssetPackIdentifier, forKey: "filter[assetPackIdentifier]")
				encoder.encode(fieldsBackgroundAssets, forKey: "fields[backgroundAssets]")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(fieldsBackgroundAssetVersions, forKey: "fields[backgroundAssetVersions]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
