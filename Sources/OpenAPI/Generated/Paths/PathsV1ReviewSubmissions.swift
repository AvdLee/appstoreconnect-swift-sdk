// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1 {
	public var reviewSubmissions: ReviewSubmissions {
		ReviewSubmissions(path: path + "/reviewSubmissions")
	}

	public struct ReviewSubmissions {
		/// Path: `/v1/reviewSubmissions`
		public let path: String

		public func get(parameters: GetParameters) -> Request<AppStoreConnect_Swift_SDK.ReviewSubmissionsResponse> {
			Request(path: path, method: "GET", query: parameters.asQuery, id: "reviewSubmissions_getCollection")
		}

		public struct GetParameters {
			public var filterPlatform: [FilterPlatform]?
			public var filterState: [FilterState]?
			public var filterApp: [String]
			public var fieldsReviewSubmissions: [FieldsReviewSubmissions]?
			public var fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]?
			public var limit: Int?
			public var include: [Include]?
			public var limitItems: Int?

			public enum FilterPlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum FilterState: String, Codable, CaseIterable {
				case readyForReview = "READY_FOR_REVIEW"
				case waitingForReview = "WAITING_FOR_REVIEW"
				case inReview = "IN_REVIEW"
				case unresolvedIssues = "UNRESOLVED_ISSUES"
				case canceling = "CANCELING"
				case completing = "COMPLETING"
				case complete = "COMPLETE"
			}

			public enum FieldsReviewSubmissions: String, Codable, CaseIterable {
				case platform
				case submittedDate
				case state
				case app
				case items
				case appStoreVersionForReview
				case submittedByActor
				case lastUpdatedByActor
			}

			public enum FieldsReviewSubmissionItems: String, Codable, CaseIterable {
				case state
				case appStoreVersion
				case appCustomProductPageVersion
				case appStoreVersionExperiment
				case appStoreVersionExperimentV2
				case appEvent
				case backgroundAssetVersion
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case items
				case appStoreVersionForReview
				case submittedByActor
				case lastUpdatedByActor
			}

			public init(filterPlatform: [FilterPlatform]? = nil, filterState: [FilterState]? = nil, filterApp: [String], fieldsReviewSubmissions: [FieldsReviewSubmissions]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]? = nil, limit: Int? = nil, include: [Include]? = nil, limitItems: Int? = nil) {
				self.filterPlatform = filterPlatform
				self.filterState = filterState
				self.filterApp = filterApp
				self.fieldsReviewSubmissions = fieldsReviewSubmissions
				self.fieldsReviewSubmissionItems = fieldsReviewSubmissionItems
				self.limit = limit
				self.include = include
				self.limitItems = limitItems
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterPlatform, forKey: "filter[platform]")
				encoder.encode(filterState, forKey: "filter[state]")
				encoder.encode(filterApp, forKey: "filter[app]")
				encoder.encode(fieldsReviewSubmissions, forKey: "fields[reviewSubmissions]")
				encoder.encode(fieldsReviewSubmissionItems, forKey: "fields[reviewSubmissionItems]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitItems, forKey: "limit[items]")
				return encoder.items
			}
		}

		public func post(_ body: AppStoreConnect_Swift_SDK.ReviewSubmissionCreateRequest) -> Request<AppStoreConnect_Swift_SDK.ReviewSubmissionResponse> {
			Request(path: path, method: "POST", body: body, id: "reviewSubmissions_createInstance")
		}
	}
}
