// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var ciProduct: CiProduct {
		CiProduct(path: path + "/ciProduct")
	}

	public struct CiProduct {
		/// Path: `/v1/apps/{id}/ciProduct`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.CiProductResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps-ciProduct-get_to_one_related")
		}

		public struct GetParameters {
			public var fieldsCiProducts: [FieldsCiProducts]?
			public var fieldsApps: [FieldsApps]?
			public var fieldsScmRepositories: [FieldsScmRepositories]?
			public var fieldsBundleIDs: [FieldsBundleIDs]?
			public var limitPrimaryRepositories: Int?
			public var include: [Include]?

			public enum FieldsCiProducts: String, Codable, CaseIterable {
				case additionalRepositories
				case app
				case buildRuns
				case bundleID = "bundleId"
				case createdDate
				case name
				case primaryRepositories
				case productType
				case workflows
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case alternativeDistributionKey
				case appAvailability
				case appClips
				case appCustomProductPages
				case appEncryptionDeclarations
				case appEvents
				case appInfos
				case appPricePoints
				case appPriceSchedule
				case appStoreVersionExperimentsV2
				case appStoreVersions
				case availableInNewTerritories
				case availableTerritories
				case betaAppLocalizations
				case betaAppReviewDetail
				case betaGroups
				case betaLicenseAgreement
				case betaTesters
				case builds
				case bundleID = "bundleId"
				case ciProduct
				case contentRightsDeclaration
				case customerReviews
				case endUserLicenseAgreement
				case gameCenterDetail
				case gameCenterEnabledVersions
				case inAppPurchases
				case inAppPurchasesV2
				case isOrEverWasMadeForKids
				case marketplaceSearchDetail
				case name
				case perfPowerMetrics
				case preOrder
				case preReleaseVersions
				case pricePoints
				case prices
				case primaryLocale
				case promotedPurchases
				case reviewSubmissions
				case sku
				case subscriptionGracePeriod
				case subscriptionGroups
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
			}

			public enum FieldsScmRepositories: String, Codable, CaseIterable {
				case defaultBranch
				case gitReferences
				case httpCloneURL = "httpCloneUrl"
				case lastAccessedDate
				case ownerName
				case pullRequests
				case repositoryName
				case scmProvider
				case sshCloneURL = "sshCloneUrl"
			}

			public enum FieldsBundleIDs: String, Codable, CaseIterable {
				case app
				case bundleIDCapabilities = "bundleIdCapabilities"
				case identifier
				case name
				case platform
				case profiles
				case seedID = "seedId"
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case bundleID = "bundleId"
				case primaryRepositories
			}

			public init(fieldsCiProducts: [FieldsCiProducts]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, fieldsBundleIDs: [FieldsBundleIDs]? = nil, limitPrimaryRepositories: Int? = nil, include: [Include]? = nil) {
				self.fieldsCiProducts = fieldsCiProducts
				self.fieldsApps = fieldsApps
				self.fieldsScmRepositories = fieldsScmRepositories
				self.fieldsBundleIDs = fieldsBundleIDs
				self.limitPrimaryRepositories = limitPrimaryRepositories
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsCiProducts, forKey: "fields[ciProducts]")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
				encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
				encoder.encode(limitPrimaryRepositories, forKey: "limit[primaryRepositories]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
