// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var appTags: AppTags {
		AppTags(path: path + "/appTags")
	}

	public struct AppTags {
		/// Path: `/v1/apps/{id}/appTags`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppTagsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_appTags_getToManyRelated")
		}

		public struct GetParameters {
			public var filterVisibleInAppStore: [String]?
			public var sort: [Sort]?
			public var fieldsAppTags: [FieldsAppTags]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var limit: Int?
			public var include: [Include]?
			public var limitTerritories: Int?

			public enum Sort: String, Codable, CaseIterable {
				case name
				case minusname = "-name"
			}

			public enum FieldsAppTags: String, Codable, CaseIterable {
				case name
				case visibleInAppStore
				case territories
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public enum Include: String, Codable, CaseIterable {
				case territories
			}

			public init(filterVisibleInAppStore: [String]? = nil, sort: [Sort]? = nil, fieldsAppTags: [FieldsAppTags]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, limit: Int? = nil, include: [Include]? = nil, limitTerritories: Int? = nil) {
				self.filterVisibleInAppStore = filterVisibleInAppStore
				self.sort = sort
				self.fieldsAppTags = fieldsAppTags
				self.fieldsTerritories = fieldsTerritories
				self.limit = limit
				self.include = include
				self.limitTerritories = limitTerritories
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterVisibleInAppStore, forKey: "filter[visibleInAppStore]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsAppTags, forKey: "fields[appTags]")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitTerritories, forKey: "limit[territories]")
				return encoder.items
			}
		}
	}
}
