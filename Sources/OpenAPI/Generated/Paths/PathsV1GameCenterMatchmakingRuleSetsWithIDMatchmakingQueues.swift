// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterMatchmakingRuleSets.WithID {
	public var matchmakingQueues: MatchmakingQueues {
		MatchmakingQueues(path: path + "/matchmakingQueues")
	}

	public struct MatchmakingQueues {
		/// Path: `/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterMatchmakingQueuesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterMatchmakingRuleSets-matchmakingQueues-get_to_many_related")
		}

		public struct GetParameters {
			public var fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues]?
			public var fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsGameCenterMatchmakingQueues: String, Codable, CaseIterable {
				case classicMatchmakingBundleIDs = "classicMatchmakingBundleIds"
				case experimentRuleSet
				case referenceName
				case ruleSet
			}

			public enum FieldsGameCenterMatchmakingRuleSets: String, Codable, CaseIterable {
				case matchmakingQueues
				case maxPlayers
				case minPlayers
				case referenceName
				case ruleLanguageVersion
				case rules
				case teams
			}

			public enum Include: String, Codable, CaseIterable {
				case experimentRuleSet
				case ruleSet
			}

			public init(fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues]? = nil, fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.fieldsGameCenterMatchmakingQueues = fieldsGameCenterMatchmakingQueues
				self.fieldsGameCenterMatchmakingRuleSets = fieldsGameCenterMatchmakingRuleSets
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterMatchmakingQueues, forKey: "fields[gameCenterMatchmakingQueues]")
				encoder.encode(fieldsGameCenterMatchmakingRuleSets, forKey: "fields[gameCenterMatchmakingRuleSets]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
