// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Subscriptions.WithID {
	public var appStoreReviewScreenshot: AppStoreReviewScreenshot {
		AppStoreReviewScreenshot(path: path + "/appStoreReviewScreenshot")
	}

	public struct AppStoreReviewScreenshot {
		/// Path: `/v1/subscriptions/{id}/appStoreReviewScreenshot`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.SubscriptionAppStoreReviewScreenshotResponse> {
			Request(method: "GET", url: path, query: parameters?.asQuery, id: "subscriptions-appStoreReviewScreenshot-get_to_one_related")
		}

		public struct GetParameters {
			public var fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots]?
			public var fieldsSubscriptions: [FieldsSubscriptions]?
			public var include: [Include]?

			public enum FieldsSubscriptionAppStoreReviewScreenshots: String, Codable, CaseIterable {
				case assetDeliveryState
				case assetToken
				case assetType
				case fileName
				case fileSize
				case imageAsset
				case sourceFileChecksum
				case subscription
				case uploadOperations
				case uploaded
			}

			public enum FieldsSubscriptions: String, Codable, CaseIterable {
				case appStoreReviewScreenshot
				case availableInAllTerritories
				case familySharable
				case group
				case groupLevel
				case introductoryOffers
				case name
				case offerCodes
				case pricePoints
				case prices
				case productID = "productId"
				case promotedPurchase
				case promotionalOffers
				case reviewNote
				case state
				case subscriptionLocalizations
				case subscriptionPeriod
			}

			public enum Include: String, Codable, CaseIterable {
				case subscription
			}

			public init(fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots]? = nil, fieldsSubscriptions: [FieldsSubscriptions]? = nil, include: [Include]? = nil) {
				self.fieldsSubscriptionAppStoreReviewScreenshots = fieldsSubscriptionAppStoreReviewScreenshots
				self.fieldsSubscriptions = fieldsSubscriptions
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsSubscriptionAppStoreReviewScreenshots, forKey: "fields[subscriptionAppStoreReviewScreenshots]")
				encoder.encode(fieldsSubscriptions, forKey: "fields[subscriptions]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
