// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppEventLocalizations {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/appEventLocalizations/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppEventLocalizationResponse> {
			Request(method: "GET", url: path, query: parameters?.asQuery, id: "appEventLocalizations-get_instance")
		}

		public struct GetParameters {
			public var fieldsAppEventLocalizations: [FieldsAppEventLocalizations]?
			public var include: [Include]?
			public var fieldsAppEventScreenshots: [FieldsAppEventScreenshots]?
			public var fieldsAppEventVideoClips: [FieldsAppEventVideoClips]?
			public var limitAppEventScreenshots: Int?
			public var limitAppEventVideoClips: Int?

			public enum FieldsAppEventLocalizations: String, Codable, CaseIterable {
				case appEvent
				case appEventScreenshots
				case appEventVideoClips
				case locale
				case longDescription
				case name
				case shortDescription
			}

			public enum Include: String, Codable, CaseIterable {
				case appEvent
				case appEventScreenshots
				case appEventVideoClips
			}

			public enum FieldsAppEventScreenshots: String, Codable, CaseIterable {
				case appEventAssetType
				case appEventLocalization
				case assetDeliveryState
				case assetToken
				case fileName
				case fileSize
				case imageAsset
				case uploadOperations
				case uploaded
			}

			public enum FieldsAppEventVideoClips: String, Codable, CaseIterable {
				case appEventAssetType
				case appEventLocalization
				case assetDeliveryState
				case fileName
				case fileSize
				case previewFrameTimeCode
				case previewImage
				case uploadOperations
				case uploaded
				case videoURL = "videoUrl"
			}

			public init(fieldsAppEventLocalizations: [FieldsAppEventLocalizations]? = nil, include: [Include]? = nil, fieldsAppEventScreenshots: [FieldsAppEventScreenshots]? = nil, fieldsAppEventVideoClips: [FieldsAppEventVideoClips]? = nil, limitAppEventScreenshots: Int? = nil, limitAppEventVideoClips: Int? = nil) {
				self.fieldsAppEventLocalizations = fieldsAppEventLocalizations
				self.include = include
				self.fieldsAppEventScreenshots = fieldsAppEventScreenshots
				self.fieldsAppEventVideoClips = fieldsAppEventVideoClips
				self.limitAppEventScreenshots = limitAppEventScreenshots
				self.limitAppEventVideoClips = limitAppEventVideoClips
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAppEventLocalizations, forKey: "fields[appEventLocalizations]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsAppEventScreenshots, forKey: "fields[appEventScreenshots]")
				encoder.encode(fieldsAppEventVideoClips, forKey: "fields[appEventVideoClips]")
				encoder.encode(limitAppEventScreenshots, forKey: "limit[appEventScreenshots]")
				encoder.encode(limitAppEventVideoClips, forKey: "limit[appEventVideoClips]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.AppEventLocalizationUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.AppEventLocalizationResponse> {
			Request(method: "PATCH", url: path, body: body, id: "appEventLocalizations-update_instance")
		}

		public var delete: Request<Void> {
			Request(method: "DELETE", url: path, id: "appEventLocalizations-delete_instance")
		}
	}
}
