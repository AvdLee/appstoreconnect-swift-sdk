// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.PromotedPurchases {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/promotedPurchases/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.PromotedPurchaseResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "promotedPurchases_getInstance")
		}

		public struct GetParameters {
			public var fieldsPromotedPurchases: [FieldsPromotedPurchases]?
			public var fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages]?
			public var include: [Include]?
			public var limitPromotionImages: Int?

			public enum FieldsPromotedPurchases: String, Codable, CaseIterable {
				case visibleForAllUsers
				case enabled
				case state
				case inAppPurchaseV2
				case subscription
				case promotionImages
			}

			public enum FieldsPromotedPurchaseImages: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case sourceFileChecksum
				case assetToken
				case imageAsset
				case assetType
				case uploadOperations
				case state
				case promotedPurchase
			}

			public enum Include: String, Codable, CaseIterable {
				case inAppPurchaseV2
				case subscription
				case promotionImages
			}

			public init(fieldsPromotedPurchases: [FieldsPromotedPurchases]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages]? = nil, include: [Include]? = nil, limitPromotionImages: Int? = nil) {
				self.fieldsPromotedPurchases = fieldsPromotedPurchases
				self.fieldsPromotedPurchaseImages = fieldsPromotedPurchaseImages
				self.include = include
				self.limitPromotionImages = limitPromotionImages
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsPromotedPurchases, forKey: "fields[promotedPurchases]")
				encoder.encode(fieldsPromotedPurchaseImages, forKey: "fields[promotedPurchaseImages]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitPromotionImages, forKey: "limit[promotionImages]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.PromotedPurchaseUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.PromotedPurchaseResponse> {
			Request(path: path, method: "PATCH", body: body, id: "promotedPurchases_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "promotedPurchases_deleteInstance")
		}
	}
}
