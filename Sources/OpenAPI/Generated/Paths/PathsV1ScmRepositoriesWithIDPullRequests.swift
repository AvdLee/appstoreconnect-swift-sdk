// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.ScmRepositories.WithID {
	public var pullRequests: PullRequests {
		PullRequests(path: path + "/pullRequests")
	}

	public struct PullRequests {
		/// Path: `/v1/scmRepositories/{id}/pullRequests`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.ScmPullRequestsResponse> {
			Request(method: "GET", url: path, query: parameters?.asQuery, id: "scmRepositories-pullRequests-get_to_many_related")
		}

		public struct GetParameters {
			public var fieldsScmPullRequests: [FieldsScmPullRequests]?
			public var fieldsScmRepositories: [FieldsScmRepositories]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsScmPullRequests: String, Codable, CaseIterable {
				case destinationBranchName
				case destinationRepositoryName
				case destinationRepositoryOwner
				case isClosed
				case isCrossRepository
				case number
				case repository
				case sourceBranchName
				case sourceRepositoryName
				case sourceRepositoryOwner
				case title
				case webURL = "webUrl"
			}

			public enum FieldsScmRepositories: String, Codable, CaseIterable {
				case defaultBranch
				case gitReferences
				case httpCloneURL = "httpCloneUrl"
				case lastAccessedDate
				case ownerName
				case pullRequests
				case repositoryName
				case scmProvider
				case sshCloneURL = "sshCloneUrl"
			}

			public enum Include: String, Codable, CaseIterable {
				case repository
			}

			public init(fieldsScmPullRequests: [FieldsScmPullRequests]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.fieldsScmPullRequests = fieldsScmPullRequests
				self.fieldsScmRepositories = fieldsScmRepositories
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsScmPullRequests, forKey: "fields[scmPullRequests]")
				encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
