// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersions.WithID {
	public var alternativeDistributionPackage: AlternativeDistributionPackage {
		AlternativeDistributionPackage(path: path + "/alternativeDistributionPackage")
	}

	public struct AlternativeDistributionPackage {
		/// Path: `/v1/appStoreVersions/{id}/alternativeDistributionPackage`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AlternativeDistributionPackageResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersions-alternativeDistributionPackage-get_to_one_related")
		}

		public struct GetParameters {
			public var fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]?
			public var fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions]?
			public var limitVersions: Int?
			public var include: [Include]?

			public enum FieldsAlternativeDistributionPackages: String, Codable, CaseIterable {
				case appStoreVersion
				case versions
			}

			public enum FieldsAlternativeDistributionPackageVersions: String, Codable, CaseIterable {
				case alternativeDistributionPackage
				case deltas
				case state
				case url
				case urlExpirationDate
				case variants
				case version
			}

			public enum Include: String, Codable, CaseIterable {
				case versions
			}

			public init(fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions]? = nil, limitVersions: Int? = nil, include: [Include]? = nil) {
				self.fieldsAlternativeDistributionPackages = fieldsAlternativeDistributionPackages
				self.fieldsAlternativeDistributionPackageVersions = fieldsAlternativeDistributionPackageVersions
				self.limitVersions = limitVersions
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAlternativeDistributionPackages, forKey: "fields[alternativeDistributionPackages]")
				encoder.encode(fieldsAlternativeDistributionPackageVersions, forKey: "fields[alternativeDistributionPackageVersions]")
				encoder.encode(limitVersions, forKey: "limit[versions]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
