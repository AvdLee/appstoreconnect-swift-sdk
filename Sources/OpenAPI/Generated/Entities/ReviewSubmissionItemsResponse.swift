// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ReviewSubmissionItemsResponse: Codable {
	public var data: [ReviewSubmissionItem]
	public var included: [IncludedItem]?
	public var links: PagedDocumentLinks
	public var meta: PagingInformation?

	public enum IncludedItem: Codable {
		case appCustomProductPageVersion(AppCustomProductPageVersion)
		case appEvent(AppEvent)
		case appStoreVersionExperiment(AppStoreVersionExperiment)
		case appStoreVersion(AppStoreVersion)
		case backgroundAssetVersion(BackgroundAssetVersion)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "appCustomProductPageVersions": self = .appCustomProductPageVersion(try container.decode(AppCustomProductPageVersion.self))
			case "appEvents": self = .appEvent(try container.decode(AppEvent.self))
			case "appStoreVersionExperiments": self = .appStoreVersionExperiment(try container.decode(AppStoreVersionExperiment.self))
			case "appStoreVersions": self = .appStoreVersion(try container.decode(AppStoreVersion.self))
			case "backgroundAssetVersions": self = .backgroundAssetVersion(try container.decode(BackgroundAssetVersion.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (appCustomProductPageVersions, appEvents, appStoreVersionExperiments, appStoreVersions, backgroundAssetVersions)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .appCustomProductPageVersion(let value): try container.encode(value)
			case .appEvent(let value): try container.encode(value)
			case .appStoreVersionExperiment(let value): try container.encode(value)
			case .appStoreVersion(let value): try container.encode(value)
			case .backgroundAssetVersion(let value): try container.encode(value)
			}
		}
	}

	public init(data: [ReviewSubmissionItem], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
		self.data = data
		self.included = included
		self.links = links
		self.meta = meta
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode([ReviewSubmissionItem].self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(PagedDocumentLinks.self, forKey: "links")
		self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
		try values.encodeIfPresent(meta, forKey: "meta")
	}
}
