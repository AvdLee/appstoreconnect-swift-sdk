// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CiArtifact: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case ciArtifacts
	}

	public struct Attributes: Codable {
		public var fileType: FileType?
		public var fileName: String?
		public var fileSize: Int?
		public var downloadURL: URL?

		public enum FileType: String, Codable, CaseIterable {
			case archive = "ARCHIVE"
			case archiveExport = "ARCHIVE_EXPORT"
			case logBundle = "LOG_BUNDLE"
			case resultBundle = "RESULT_BUNDLE"
			case testProducts = "TEST_PRODUCTS"
			case xcodebuildProducts = "XCODEBUILD_PRODUCTS"
			case stapledNotarizedArchive = "STAPLED_NOTARIZED_ARCHIVE"
		}

		public init(fileType: FileType? = nil, fileName: String? = nil, fileSize: Int? = nil, downloadURL: URL? = nil) {
			self.fileType = fileType
			self.fileName = fileName
			self.fileSize = fileSize
			self.downloadURL = downloadURL
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.fileType = try values.decodeIfPresent(FileType.self, forKey: "fileType")
			self.fileName = try values.decodeIfPresent(String.self, forKey: "fileName")
			self.fileSize = try values.decodeIfPresent(Int.self, forKey: "fileSize")
			self.downloadURL = try values.decodeIfPresent(URL.self, forKey: "downloadUrl")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(fileType, forKey: "fileType")
			try values.encodeIfPresent(fileName, forKey: "fileName")
			try values.encodeIfPresent(fileSize, forKey: "fileSize")
			try values.encodeIfPresent(downloadURL, forKey: "downloadUrl")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
