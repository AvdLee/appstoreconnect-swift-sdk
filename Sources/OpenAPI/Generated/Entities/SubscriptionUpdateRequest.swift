// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubscriptionUpdateRequest: Codable {
	public var data: Data
	public var included: [IncludedItem]?

	public struct Data: Codable, Identifiable {
		public var type: `Type`
		public var id: String
		public var attributes: Attributes?
		public var relationships: Relationships?

		public enum `Type`: String, Codable, CaseIterable {
			case subscriptions
		}

		public struct Attributes: Codable {
			public var name: String?
			public var isFamilySharable: Bool?
			public var subscriptionPeriod: SubscriptionPeriod?
			public var reviewNote: String?
			public var groupLevel: Int?

			public enum SubscriptionPeriod: String, Codable, CaseIterable {
				case oneWeek = "ONE_WEEK"
				case oneMonth = "ONE_MONTH"
				case twoMonths = "TWO_MONTHS"
				case threeMonths = "THREE_MONTHS"
				case sixMonths = "SIX_MONTHS"
				case oneYear = "ONE_YEAR"
			}

			public init(name: String? = nil, isFamilySharable: Bool? = nil, subscriptionPeriod: SubscriptionPeriod? = nil, reviewNote: String? = nil, groupLevel: Int? = nil) {
				self.name = name
				self.isFamilySharable = isFamilySharable
				self.subscriptionPeriod = subscriptionPeriod
				self.reviewNote = reviewNote
				self.groupLevel = groupLevel
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.name = try values.decodeIfPresent(String.self, forKey: "name")
				self.isFamilySharable = try values.decodeIfPresent(Bool.self, forKey: "familySharable")
				self.subscriptionPeriod = try values.decodeIfPresent(SubscriptionPeriod.self, forKey: "subscriptionPeriod")
				self.reviewNote = try values.decodeIfPresent(String.self, forKey: "reviewNote")
				self.groupLevel = try values.decodeIfPresent(Int.self, forKey: "groupLevel")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(name, forKey: "name")
				try values.encodeIfPresent(isFamilySharable, forKey: "familySharable")
				try values.encodeIfPresent(subscriptionPeriod, forKey: "subscriptionPeriod")
				try values.encodeIfPresent(reviewNote, forKey: "reviewNote")
				try values.encodeIfPresent(groupLevel, forKey: "groupLevel")
			}
		}

		public struct Relationships: Codable {
			public var introductoryOffers: IntroductoryOffers?
			public var promotionalOffers: PromotionalOffers?
			public var prices: Prices?

			public struct IntroductoryOffers: Codable {
				public var data: [Datum]?

				public struct Datum: Codable, Identifiable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case subscriptionIntroductoryOffers
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}

					public init(from decoder: Decoder) throws {
						let values = try decoder.container(keyedBy: StringCodingKey.self)
						self.type = try values.decode(`Type`.self, forKey: "type")
						self.id = try values.decode(String.self, forKey: "id")
					}

					public func encode(to encoder: Encoder) throws {
						var values = encoder.container(keyedBy: StringCodingKey.self)
						try values.encode(type, forKey: "type")
						try values.encode(id, forKey: "id")
					}
				}

				public init(data: [Datum]? = nil) {
					self.data = data
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encodeIfPresent(data, forKey: "data")
				}
			}

			public struct PromotionalOffers: Codable {
				public var data: [Datum]?

				public struct Datum: Codable, Identifiable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case subscriptionPromotionalOffers
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}

					public init(from decoder: Decoder) throws {
						let values = try decoder.container(keyedBy: StringCodingKey.self)
						self.type = try values.decode(`Type`.self, forKey: "type")
						self.id = try values.decode(String.self, forKey: "id")
					}

					public func encode(to encoder: Encoder) throws {
						var values = encoder.container(keyedBy: StringCodingKey.self)
						try values.encode(type, forKey: "type")
						try values.encode(id, forKey: "id")
					}
				}

				public init(data: [Datum]? = nil) {
					self.data = data
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encodeIfPresent(data, forKey: "data")
				}
			}

			public struct Prices: Codable {
				public var data: [Datum]?

				public struct Datum: Codable, Identifiable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case subscriptionPrices
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}

					public init(from decoder: Decoder) throws {
						let values = try decoder.container(keyedBy: StringCodingKey.self)
						self.type = try values.decode(`Type`.self, forKey: "type")
						self.id = try values.decode(String.self, forKey: "id")
					}

					public func encode(to encoder: Encoder) throws {
						var values = encoder.container(keyedBy: StringCodingKey.self)
						try values.encode(type, forKey: "type")
						try values.encode(id, forKey: "id")
					}
				}

				public init(data: [Datum]? = nil) {
					self.data = data
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encodeIfPresent(data, forKey: "data")
				}
			}

			public init(introductoryOffers: IntroductoryOffers? = nil, promotionalOffers: PromotionalOffers? = nil, prices: Prices? = nil) {
				self.introductoryOffers = introductoryOffers
				self.promotionalOffers = promotionalOffers
				self.prices = prices
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.introductoryOffers = try values.decodeIfPresent(IntroductoryOffers.self, forKey: "introductoryOffers")
				self.promotionalOffers = try values.decodeIfPresent(PromotionalOffers.self, forKey: "promotionalOffers")
				self.prices = try values.decodeIfPresent(Prices.self, forKey: "prices")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(introductoryOffers, forKey: "introductoryOffers")
				try values.encodeIfPresent(promotionalOffers, forKey: "promotionalOffers")
				try values.encodeIfPresent(prices, forKey: "prices")
			}
		}

		public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
			self.type = type
			self.id = id
			self.attributes = attributes
			self.relationships = relationships
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.id = try values.decode(String.self, forKey: "id")
			self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
			self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(id, forKey: "id")
			try values.encodeIfPresent(attributes, forKey: "attributes")
			try values.encodeIfPresent(relationships, forKey: "relationships")
		}
	}

	public enum IncludedItem: Codable {
		case subscriptionPromotionalOfferInlineCreate(SubscriptionPromotionalOfferInlineCreate)
		case subscriptionPriceInlineCreate(SubscriptionPriceInlineCreate)
		case subscriptionIntroductoryOfferInlineCreate(SubscriptionIntroductoryOfferInlineCreate)

		public init(from decoder: Decoder) throws {
			let container = try decoder.singleValueContainer()
			if let value = try? container.decode(SubscriptionPromotionalOfferInlineCreate.self) {
				self = .subscriptionPromotionalOfferInlineCreate(value)
			} else if let value = try? container.decode(SubscriptionPriceInlineCreate.self) {
				self = .subscriptionPriceInlineCreate(value)
			} else if let value = try? container.decode(SubscriptionIntroductoryOfferInlineCreate.self) {
				self = .subscriptionIntroductoryOfferInlineCreate(value)
			} else {
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Data could not be decoded as any of the expected types (SubscriptionPromotionalOfferInlineCreate, SubscriptionPriceInlineCreate, SubscriptionIntroductoryOfferInlineCreate)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .subscriptionPromotionalOfferInlineCreate(let value): try container.encode(value)
			case .subscriptionPriceInlineCreate(let value): try container.encode(value)
			case .subscriptionIntroductoryOfferInlineCreate(let value): try container.encode(value)
			}
		}
	}

	public init(data: Data, included: [IncludedItem]? = nil) {
		self.data = data
		self.included = included
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
	}
}
