// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Checksums: Codable {
	public var file: File?
	public var composite: Composite?

	public struct File: Codable {
		public var hash: String?
		public var algorithm: ChecksumAlgorithm?

		public init(hash: String? = nil, algorithm: ChecksumAlgorithm? = nil) {
			self.hash = hash
			self.algorithm = algorithm
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.hash = try values.decodeIfPresent(String.self, forKey: "hash")
			self.algorithm = try values.decodeIfPresent(ChecksumAlgorithm.self, forKey: "algorithm")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(hash, forKey: "hash")
			try values.encodeIfPresent(algorithm, forKey: "algorithm")
		}
	}

	public struct Composite: Codable {
		public var hash: String?
		public var algorithm: Algorithm?

		public enum Algorithm: String, Codable, CaseIterable {
			case md5 = "MD5"
		}

		public init(hash: String? = nil, algorithm: Algorithm? = nil) {
			self.hash = hash
			self.algorithm = algorithm
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.hash = try values.decodeIfPresent(String.self, forKey: "hash")
			self.algorithm = try values.decodeIfPresent(Algorithm.self, forKey: "algorithm")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(hash, forKey: "hash")
			try values.encodeIfPresent(algorithm, forKey: "algorithm")
		}
	}

	public init(file: File? = nil, composite: Composite? = nil) {
		self.file = file
		self.composite = composite
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.file = try values.decodeIfPresent(File.self, forKey: "file")
		self.composite = try values.decodeIfPresent(Composite.self, forKey: "composite")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encodeIfPresent(file, forKey: "file")
		try values.encodeIfPresent(composite, forKey: "composite")
	}
}
