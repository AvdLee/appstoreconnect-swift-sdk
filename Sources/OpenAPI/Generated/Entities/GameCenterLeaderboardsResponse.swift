// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterLeaderboardsResponse: Codable {
	public var data: [GameCenterLeaderboard]
	public var included: [IncludedItem]?
	public var links: PagedDocumentLinks
	public var meta: PagingInformation?

	public enum IncludedItem: Codable {
		case gameCenterActivity(GameCenterActivity)
		case gameCenterChallenge(GameCenterChallenge)
		case gameCenterDetail(GameCenterDetail)
		case gameCenterGroup(GameCenterGroup)
		case gameCenterLeaderboardLocalization(GameCenterLeaderboardLocalization)
		case gameCenterLeaderboardRelease(GameCenterLeaderboardRelease)
		case gameCenterLeaderboardSet(GameCenterLeaderboardSet)
		case gameCenterLeaderboard(GameCenterLeaderboard)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "gameCenterActivities": self = .gameCenterActivity(try container.decode(GameCenterActivity.self))
			case "gameCenterChallenges": self = .gameCenterChallenge(try container.decode(GameCenterChallenge.self))
			case "gameCenterDetails": self = .gameCenterDetail(try container.decode(GameCenterDetail.self))
			case "gameCenterGroups": self = .gameCenterGroup(try container.decode(GameCenterGroup.self))
			case "gameCenterLeaderboardLocalizations": self = .gameCenterLeaderboardLocalization(try container.decode(GameCenterLeaderboardLocalization.self))
			case "gameCenterLeaderboardReleases": self = .gameCenterLeaderboardRelease(try container.decode(GameCenterLeaderboardRelease.self))
			case "gameCenterLeaderboardSets": self = .gameCenterLeaderboardSet(try container.decode(GameCenterLeaderboardSet.self))
			case "gameCenterLeaderboards": self = .gameCenterLeaderboard(try container.decode(GameCenterLeaderboard.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (gameCenterActivities, gameCenterChallenges, gameCenterDetails, gameCenterGroups, gameCenterLeaderboardLocalizations, gameCenterLeaderboardReleases, gameCenterLeaderboardSets, gameCenterLeaderboards)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .gameCenterActivity(let value): try container.encode(value)
			case .gameCenterChallenge(let value): try container.encode(value)
			case .gameCenterDetail(let value): try container.encode(value)
			case .gameCenterGroup(let value): try container.encode(value)
			case .gameCenterLeaderboardLocalization(let value): try container.encode(value)
			case .gameCenterLeaderboardRelease(let value): try container.encode(value)
			case .gameCenterLeaderboardSet(let value): try container.encode(value)
			case .gameCenterLeaderboard(let value): try container.encode(value)
			}
		}
	}

	public init(data: [GameCenterLeaderboard], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
		self.data = data
		self.included = included
		self.links = links
		self.meta = meta
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode([GameCenterLeaderboard].self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(PagedDocumentLinks.self, forKey: "links")
		self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
		try values.encodeIfPresent(meta, forKey: "meta")
	}
}
