// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppResponse: Codable {
	/// App
	public var data: App
	public var included: [IncludedItem]?
	public var links: DocumentLinks

	public enum IncludedItem: Codable {
		case appClip(AppClip)
		case appCustomProductPage(AppCustomProductPage)
		case appEncryptionDeclaration(AppEncryptionDeclaration)
		case appEvent(AppEvent)
		case appInfo(AppInfo)
		case appStoreVersionExperimentV2(AppStoreVersionExperimentV2)
		case appStoreVersion(AppStoreVersion)
		case betaAppLocalization(BetaAppLocalization)
		case betaAppReviewDetail(BetaAppReviewDetail)
		case betaGroup(BetaGroup)
		case betaLicenseAgreement(BetaLicenseAgreement)
		case build(Build)
		case ciProduct(CiProduct)
		case endUserLicenseAgreement(EndUserLicenseAgreement)
		case gameCenterDetail(GameCenterDetail)
		case gameCenterEnabledVersion(GameCenterEnabledVersion)
		case inAppPurchase(InAppPurchase)
		case prereleaseVersion(PrereleaseVersion)
		case promotedPurchase(PromotedPurchase)
		case reviewSubmission(ReviewSubmission)
		case subscriptionGracePeriod(SubscriptionGracePeriod)
		case subscriptionGroup(SubscriptionGroup)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "appClips": self = .appClip(try container.decode(AppClip.self))
			case "appCustomProductPages": self = .appCustomProductPage(try container.decode(AppCustomProductPage.self))
			case "appEncryptionDeclarations": self = .appEncryptionDeclaration(try container.decode(AppEncryptionDeclaration.self))
			case "appEvents": self = .appEvent(try container.decode(AppEvent.self))
			case "appInfos": self = .appInfo(try container.decode(AppInfo.self))
			case "appStoreVersionExperiments": self = .appStoreVersionExperimentV2(try container.decode(AppStoreVersionExperimentV2.self))
			case "appStoreVersions": self = .appStoreVersion(try container.decode(AppStoreVersion.self))
			case "betaAppLocalizations": self = .betaAppLocalization(try container.decode(BetaAppLocalization.self))
			case "betaAppReviewDetails": self = .betaAppReviewDetail(try container.decode(BetaAppReviewDetail.self))
			case "betaGroups": self = .betaGroup(try container.decode(BetaGroup.self))
			case "betaLicenseAgreements": self = .betaLicenseAgreement(try container.decode(BetaLicenseAgreement.self))
			case "builds": self = .build(try container.decode(Build.self))
			case "ciProducts": self = .ciProduct(try container.decode(CiProduct.self))
			case "endUserLicenseAgreements": self = .endUserLicenseAgreement(try container.decode(EndUserLicenseAgreement.self))
			case "gameCenterDetails": self = .gameCenterDetail(try container.decode(GameCenterDetail.self))
			case "gameCenterEnabledVersions": self = .gameCenterEnabledVersion(try container.decode(GameCenterEnabledVersion.self))
			case "inAppPurchases": self = .inAppPurchase(try container.decode(InAppPurchase.self))
			case "preReleaseVersions": self = .prereleaseVersion(try container.decode(PrereleaseVersion.self))
			case "promotedPurchases": self = .promotedPurchase(try container.decode(PromotedPurchase.self))
			case "reviewSubmissions": self = .reviewSubmission(try container.decode(ReviewSubmission.self))
			case "subscriptionGracePeriods": self = .subscriptionGracePeriod(try container.decode(SubscriptionGracePeriod.self))
			case "subscriptionGroups": self = .subscriptionGroup(try container.decode(SubscriptionGroup.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (appClips, appCustomProductPages, appEncryptionDeclarations, appEvents, appInfos, appStoreVersionExperiments, appStoreVersions, betaAppLocalizations, betaAppReviewDetails, betaGroups, betaLicenseAgreements, builds, ciProducts, endUserLicenseAgreements, gameCenterDetails, gameCenterEnabledVersions, inAppPurchases, preReleaseVersions, promotedPurchases, reviewSubmissions, subscriptionGracePeriods, subscriptionGroups)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .appClip(let value): try container.encode(value)
			case .appCustomProductPage(let value): try container.encode(value)
			case .appEncryptionDeclaration(let value): try container.encode(value)
			case .appEvent(let value): try container.encode(value)
			case .appInfo(let value): try container.encode(value)
			case .appStoreVersionExperimentV2(let value): try container.encode(value)
			case .appStoreVersion(let value): try container.encode(value)
			case .betaAppLocalization(let value): try container.encode(value)
			case .betaAppReviewDetail(let value): try container.encode(value)
			case .betaGroup(let value): try container.encode(value)
			case .betaLicenseAgreement(let value): try container.encode(value)
			case .build(let value): try container.encode(value)
			case .ciProduct(let value): try container.encode(value)
			case .endUserLicenseAgreement(let value): try container.encode(value)
			case .gameCenterDetail(let value): try container.encode(value)
			case .gameCenterEnabledVersion(let value): try container.encode(value)
			case .inAppPurchase(let value): try container.encode(value)
			case .prereleaseVersion(let value): try container.encode(value)
			case .promotedPurchase(let value): try container.encode(value)
			case .reviewSubmission(let value): try container.encode(value)
			case .subscriptionGracePeriod(let value): try container.encode(value)
			case .subscriptionGroup(let value): try container.encode(value)
			}
		}
	}

	public init(data: App, included: [IncludedItem]? = nil, links: DocumentLinks) {
		self.data = data
		self.included = included
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(App.self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(DocumentLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
	}
}
