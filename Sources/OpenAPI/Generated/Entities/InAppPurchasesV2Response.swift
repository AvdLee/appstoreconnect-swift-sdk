// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct InAppPurchasesV2Response: Codable {
	public var data: [InAppPurchaseV2]
	public var included: [IncludedItem]?
	public var links: PagedDocumentLinks
	public var meta: PagingInformation?

	public enum IncludedItem: Codable {
		case inAppPurchaseAppStoreReviewScreenshot(InAppPurchaseAppStoreReviewScreenshot)
		case inAppPurchaseAvailability(InAppPurchaseAvailability)
		case inAppPurchaseContent(InAppPurchaseContent)
		case inAppPurchaseImage(InAppPurchaseImage)
		case inAppPurchaseLocalization(InAppPurchaseLocalization)
		case inAppPurchasePricePoint(InAppPurchasePricePoint)
		case inAppPurchasePriceSchedule(InAppPurchasePriceSchedule)
		case promotedPurchase(PromotedPurchase)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "inAppPurchaseAppStoreReviewScreenshots": self = .inAppPurchaseAppStoreReviewScreenshot(try container.decode(InAppPurchaseAppStoreReviewScreenshot.self))
			case "inAppPurchaseAvailabilities": self = .inAppPurchaseAvailability(try container.decode(InAppPurchaseAvailability.self))
			case "inAppPurchaseContents": self = .inAppPurchaseContent(try container.decode(InAppPurchaseContent.self))
			case "inAppPurchaseImages": self = .inAppPurchaseImage(try container.decode(InAppPurchaseImage.self))
			case "inAppPurchaseLocalizations": self = .inAppPurchaseLocalization(try container.decode(InAppPurchaseLocalization.self))
			case "inAppPurchasePricePoints": self = .inAppPurchasePricePoint(try container.decode(InAppPurchasePricePoint.self))
			case "inAppPurchasePriceSchedules": self = .inAppPurchasePriceSchedule(try container.decode(InAppPurchasePriceSchedule.self))
			case "promotedPurchases": self = .promotedPurchase(try container.decode(PromotedPurchase.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (inAppPurchaseAppStoreReviewScreenshots, inAppPurchaseAvailabilities, inAppPurchaseContents, inAppPurchaseImages, inAppPurchaseLocalizations, inAppPurchasePricePoints, inAppPurchasePriceSchedules, promotedPurchases)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .inAppPurchaseAppStoreReviewScreenshot(let value): try container.encode(value)
			case .inAppPurchaseAvailability(let value): try container.encode(value)
			case .inAppPurchaseContent(let value): try container.encode(value)
			case .inAppPurchaseImage(let value): try container.encode(value)
			case .inAppPurchaseLocalization(let value): try container.encode(value)
			case .inAppPurchasePricePoint(let value): try container.encode(value)
			case .inAppPurchasePriceSchedule(let value): try container.encode(value)
			case .promotedPurchase(let value): try container.encode(value)
			}
		}
	}

	public init(data: [InAppPurchaseV2], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
		self.data = data
		self.included = included
		self.links = links
		self.meta = meta
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode([InAppPurchaseV2].self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(PagedDocumentLinks.self, forKey: "links")
		self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
		try values.encodeIfPresent(meta, forKey: "meta")
	}
}
