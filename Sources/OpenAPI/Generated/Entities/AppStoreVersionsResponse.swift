// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppStoreVersionsResponse: Codable {
	public var data: [AppStoreVersion]
	public var included: [IncludedItem]?
	public var links: PagedDocumentLinks
	public var meta: PagingInformation?

	public enum IncludedItem: Codable {
		case ageRatingDeclaration(AgeRatingDeclaration)
		case alternativeDistributionPackage(AlternativeDistributionPackage)
		case appClipDefaultExperience(AppClipDefaultExperience)
		case appStoreReviewDetail(AppStoreReviewDetail)
		case appStoreVersionExperiment(AppStoreVersionExperiment)
		case appStoreVersionLocalization(AppStoreVersionLocalization)
		case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
		case appStoreVersionSubmission(AppStoreVersionSubmission)
		case app(App)
		case build(Build)
		case gameCenterAppVersion(GameCenterAppVersion)
		case routingAppCoverage(RoutingAppCoverage)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "ageRatingDeclarations": self = .ageRatingDeclaration(try container.decode(AgeRatingDeclaration.self))
			case "alternativeDistributionPackages": self = .alternativeDistributionPackage(try container.decode(AlternativeDistributionPackage.self))
			case "appClipDefaultExperiences": self = .appClipDefaultExperience(try container.decode(AppClipDefaultExperience.self))
			case "appStoreReviewDetails": self = .appStoreReviewDetail(try container.decode(AppStoreReviewDetail.self))
			case "appStoreVersionExperiments": self = .appStoreVersionExperiment(try container.decode(AppStoreVersionExperiment.self))
			case "appStoreVersionLocalizations": self = .appStoreVersionLocalization(try container.decode(AppStoreVersionLocalization.self))
			case "appStoreVersionPhasedReleases": self = .appStoreVersionPhasedRelease(try container.decode(AppStoreVersionPhasedRelease.self))
			case "appStoreVersionSubmissions": self = .appStoreVersionSubmission(try container.decode(AppStoreVersionSubmission.self))
			case "apps": self = .app(try container.decode(App.self))
			case "builds": self = .build(try container.decode(Build.self))
			case "gameCenterAppVersions": self = .gameCenterAppVersion(try container.decode(GameCenterAppVersion.self))
			case "routingAppCoverages": self = .routingAppCoverage(try container.decode(RoutingAppCoverage.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (ageRatingDeclarations, alternativeDistributionPackages, appClipDefaultExperiences, appStoreReviewDetails, appStoreVersionExperiments, appStoreVersionLocalizations, appStoreVersionPhasedReleases, appStoreVersionSubmissions, apps, builds, gameCenterAppVersions, routingAppCoverages)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .ageRatingDeclaration(let value): try container.encode(value)
			case .alternativeDistributionPackage(let value): try container.encode(value)
			case .appClipDefaultExperience(let value): try container.encode(value)
			case .appStoreReviewDetail(let value): try container.encode(value)
			case .appStoreVersionExperiment(let value): try container.encode(value)
			case .appStoreVersionLocalization(let value): try container.encode(value)
			case .appStoreVersionPhasedRelease(let value): try container.encode(value)
			case .appStoreVersionSubmission(let value): try container.encode(value)
			case .app(let value): try container.encode(value)
			case .build(let value): try container.encode(value)
			case .gameCenterAppVersion(let value): try container.encode(value)
			case .routingAppCoverage(let value): try container.encode(value)
			}
		}
	}

	public init(data: [AppStoreVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
		self.data = data
		self.included = included
		self.links = links
		self.meta = meta
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode([AppStoreVersion].self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(PagedDocumentLinks.self, forKey: "links")
		self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
		try values.encodeIfPresent(meta, forKey: "meta")
	}
}
