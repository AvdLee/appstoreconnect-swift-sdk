// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BuildResponse: Codable {
	/// Build
	public var data: Build
	public var included: [IncludedItem]?
	public var links: DocumentLinks

	public enum IncludedItem: Codable {
		case appEncryptionDeclaration(AppEncryptionDeclaration)
		case appStoreVersion(AppStoreVersion)
		case app(App)
		case betaAppReviewSubmission(BetaAppReviewSubmission)
		case betaBuildLocalization(BetaBuildLocalization)
		case betaGroup(BetaGroup)
		case betaTester(BetaTester)
		case buildBetaDetail(BuildBetaDetail)
		case buildBundle(BuildBundle)
		case buildIcon(BuildIcon)
		case buildUpload(BuildUpload)
		case prereleaseVersion(PrereleaseVersion)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "appEncryptionDeclarations": self = .appEncryptionDeclaration(try container.decode(AppEncryptionDeclaration.self))
			case "appStoreVersions": self = .appStoreVersion(try container.decode(AppStoreVersion.self))
			case "apps": self = .app(try container.decode(App.self))
			case "betaAppReviewSubmissions": self = .betaAppReviewSubmission(try container.decode(BetaAppReviewSubmission.self))
			case "betaBuildLocalizations": self = .betaBuildLocalization(try container.decode(BetaBuildLocalization.self))
			case "betaGroups": self = .betaGroup(try container.decode(BetaGroup.self))
			case "betaTesters": self = .betaTester(try container.decode(BetaTester.self))
			case "buildBetaDetails": self = .buildBetaDetail(try container.decode(BuildBetaDetail.self))
			case "buildBundles": self = .buildBundle(try container.decode(BuildBundle.self))
			case "buildIcons": self = .buildIcon(try container.decode(BuildIcon.self))
			case "buildUploads": self = .buildUpload(try container.decode(BuildUpload.self))
			case "preReleaseVersions": self = .prereleaseVersion(try container.decode(PrereleaseVersion.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (appEncryptionDeclarations, appStoreVersions, apps, betaAppReviewSubmissions, betaBuildLocalizations, betaGroups, betaTesters, buildBetaDetails, buildBundles, buildIcons, buildUploads, preReleaseVersions)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .appEncryptionDeclaration(let value): try container.encode(value)
			case .appStoreVersion(let value): try container.encode(value)
			case .app(let value): try container.encode(value)
			case .betaAppReviewSubmission(let value): try container.encode(value)
			case .betaBuildLocalization(let value): try container.encode(value)
			case .betaGroup(let value): try container.encode(value)
			case .betaTester(let value): try container.encode(value)
			case .buildBetaDetail(let value): try container.encode(value)
			case .buildBundle(let value): try container.encode(value)
			case .buildIcon(let value): try container.encode(value)
			case .buildUpload(let value): try container.encode(value)
			case .prereleaseVersion(let value): try container.encode(value)
			}
		}
	}

	public init(data: Build, included: [IncludedItem]? = nil, links: DocumentLinks) {
		self.data = data
		self.included = included
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Build.self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(DocumentLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
	}
}
