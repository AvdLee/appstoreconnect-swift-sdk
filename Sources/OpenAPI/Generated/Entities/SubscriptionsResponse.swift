// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubscriptionsResponse: Codable {
	public var data: [Subscription]
	public var included: [IncludedItem]?
	public var links: PagedDocumentLinks
	public var meta: PagingInformation?

	public enum IncludedItem: Codable {
		case promotedPurchase(PromotedPurchase)
		case subscriptionAppStoreReviewScreenshot(SubscriptionAppStoreReviewScreenshot)
		case subscriptionAvailability(SubscriptionAvailability)
		case subscriptionGroup(SubscriptionGroup)
		case subscriptionImage(SubscriptionImage)
		case subscriptionIntroductoryOffer(SubscriptionIntroductoryOffer)
		case subscriptionLocalization(SubscriptionLocalization)
		case subscriptionOfferCode(SubscriptionOfferCode)
		case subscriptionPrice(SubscriptionPrice)
		case subscriptionPromotionalOffer(SubscriptionPromotionalOffer)
		case winBackOffer(WinBackOffer)

		public init(from decoder: Decoder) throws {

			struct Discriminator: Decodable {
				let type: String
			}

			let container = try decoder.singleValueContainer()
			let discriminatorValue = try container.decode(Discriminator.self).type

			switch discriminatorValue {
			case "promotedPurchases": self = .promotedPurchase(try container.decode(PromotedPurchase.self))
			case "subscriptionAppStoreReviewScreenshots": self = .subscriptionAppStoreReviewScreenshot(try container.decode(SubscriptionAppStoreReviewScreenshot.self))
			case "subscriptionAvailabilities": self = .subscriptionAvailability(try container.decode(SubscriptionAvailability.self))
			case "subscriptionGroups": self = .subscriptionGroup(try container.decode(SubscriptionGroup.self))
			case "subscriptionImages": self = .subscriptionImage(try container.decode(SubscriptionImage.self))
			case "subscriptionIntroductoryOffers": self = .subscriptionIntroductoryOffer(try container.decode(SubscriptionIntroductoryOffer.self))
			case "subscriptionLocalizations": self = .subscriptionLocalization(try container.decode(SubscriptionLocalization.self))
			case "subscriptionOfferCodes": self = .subscriptionOfferCode(try container.decode(SubscriptionOfferCode.self))
			case "subscriptionPrices": self = .subscriptionPrice(try container.decode(SubscriptionPrice.self))
			case "subscriptionPromotionalOffers": self = .subscriptionPromotionalOffer(try container.decode(SubscriptionPromotionalOffer.self))
			case "winBackOffers": self = .winBackOffer(try container.decode(WinBackOffer.self))

			default:
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Discriminator value '\(discriminatorValue)' does not match any expected values (promotedPurchases, subscriptionAppStoreReviewScreenshots, subscriptionAvailabilities, subscriptionGroups, subscriptionImages, subscriptionIntroductoryOffers, subscriptionLocalizations, subscriptionOfferCodes, subscriptionPrices, subscriptionPromotionalOffers, winBackOffers)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .promotedPurchase(let value): try container.encode(value)
			case .subscriptionAppStoreReviewScreenshot(let value): try container.encode(value)
			case .subscriptionAvailability(let value): try container.encode(value)
			case .subscriptionGroup(let value): try container.encode(value)
			case .subscriptionImage(let value): try container.encode(value)
			case .subscriptionIntroductoryOffer(let value): try container.encode(value)
			case .subscriptionLocalization(let value): try container.encode(value)
			case .subscriptionOfferCode(let value): try container.encode(value)
			case .subscriptionPrice(let value): try container.encode(value)
			case .subscriptionPromotionalOffer(let value): try container.encode(value)
			case .winBackOffer(let value): try container.encode(value)
			}
		}
	}

	public init(data: [Subscription], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
		self.data = data
		self.included = included
		self.links = links
		self.meta = meta
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode([Subscription].self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(PagedDocumentLinks.self, forKey: "links")
		self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
		try values.encodeIfPresent(meta, forKey: "meta")
	}
}
