// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BetaFeedbackCrashSubmission: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var relationships: Relationships?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case betaFeedbackCrashSubmissions
	}

	public struct Attributes: Codable {
		public var createdDate: Date?
		public var comment: String?
		public var email: String?
		public var deviceModel: String?
		public var osVersion: String?
		public var locale: String?
		public var timeZone: String?
		public var architecture: String?
		public var connectionType: DeviceConnectionType?
		public var pairedAppleWatch: String?
		public var appUptimeInMilliseconds: Int64?
		public var diskBytesAvailable: Int64?
		public var diskBytesTotal: Int64?
		public var batteryPercentage: Int?
		public var screenWidthInPoints: Int?
		public var screenHeightInPoints: Int?
		public var appPlatform: Platform?
		public var devicePlatform: Platform?
		public var deviceFamily: DeviceFamily?
		public var buildBundleID: String?

		public init(createdDate: Date? = nil, comment: String? = nil, email: String? = nil, deviceModel: String? = nil, osVersion: String? = nil, locale: String? = nil, timeZone: String? = nil, architecture: String? = nil, connectionType: DeviceConnectionType? = nil, pairedAppleWatch: String? = nil, appUptimeInMilliseconds: Int64? = nil, diskBytesAvailable: Int64? = nil, diskBytesTotal: Int64? = nil, batteryPercentage: Int? = nil, screenWidthInPoints: Int? = nil, screenHeightInPoints: Int? = nil, appPlatform: Platform? = nil, devicePlatform: Platform? = nil, deviceFamily: DeviceFamily? = nil, buildBundleID: String? = nil) {
			self.createdDate = createdDate
			self.comment = comment
			self.email = email
			self.deviceModel = deviceModel
			self.osVersion = osVersion
			self.locale = locale
			self.timeZone = timeZone
			self.architecture = architecture
			self.connectionType = connectionType
			self.pairedAppleWatch = pairedAppleWatch
			self.appUptimeInMilliseconds = appUptimeInMilliseconds
			self.diskBytesAvailable = diskBytesAvailable
			self.diskBytesTotal = diskBytesTotal
			self.batteryPercentage = batteryPercentage
			self.screenWidthInPoints = screenWidthInPoints
			self.screenHeightInPoints = screenHeightInPoints
			self.appPlatform = appPlatform
			self.devicePlatform = devicePlatform
			self.deviceFamily = deviceFamily
			self.buildBundleID = buildBundleID
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.createdDate = try values.decodeIfPresent(Date.self, forKey: "createdDate")
			self.comment = try values.decodeIfPresent(String.self, forKey: "comment")
			self.email = try values.decodeIfPresent(String.self, forKey: "email")
			self.deviceModel = try values.decodeIfPresent(String.self, forKey: "deviceModel")
			self.osVersion = try values.decodeIfPresent(String.self, forKey: "osVersion")
			self.locale = try values.decodeIfPresent(String.self, forKey: "locale")
			self.timeZone = try values.decodeIfPresent(String.self, forKey: "timeZone")
			self.architecture = try values.decodeIfPresent(String.self, forKey: "architecture")
			self.connectionType = try values.decodeIfPresent(DeviceConnectionType.self, forKey: "connectionType")
			self.pairedAppleWatch = try values.decodeIfPresent(String.self, forKey: "pairedAppleWatch")
			self.appUptimeInMilliseconds = try values.decodeIfPresent(Int64.self, forKey: "appUptimeInMilliseconds")
			self.diskBytesAvailable = try values.decodeIfPresent(Int64.self, forKey: "diskBytesAvailable")
			self.diskBytesTotal = try values.decodeIfPresent(Int64.self, forKey: "diskBytesTotal")
			self.batteryPercentage = try values.decodeIfPresent(Int.self, forKey: "batteryPercentage")
			self.screenWidthInPoints = try values.decodeIfPresent(Int.self, forKey: "screenWidthInPoints")
			self.screenHeightInPoints = try values.decodeIfPresent(Int.self, forKey: "screenHeightInPoints")
			self.appPlatform = try values.decodeIfPresent(Platform.self, forKey: "appPlatform")
			self.devicePlatform = try values.decodeIfPresent(Platform.self, forKey: "devicePlatform")
			self.deviceFamily = try values.decodeIfPresent(DeviceFamily.self, forKey: "deviceFamily")
			self.buildBundleID = try values.decodeIfPresent(String.self, forKey: "buildBundleId")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(createdDate, forKey: "createdDate")
			try values.encodeIfPresent(comment, forKey: "comment")
			try values.encodeIfPresent(email, forKey: "email")
			try values.encodeIfPresent(deviceModel, forKey: "deviceModel")
			try values.encodeIfPresent(osVersion, forKey: "osVersion")
			try values.encodeIfPresent(locale, forKey: "locale")
			try values.encodeIfPresent(timeZone, forKey: "timeZone")
			try values.encodeIfPresent(architecture, forKey: "architecture")
			try values.encodeIfPresent(connectionType, forKey: "connectionType")
			try values.encodeIfPresent(pairedAppleWatch, forKey: "pairedAppleWatch")
			try values.encodeIfPresent(appUptimeInMilliseconds, forKey: "appUptimeInMilliseconds")
			try values.encodeIfPresent(diskBytesAvailable, forKey: "diskBytesAvailable")
			try values.encodeIfPresent(diskBytesTotal, forKey: "diskBytesTotal")
			try values.encodeIfPresent(batteryPercentage, forKey: "batteryPercentage")
			try values.encodeIfPresent(screenWidthInPoints, forKey: "screenWidthInPoints")
			try values.encodeIfPresent(screenHeightInPoints, forKey: "screenHeightInPoints")
			try values.encodeIfPresent(appPlatform, forKey: "appPlatform")
			try values.encodeIfPresent(devicePlatform, forKey: "devicePlatform")
			try values.encodeIfPresent(deviceFamily, forKey: "deviceFamily")
			try values.encodeIfPresent(buildBundleID, forKey: "buildBundleId")
		}
	}

	public struct Relationships: Codable {
		public var crashLog: CrashLog?
		public var build: Build?
		public var tester: Tester?

		public struct CrashLog: Codable {
			public var links: RelationshipLinks?

			public init(links: RelationshipLinks? = nil) {
				self.links = links
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.links = try values.decodeIfPresent(RelationshipLinks.self, forKey: "links")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(links, forKey: "links")
			}
		}

		public struct Build: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case builds
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct Tester: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case betaTesters
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public init(crashLog: CrashLog? = nil, build: Build? = nil, tester: Tester? = nil) {
			self.crashLog = crashLog
			self.build = build
			self.tester = tester
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.crashLog = try values.decodeIfPresent(CrashLog.self, forKey: "crashLog")
			self.build = try values.decodeIfPresent(Build.self, forKey: "build")
			self.tester = try values.decodeIfPresent(Tester.self, forKey: "tester")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(crashLog, forKey: "crashLog")
			try values.encodeIfPresent(build, forKey: "build")
			try values.encodeIfPresent(tester, forKey: "tester")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.relationships = relationships
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(relationships, forKey: "relationships")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
