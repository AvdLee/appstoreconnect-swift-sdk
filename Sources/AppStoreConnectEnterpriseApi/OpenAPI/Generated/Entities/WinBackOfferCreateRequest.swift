// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct WinBackOfferCreateRequest: Codable {
	public var data: Data
	public var included: [WinBackOfferPriceInlineCreate]?

	public struct Data: Codable {
		public var type: `Type`
		public var attributes: Attributes
		public var relationships: Relationships

		public enum `Type`: String, Codable, CaseIterable {
			case winBackOffers
		}

		public struct Attributes: Codable {
			public var referenceName: String
			public var offerID: String
			public var duration: SubscriptionOfferDuration
			public var offerMode: SubscriptionOfferMode
			public var periodCount: Int
			public var customerEligibilityPaidSubscriptionDurationInMonths: Int
			public var customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange
			public var customerEligibilityWaitBetweenOffersInMonths: Int?
			public var startDate: String
			public var endDate: String?
			public var priority: Priority
			public var promotionIntent: PromotionIntent?

			public enum Priority: String, Codable, CaseIterable {
				case high = "HIGH"
				case normal = "NORMAL"
			}

			public enum PromotionIntent: String, Codable, CaseIterable {
				case notPromoted = "NOT_PROMOTED"
				case useAutoGeneratedAssets = "USE_AUTO_GENERATED_ASSETS"
			}

			public init(referenceName: String, offerID: String, duration: SubscriptionOfferDuration, offerMode: SubscriptionOfferMode, periodCount: Int, customerEligibilityPaidSubscriptionDurationInMonths: Int, customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange, customerEligibilityWaitBetweenOffersInMonths: Int? = nil, startDate: String, endDate: String? = nil, priority: Priority, promotionIntent: PromotionIntent? = nil) {
				self.referenceName = referenceName
				self.offerID = offerID
				self.duration = duration
				self.offerMode = offerMode
				self.periodCount = periodCount
				self.customerEligibilityPaidSubscriptionDurationInMonths = customerEligibilityPaidSubscriptionDurationInMonths
				self.customerEligibilityTimeSinceLastSubscribedInMonths = customerEligibilityTimeSinceLastSubscribedInMonths
				self.customerEligibilityWaitBetweenOffersInMonths = customerEligibilityWaitBetweenOffersInMonths
				self.startDate = startDate
				self.endDate = endDate
				self.priority = priority
				self.promotionIntent = promotionIntent
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.referenceName = try values.decode(String.self, forKey: "referenceName")
				self.offerID = try values.decode(String.self, forKey: "offerId")
				self.duration = try values.decode(SubscriptionOfferDuration.self, forKey: "duration")
				self.offerMode = try values.decode(SubscriptionOfferMode.self, forKey: "offerMode")
				self.periodCount = try values.decode(Int.self, forKey: "periodCount")
				self.customerEligibilityPaidSubscriptionDurationInMonths = try values.decode(Int.self, forKey: "customerEligibilityPaidSubscriptionDurationInMonths")
				self.customerEligibilityTimeSinceLastSubscribedInMonths = try values.decode(IntegerRange.self, forKey: "customerEligibilityTimeSinceLastSubscribedInMonths")
				self.customerEligibilityWaitBetweenOffersInMonths = try values.decodeIfPresent(Int.self, forKey: "customerEligibilityWaitBetweenOffersInMonths")
				self.startDate = try values.decode(String.self, forKey: "startDate")
				self.endDate = try values.decodeIfPresent(String.self, forKey: "endDate")
				self.priority = try values.decode(Priority.self, forKey: "priority")
				self.promotionIntent = try values.decodeIfPresent(PromotionIntent.self, forKey: "promotionIntent")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encode(referenceName, forKey: "referenceName")
				try values.encode(offerID, forKey: "offerId")
				try values.encode(duration, forKey: "duration")
				try values.encode(offerMode, forKey: "offerMode")
				try values.encode(periodCount, forKey: "periodCount")
				try values.encode(customerEligibilityPaidSubscriptionDurationInMonths, forKey: "customerEligibilityPaidSubscriptionDurationInMonths")
				try values.encode(customerEligibilityTimeSinceLastSubscribedInMonths, forKey: "customerEligibilityTimeSinceLastSubscribedInMonths")
				try values.encodeIfPresent(customerEligibilityWaitBetweenOffersInMonths, forKey: "customerEligibilityWaitBetweenOffersInMonths")
				try values.encode(startDate, forKey: "startDate")
				try values.encodeIfPresent(endDate, forKey: "endDate")
				try values.encode(priority, forKey: "priority")
				try values.encodeIfPresent(promotionIntent, forKey: "promotionIntent")
			}
		}

		public struct Relationships: Codable {
			public var subscription: Subscription
			public var prices: Prices

			public struct Subscription: Codable {
				public var data: Data

				public struct Data: Codable, Identifiable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case subscriptions
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}

					public init(from decoder: Decoder) throws {
						let values = try decoder.container(keyedBy: StringCodingKey.self)
						self.type = try values.decode(`Type`.self, forKey: "type")
						self.id = try values.decode(String.self, forKey: "id")
					}

					public func encode(to encoder: Encoder) throws {
						var values = encoder.container(keyedBy: StringCodingKey.self)
						try values.encode(type, forKey: "type")
						try values.encode(id, forKey: "id")
					}
				}

				public init(data: Data) {
					self.data = data
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.data = try values.decode(Data.self, forKey: "data")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(data, forKey: "data")
				}
			}

			public struct Prices: Codable {
				public var data: [Datum]

				public struct Datum: Codable, Identifiable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case winBackOfferPrices
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}

					public init(from decoder: Decoder) throws {
						let values = try decoder.container(keyedBy: StringCodingKey.self)
						self.type = try values.decode(`Type`.self, forKey: "type")
						self.id = try values.decode(String.self, forKey: "id")
					}

					public func encode(to encoder: Encoder) throws {
						var values = encoder.container(keyedBy: StringCodingKey.self)
						try values.encode(type, forKey: "type")
						try values.encode(id, forKey: "id")
					}
				}

				public init(data: [Datum]) {
					self.data = data
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.data = try values.decode([Datum].self, forKey: "data")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(data, forKey: "data")
				}
			}

			public init(subscription: Subscription, prices: Prices) {
				self.subscription = subscription
				self.prices = prices
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.subscription = try values.decode(Subscription.self, forKey: "subscription")
				self.prices = try values.decode(Prices.self, forKey: "prices")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encode(subscription, forKey: "subscription")
				try values.encode(prices, forKey: "prices")
			}
		}

		public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
			self.type = type
			self.attributes = attributes
			self.relationships = relationships
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.attributes = try values.decode(Attributes.self, forKey: "attributes")
			self.relationships = try values.decode(Relationships.self, forKey: "relationships")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(attributes, forKey: "attributes")
			try values.encode(relationships, forKey: "relationships")
		}
	}

	public init(data: Data, included: [WinBackOfferPriceInlineCreate]? = nil) {
		self.data = data
		self.included = included
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
		self.included = try values.decodeIfPresent([WinBackOfferPriceInlineCreate].self, forKey: "included")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
	}
}
