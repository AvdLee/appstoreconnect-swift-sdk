// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ErrorLinks: Codable {
	public var about: String?
	public var associated: Associated?

	public enum Associated: Codable {
		case string(String)
		case object(Object)

		public struct Object: Codable {
			public var href: String?
			public var meta: Meta?

			public struct Meta: Codable {
				public var source: String?

				public init(source: String? = nil) {
					self.source = source
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.source = try values.decodeIfPresent(String.self, forKey: "source")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encodeIfPresent(source, forKey: "source")
				}
			}

			public init(href: String? = nil, meta: Meta? = nil) {
				self.href = href
				self.meta = meta
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.href = try values.decodeIfPresent(String.self, forKey: "href")
				self.meta = try values.decodeIfPresent(Meta.self, forKey: "meta")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(href, forKey: "href")
				try values.encodeIfPresent(meta, forKey: "meta")
			}
		}

		public init(from decoder: Decoder) throws {
			let container = try decoder.singleValueContainer()
			if let value = try? container.decode(String.self) {
				self = .string(value)
			} else if let value = try? container.decode(Object.self) {
				self = .object(value)
			} else {
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Data could not be decoded as any of the expected types (String, Object)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .string(let value): try container.encode(value)
			case .object(let value): try container.encode(value)
			}
		}
	}

	public init(about: String? = nil, associated: Associated? = nil) {
		self.about = about
		self.associated = associated
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.about = try values.decodeIfPresent(String.self, forKey: "about")
		self.associated = try values.decodeIfPresent(Associated.self, forKey: "associated")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encodeIfPresent(about, forKey: "about")
		try values.encodeIfPresent(associated, forKey: "associated")
	}
}
