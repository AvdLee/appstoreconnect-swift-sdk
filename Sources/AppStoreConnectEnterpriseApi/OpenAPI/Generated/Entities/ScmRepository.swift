// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ScmRepository: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var relationships: Relationships?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case scmRepositories
	}

	public struct Attributes: Codable {
		public var lastAccessedDate: Date?
		public var httpCloneURL: URL?
		public var sshCloneURL: URL?
		public var ownerName: String?
		public var repositoryName: String?

		public init(lastAccessedDate: Date? = nil, httpCloneURL: URL? = nil, sshCloneURL: URL? = nil, ownerName: String? = nil, repositoryName: String? = nil) {
			self.lastAccessedDate = lastAccessedDate
			self.httpCloneURL = httpCloneURL
			self.sshCloneURL = sshCloneURL
			self.ownerName = ownerName
			self.repositoryName = repositoryName
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.lastAccessedDate = try values.decodeIfPresent(Date.self, forKey: "lastAccessedDate")
			self.httpCloneURL = try values.decodeIfPresent(URL.self, forKey: "httpCloneUrl")
			self.sshCloneURL = try values.decodeIfPresent(URL.self, forKey: "sshCloneUrl")
			self.ownerName = try values.decodeIfPresent(String.self, forKey: "ownerName")
			self.repositoryName = try values.decodeIfPresent(String.self, forKey: "repositoryName")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(lastAccessedDate, forKey: "lastAccessedDate")
			try values.encodeIfPresent(httpCloneURL, forKey: "httpCloneUrl")
			try values.encodeIfPresent(sshCloneURL, forKey: "sshCloneUrl")
			try values.encodeIfPresent(ownerName, forKey: "ownerName")
			try values.encodeIfPresent(repositoryName, forKey: "repositoryName")
		}
	}

	public struct Relationships: Codable {
		public var scmProvider: ScmProvider?
		public var defaultBranch: DefaultBranch?
		public var gitReferences: GitReferences?
		public var pullRequests: PullRequests?

		public struct ScmProvider: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case scmProviders
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct DefaultBranch: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case scmGitReferences
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct GitReferences: Codable {
			public var links: RelationshipLinks?

			public init(links: RelationshipLinks? = nil) {
				self.links = links
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.links = try values.decodeIfPresent(RelationshipLinks.self, forKey: "links")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(links, forKey: "links")
			}
		}

		public struct PullRequests: Codable {
			public var links: RelationshipLinks?

			public init(links: RelationshipLinks? = nil) {
				self.links = links
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.links = try values.decodeIfPresent(RelationshipLinks.self, forKey: "links")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(links, forKey: "links")
			}
		}

		public init(scmProvider: ScmProvider? = nil, defaultBranch: DefaultBranch? = nil, gitReferences: GitReferences? = nil, pullRequests: PullRequests? = nil) {
			self.scmProvider = scmProvider
			self.defaultBranch = defaultBranch
			self.gitReferences = gitReferences
			self.pullRequests = pullRequests
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.scmProvider = try values.decodeIfPresent(ScmProvider.self, forKey: "scmProvider")
			self.defaultBranch = try values.decodeIfPresent(DefaultBranch.self, forKey: "defaultBranch")
			self.gitReferences = try values.decodeIfPresent(GitReferences.self, forKey: "gitReferences")
			self.pullRequests = try values.decodeIfPresent(PullRequests.self, forKey: "pullRequests")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(scmProvider, forKey: "scmProvider")
			try values.encodeIfPresent(defaultBranch, forKey: "defaultBranch")
			try values.encodeIfPresent(gitReferences, forKey: "gitReferences")
			try values.encodeIfPresent(pullRequests, forKey: "pullRequests")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.relationships = relationships
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(relationships, forKey: "relationships")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
