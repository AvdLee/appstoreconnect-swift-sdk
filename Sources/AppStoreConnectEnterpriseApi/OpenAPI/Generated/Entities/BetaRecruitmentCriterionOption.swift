// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BetaRecruitmentCriterionOption: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case betaRecruitmentCriterionOptions
	}

	public struct Attributes: Codable {
		public var deviceFamilyOsVersions: [DeviceFamilyOsVersion]?

		public struct DeviceFamilyOsVersion: Codable {
			public var deviceFamily: DeviceFamily?
			public var osVersions: [String]?

			public init(deviceFamily: DeviceFamily? = nil, osVersions: [String]? = nil) {
				self.deviceFamily = deviceFamily
				self.osVersions = osVersions
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.deviceFamily = try values.decodeIfPresent(DeviceFamily.self, forKey: "deviceFamily")
				self.osVersions = try values.decodeIfPresent([String].self, forKey: "osVersions")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(deviceFamily, forKey: "deviceFamily")
				try values.encodeIfPresent(osVersions, forKey: "osVersions")
			}
		}

		public init(deviceFamilyOsVersions: [DeviceFamilyOsVersion]? = nil) {
			self.deviceFamilyOsVersions = deviceFamilyOsVersions
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.deviceFamilyOsVersions = try values.decodeIfPresent([DeviceFamilyOsVersion].self, forKey: "deviceFamilyOsVersions")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(deviceFamilyOsVersions, forKey: "deviceFamilyOsVersions")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
