// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BetaBuildUsagesV1MetricResponse: Codable {
	public var data: [Datum]
	public var links: PagedDocumentLinks
	public var meta: PagingInformation?

	public struct Datum: Codable {
		public var dataPoints: DataPoints?

		public struct DataPoints: Codable {
			public var start: Date?
			public var end: Date?
			public var values: Values?

			public struct Values: Codable {
				public var crashCount: Int?
				public var installCount: Int?
				public var sessionCount: Int?
				public var feedbackCount: Int?
				public var inviteCount: Int?

				public init(crashCount: Int? = nil, installCount: Int? = nil, sessionCount: Int? = nil, feedbackCount: Int? = nil, inviteCount: Int? = nil) {
					self.crashCount = crashCount
					self.installCount = installCount
					self.sessionCount = sessionCount
					self.feedbackCount = feedbackCount
					self.inviteCount = inviteCount
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.crashCount = try values.decodeIfPresent(Int.self, forKey: "crashCount")
					self.installCount = try values.decodeIfPresent(Int.self, forKey: "installCount")
					self.sessionCount = try values.decodeIfPresent(Int.self, forKey: "sessionCount")
					self.feedbackCount = try values.decodeIfPresent(Int.self, forKey: "feedbackCount")
					self.inviteCount = try values.decodeIfPresent(Int.self, forKey: "inviteCount")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encodeIfPresent(crashCount, forKey: "crashCount")
					try values.encodeIfPresent(installCount, forKey: "installCount")
					try values.encodeIfPresent(sessionCount, forKey: "sessionCount")
					try values.encodeIfPresent(feedbackCount, forKey: "feedbackCount")
					try values.encodeIfPresent(inviteCount, forKey: "inviteCount")
				}
			}

			public init(start: Date? = nil, end: Date? = nil, values: Values? = nil) {
				self.start = start
				self.end = end
				self.values = values
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.start = try values.decodeIfPresent(Date.self, forKey: "start")
				self.end = try values.decodeIfPresent(Date.self, forKey: "end")
				self.values = try values.decodeIfPresent(Values.self, forKey: "values")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(start, forKey: "start")
				try values.encodeIfPresent(end, forKey: "end")
				try values.encodeIfPresent(self.values, forKey: "values")
			}
		}

		public init(dataPoints: DataPoints? = nil) {
			self.dataPoints = dataPoints
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.dataPoints = try values.decodeIfPresent(DataPoints.self, forKey: "dataPoints")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(dataPoints, forKey: "dataPoints")
		}
	}

	public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
		self.data = data
		self.links = links
		self.meta = meta
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode([Datum].self, forKey: "data")
		self.links = try values.decode(PagedDocumentLinks.self, forKey: "links")
		self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encode(links, forKey: "links")
		try values.encodeIfPresent(meta, forKey: "meta")
	}
}
