// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct UserInvitationCreateRequest: Codable {
	public var data: Data

	public struct Data: Codable {
		public var type: `Type`
		public var attributes: Attributes

		public enum `Type`: String, Codable, CaseIterable {
			case userInvitations
		}

		public struct Attributes: Codable {
			public var email: String
			public var firstName: String
			public var lastName: String
			public var roles: [UserRole]

			public init(email: String, firstName: String, lastName: String, roles: [UserRole]) {
				self.email = email
				self.firstName = firstName
				self.lastName = lastName
				self.roles = roles
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.email = try values.decode(String.self, forKey: "email")
				self.firstName = try values.decode(String.self, forKey: "firstName")
				self.lastName = try values.decode(String.self, forKey: "lastName")
				self.roles = try values.decode([UserRole].self, forKey: "roles")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encode(email, forKey: "email")
				try values.encode(firstName, forKey: "firstName")
				try values.encode(lastName, forKey: "lastName")
				try values.encode(roles, forKey: "roles")
			}
		}

		public init(type: `Type`, attributes: Attributes) {
			self.type = type
			self.attributes = attributes
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.attributes = try values.decode(Attributes.self, forKey: "attributes")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(attributes, forKey: "attributes")
		}
	}

	public init(data: Data) {
		self.data = data
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
	}
}
