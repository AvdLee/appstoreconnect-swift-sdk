// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterChallengeUpdateRequest: Codable {
	public var data: Data

	public struct Data: Codable, Identifiable {
		public var type: `Type`
		public var id: String
		public var attributes: Attributes?
		public var relationships: Relationships?

		public enum `Type`: String, Codable, CaseIterable {
			case gameCenterChallenges
		}

		public struct Attributes: Codable {
			public var referenceName: String?
			public var allowedDurations: [AllowedDuration]?
			public var isArchived: Bool?
			public var isRepeatable: Bool?

			public enum AllowedDuration: String, Codable, CaseIterable {
				case oneDay = "ONE_DAY"
				case threeDays = "THREE_DAYS"
				case oneWeek = "ONE_WEEK"
			}

			public init(referenceName: String? = nil, allowedDurations: [AllowedDuration]? = nil, isArchived: Bool? = nil, isRepeatable: Bool? = nil) {
				self.referenceName = referenceName
				self.allowedDurations = allowedDurations
				self.isArchived = isArchived
				self.isRepeatable = isRepeatable
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.referenceName = try values.decodeIfPresent(String.self, forKey: "referenceName")
				self.allowedDurations = try values.decodeIfPresent([AllowedDuration].self, forKey: "allowedDurations")
				self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
				self.isRepeatable = try values.decodeIfPresent(Bool.self, forKey: "repeatable")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(referenceName, forKey: "referenceName")
				try values.encodeIfPresent(allowedDurations, forKey: "allowedDurations")
				try values.encodeIfPresent(isArchived, forKey: "archived")
				try values.encodeIfPresent(isRepeatable, forKey: "repeatable")
			}
		}

		public struct Relationships: Codable {
			public var leaderboard: Leaderboard?

			public struct Leaderboard: Codable {
				public var data: Data?

				public struct Data: Codable, Identifiable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case gameCenterLeaderboards
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}

					public init(from decoder: Decoder) throws {
						let values = try decoder.container(keyedBy: StringCodingKey.self)
						self.type = try values.decode(`Type`.self, forKey: "type")
						self.id = try values.decode(String.self, forKey: "id")
					}

					public func encode(to encoder: Encoder) throws {
						var values = encoder.container(keyedBy: StringCodingKey.self)
						try values.encode(type, forKey: "type")
						try values.encode(id, forKey: "id")
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.data = try values.decodeIfPresent(Data.self, forKey: "data")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encodeIfPresent(data, forKey: "data")
				}
			}

			public init(leaderboard: Leaderboard? = nil) {
				self.leaderboard = leaderboard
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.leaderboard = try values.decodeIfPresent(Leaderboard.self, forKey: "leaderboard")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(leaderboard, forKey: "leaderboard")
			}
		}

		public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
			self.type = type
			self.id = id
			self.attributes = attributes
			self.relationships = relationships
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.id = try values.decode(String.self, forKey: "id")
			self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
			self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(id, forKey: "id")
			try values.encodeIfPresent(attributes, forKey: "attributes")
			try values.encodeIfPresent(relationships, forKey: "relationships")
		}
	}

	public init(data: Data) {
		self.data = data
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
	}
}
