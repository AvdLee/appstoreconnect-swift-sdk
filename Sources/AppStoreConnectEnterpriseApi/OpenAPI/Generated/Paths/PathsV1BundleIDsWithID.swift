// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import AppStoreConnectApiCore
import URLQueryEncoder

extension EnterpriseAPIEndpoint.BundleIDs {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/bundleIds/{id}`
		public let path: String

		/// Read BundleId Information
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnectEnterpriseApi.BundleIDResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "bundleIds-get_instance")
		}

		public struct GetParameters {
			public var fieldsBundleIDs: [FieldsBundleIDs]?
			public var include: [Include]?
			public var fieldsBundleIDCapabilities: [FieldsBundleIDCapabilities]?
			public var fieldsProfiles: [FieldsProfiles]?
			public var limitBundleIDCapabilities: Int?
			public var limitProfiles: Int?

			public enum FieldsBundleIDs: String, Codable, CaseIterable {
				case bundleIDCapabilities = "bundleIdCapabilities"
				case identifier
				case name
				case platform
				case profiles
				case seedID = "seedId"
			}

			public enum Include: String, Codable, CaseIterable {
				case bundleIDCapabilities = "bundleIdCapabilities"
				case profiles
			}

			public enum FieldsBundleIDCapabilities: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case capabilityType
				case settings
			}

			public enum FieldsProfiles: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case certificates
				case createdDate
				case devices
				case expirationDate
				case name
				case platform
				case profileContent
				case profileState
				case profileType
				case uuid
			}

			public init(fieldsBundleIDs: [FieldsBundleIDs]? = nil, include: [Include]? = nil, fieldsBundleIDCapabilities: [FieldsBundleIDCapabilities]? = nil, fieldsProfiles: [FieldsProfiles]? = nil, limitBundleIDCapabilities: Int? = nil, limitProfiles: Int? = nil) {
				self.fieldsBundleIDs = fieldsBundleIDs
				self.include = include
				self.fieldsBundleIDCapabilities = fieldsBundleIDCapabilities
				self.fieldsProfiles = fieldsProfiles
				self.limitBundleIDCapabilities = limitBundleIDCapabilities
				self.limitProfiles = limitProfiles
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsBundleIDCapabilities, forKey: "fields[bundleIdCapabilities]")
				encoder.encode(fieldsProfiles, forKey: "fields[profiles]")
				encoder.encode(limitBundleIDCapabilities, forKey: "limit[bundleIdCapabilities]")
				encoder.encode(limitProfiles, forKey: "limit[profiles]")
				return encoder.items
			}
		}

		/// Modify a BundleId
		public func patch(_ body: AppStoreConnectEnterpriseApi.BundleIDUpdateRequest) -> Request<AppStoreConnectEnterpriseApi.BundleIDResponse> {
			Request(path: path, method: "PATCH", body: body, id: "bundleIds-update_instance")
		}

		/// Delete a BundleId
		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "bundleIds-delete_instance")
		}
	}
}
