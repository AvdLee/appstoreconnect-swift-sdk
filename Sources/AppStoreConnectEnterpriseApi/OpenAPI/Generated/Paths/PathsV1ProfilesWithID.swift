// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import AppStoreConnectApiCore
import URLQueryEncoder

extension EnterpriseAPIEndpoint.Profiles {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/profiles/{id}`
		public let path: String

		/// Read and Download Profile Information
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnectEnterpriseApi.ProfileResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "profiles-get_instance")
		}

		public struct GetParameters {
			public var fieldsProfiles: [FieldsProfiles]?
			public var include: [Include]?
			public var fieldsCertificates: [FieldsCertificates]?
			public var fieldsDevices: [FieldsDevices]?
			public var fieldsBundleIDs: [FieldsBundleIDs]?
			public var limitCertificates: Int?
			public var limitDevices: Int?

			public enum FieldsProfiles: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case certificates
				case createdDate
				case devices
				case expirationDate
				case name
				case platform
				case profileContent
				case profileState
				case profileType
				case uuid
			}

			public enum Include: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case certificates
				case devices
			}

			public enum FieldsCertificates: String, Codable, CaseIterable {
				case certificateContent
				case certificateType
				case csrContent
				case displayName
				case expirationDate
				case name
				case passTypeID = "passTypeId"
				case platform
				case serialNumber
			}

			public enum FieldsDevices: String, Codable, CaseIterable {
				case addedDate
				case deviceClass
				case model
				case name
				case platform
				case status
				case udid
			}

			public enum FieldsBundleIDs: String, Codable, CaseIterable {
				case bundleIDCapabilities = "bundleIdCapabilities"
				case identifier
				case name
				case platform
				case profiles
				case seedID = "seedId"
			}

			public init(fieldsProfiles: [FieldsProfiles]? = nil, include: [Include]? = nil, fieldsCertificates: [FieldsCertificates]? = nil, fieldsDevices: [FieldsDevices]? = nil, fieldsBundleIDs: [FieldsBundleIDs]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil) {
				self.fieldsProfiles = fieldsProfiles
				self.include = include
				self.fieldsCertificates = fieldsCertificates
				self.fieldsDevices = fieldsDevices
				self.fieldsBundleIDs = fieldsBundleIDs
				self.limitCertificates = limitCertificates
				self.limitDevices = limitDevices
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsProfiles, forKey: "fields[profiles]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsCertificates, forKey: "fields[certificates]")
				encoder.encode(fieldsDevices, forKey: "fields[devices]")
				encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
				encoder.encode(limitCertificates, forKey: "limit[certificates]")
				encoder.encode(limitDevices, forKey: "limit[devices]")
				return encoder.items
			}
		}

		/// Delete a Profile
		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "profiles-delete_instance")
		}
	}
}
