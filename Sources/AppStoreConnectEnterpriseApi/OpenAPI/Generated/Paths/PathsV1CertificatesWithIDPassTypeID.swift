// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import AppStoreConnectApiCore
import URLQueryEncoder

extension EnterpriseAPIEndpoint.Certificates.WithID {
	public var passTypeID: PassTypeID {
		PassTypeID(path: path + "/passTypeId")
	}

	public struct PassTypeID {
		/// Path: `/v1/certificates/{id}/passTypeId`
		public let path: String

		/// Read the Pass Type Id Information of a Certificate
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnectEnterpriseApi.PassTypeIDResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "certificates-passTypeId-get_to_one_related")
		}

		public struct GetParameters {
			public var fieldsCertificates: [FieldsCertificates]?
			public var fieldsPassTypeIDs: [FieldsPassTypeIDs]?
			public var limitCertificates: Int?
			public var include: [Include]?

			public enum FieldsCertificates: String, Codable, CaseIterable {
				case certificateContent
				case certificateType
				case csrContent
				case displayName
				case expirationDate
				case name
				case passTypeID = "passTypeId"
				case platform
				case serialNumber
			}

			public enum FieldsPassTypeIDs: String, Codable, CaseIterable {
				case certificates
				case identifier
				case name
			}

			public enum Include: String, Codable, CaseIterable {
				case certificates
			}

			public init(fieldsCertificates: [FieldsCertificates]? = nil, fieldsPassTypeIDs: [FieldsPassTypeIDs]? = nil, limitCertificates: Int? = nil, include: [Include]? = nil) {
				self.fieldsCertificates = fieldsCertificates
				self.fieldsPassTypeIDs = fieldsPassTypeIDs
				self.limitCertificates = limitCertificates
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsCertificates, forKey: "fields[certificates]")
				encoder.encode(fieldsPassTypeIDs, forKey: "fields[passTypeIds]")
				encoder.encode(limitCertificates, forKey: "limit[certificates]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
