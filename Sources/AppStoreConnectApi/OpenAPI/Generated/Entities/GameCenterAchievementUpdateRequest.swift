// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterAchievementUpdateRequest: Codable {
	public var data: Data

	public struct Data: Codable, Identifiable {
		public var type: `Type`
		public var id: String
		public var attributes: Attributes?

		public enum `Type`: String, Codable, CaseIterable {
			case gameCenterAchievements
		}

		public struct Attributes: Codable {
			public var referenceName: String?
			public var points: Int?
			public var isShowBeforeEarned: Bool?
			public var isRepeatable: Bool?
			public var isArchived: Bool?
			public var activityProperties: [String: String]?

			public init(referenceName: String? = nil, points: Int? = nil, isShowBeforeEarned: Bool? = nil, isRepeatable: Bool? = nil, isArchived: Bool? = nil, activityProperties: [String: String]? = nil) {
				self.referenceName = referenceName
				self.points = points
				self.isShowBeforeEarned = isShowBeforeEarned
				self.isRepeatable = isRepeatable
				self.isArchived = isArchived
				self.activityProperties = activityProperties
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.referenceName = try values.decodeIfPresent(String.self, forKey: "referenceName")
				self.points = try values.decodeIfPresent(Int.self, forKey: "points")
				self.isShowBeforeEarned = try values.decodeIfPresent(Bool.self, forKey: "showBeforeEarned")
				self.isRepeatable = try values.decodeIfPresent(Bool.self, forKey: "repeatable")
				self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
				self.activityProperties = try values.decodeIfPresent([String: String].self, forKey: "activityProperties")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(referenceName, forKey: "referenceName")
				try values.encodeIfPresent(points, forKey: "points")
				try values.encodeIfPresent(isShowBeforeEarned, forKey: "showBeforeEarned")
				try values.encodeIfPresent(isRepeatable, forKey: "repeatable")
				try values.encodeIfPresent(isArchived, forKey: "archived")
				try values.encodeIfPresent(activityProperties, forKey: "activityProperties")
			}
		}

		public init(type: `Type`, id: String, attributes: Attributes? = nil) {
			self.type = type
			self.id = id
			self.attributes = attributes
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.id = try values.decode(String.self, forKey: "id")
			self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(id, forKey: "id")
			try values.encodeIfPresent(attributes, forKey: "attributes")
		}
	}

	public init(data: Data) {
		self.data = data
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
	}
}
