// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubscriptionResponse: Codable {
	/// Subscription
	public var data: Subscription
	public var included: [IncludedItem]?
	public var links: DocumentLinks

	public enum IncludedItem: Codable {
		case subscriptionLocalization(SubscriptionLocalization)
		case subscriptionAppStoreReviewScreenshot(SubscriptionAppStoreReviewScreenshot)
		case subscriptionGroup(SubscriptionGroup)
		case subscriptionIntroductoryOffer(SubscriptionIntroductoryOffer)
		case subscriptionPromotionalOffer(SubscriptionPromotionalOffer)
		case subscriptionOfferCode(SubscriptionOfferCode)
		case subscriptionPrice(SubscriptionPrice)
		case promotedPurchase(PromotedPurchase)
		case subscriptionAvailability(SubscriptionAvailability)
		case winBackOffer(WinBackOffer)
		case subscriptionImage(SubscriptionImage)

		public init(from decoder: Decoder) throws {
			let container = try decoder.singleValueContainer()
			if let value = try? container.decode(SubscriptionLocalization.self) {
				self = .subscriptionLocalization(value)
			} else if let value = try? container.decode(SubscriptionAppStoreReviewScreenshot.self) {
				self = .subscriptionAppStoreReviewScreenshot(value)
			} else if let value = try? container.decode(SubscriptionGroup.self) {
				self = .subscriptionGroup(value)
			} else if let value = try? container.decode(SubscriptionIntroductoryOffer.self) {
				self = .subscriptionIntroductoryOffer(value)
			} else if let value = try? container.decode(SubscriptionPromotionalOffer.self) {
				self = .subscriptionPromotionalOffer(value)
			} else if let value = try? container.decode(SubscriptionOfferCode.self) {
				self = .subscriptionOfferCode(value)
			} else if let value = try? container.decode(SubscriptionPrice.self) {
				self = .subscriptionPrice(value)
			} else if let value = try? container.decode(PromotedPurchase.self) {
				self = .promotedPurchase(value)
			} else if let value = try? container.decode(SubscriptionAvailability.self) {
				self = .subscriptionAvailability(value)
			} else if let value = try? container.decode(WinBackOffer.self) {
				self = .winBackOffer(value)
			} else if let value = try? container.decode(SubscriptionImage.self) {
				self = .subscriptionImage(value)
			} else {
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Data could not be decoded as any of the expected types (SubscriptionLocalization, SubscriptionAppStoreReviewScreenshot, SubscriptionGroup, SubscriptionIntroductoryOffer, SubscriptionPromotionalOffer, SubscriptionOfferCode, SubscriptionPrice, PromotedPurchase, SubscriptionAvailability, WinBackOffer, SubscriptionImage)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .subscriptionLocalization(let value): try container.encode(value)
			case .subscriptionAppStoreReviewScreenshot(let value): try container.encode(value)
			case .subscriptionGroup(let value): try container.encode(value)
			case .subscriptionIntroductoryOffer(let value): try container.encode(value)
			case .subscriptionPromotionalOffer(let value): try container.encode(value)
			case .subscriptionOfferCode(let value): try container.encode(value)
			case .subscriptionPrice(let value): try container.encode(value)
			case .promotedPurchase(let value): try container.encode(value)
			case .subscriptionAvailability(let value): try container.encode(value)
			case .winBackOffer(let value): try container.encode(value)
			case .subscriptionImage(let value): try container.encode(value)
			}
		}
	}

	public init(data: Subscription, included: [IncludedItem]? = nil, links: DocumentLinks) {
		self.data = data
		self.included = included
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Subscription.self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(DocumentLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
	}
}
