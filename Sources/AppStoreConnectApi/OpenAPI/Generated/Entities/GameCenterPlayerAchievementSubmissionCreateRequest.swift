// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterPlayerAchievementSubmissionCreateRequest: Codable {
	public var data: Data

	public struct Data: Codable {
		public var type: `Type`
		public var attributes: Attributes

		public enum `Type`: String, Codable, CaseIterable {
			case gameCenterPlayerAchievementSubmissions
		}

		public struct Attributes: Codable {
			public var bundleID: String
			public var challengeIDs: [String]?
			public var percentageAchieved: Int
			public var scopedPlayerID: String
			public var submittedDate: Date?
			public var vendorIdentifier: String

			public init(bundleID: String, challengeIDs: [String]? = nil, percentageAchieved: Int, scopedPlayerID: String, submittedDate: Date? = nil, vendorIdentifier: String) {
				self.bundleID = bundleID
				self.challengeIDs = challengeIDs
				self.percentageAchieved = percentageAchieved
				self.scopedPlayerID = scopedPlayerID
				self.submittedDate = submittedDate
				self.vendorIdentifier = vendorIdentifier
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.bundleID = try values.decode(String.self, forKey: "bundleId")
				self.challengeIDs = try values.decodeIfPresent([String].self, forKey: "challengeIds")
				self.percentageAchieved = try values.decode(Int.self, forKey: "percentageAchieved")
				self.scopedPlayerID = try values.decode(String.self, forKey: "scopedPlayerId")
				self.submittedDate = try values.decodeIfPresent(Date.self, forKey: "submittedDate")
				self.vendorIdentifier = try values.decode(String.self, forKey: "vendorIdentifier")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encode(bundleID, forKey: "bundleId")
				try values.encodeIfPresent(challengeIDs, forKey: "challengeIds")
				try values.encode(percentageAchieved, forKey: "percentageAchieved")
				try values.encode(scopedPlayerID, forKey: "scopedPlayerId")
				try values.encodeIfPresent(submittedDate, forKey: "submittedDate")
				try values.encode(vendorIdentifier, forKey: "vendorIdentifier")
			}
		}

		public init(type: `Type`, attributes: Attributes) {
			self.type = type
			self.attributes = attributes
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.attributes = try values.decode(Attributes.self, forKey: "attributes")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(attributes, forKey: "attributes")
		}
	}

	public init(data: Data) {
		self.data = data
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
	}
}
