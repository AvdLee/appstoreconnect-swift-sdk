// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterActivityResponse: Codable {
	/// GameCenterActivity
	public var data: GameCenterActivity
	public var included: [IncludedItem]?
	public var links: DocumentLinks

	public enum IncludedItem: Codable {
		case gameCenterDetail(GameCenterDetail)
		case gameCenterGroup(GameCenterGroup)
		case gameCenterAchievement(GameCenterAchievement)
		case gameCenterLeaderboard(GameCenterLeaderboard)
		case gameCenterActivityVersion(GameCenterActivityVersion)

		public init(from decoder: Decoder) throws {
			let container = try decoder.singleValueContainer()
			if let value = try? container.decode(GameCenterDetail.self) {
				self = .gameCenterDetail(value)
			} else if let value = try? container.decode(GameCenterGroup.self) {
				self = .gameCenterGroup(value)
			} else if let value = try? container.decode(GameCenterAchievement.self) {
				self = .gameCenterAchievement(value)
			} else if let value = try? container.decode(GameCenterLeaderboard.self) {
				self = .gameCenterLeaderboard(value)
			} else if let value = try? container.decode(GameCenterActivityVersion.self) {
				self = .gameCenterActivityVersion(value)
			} else {
				throw DecodingError.dataCorruptedError(
					in: container,
					debugDescription: "Data could not be decoded as any of the expected types (GameCenterDetail, GameCenterGroup, GameCenterAchievement, GameCenterLeaderboard, GameCenterActivityVersion)."
				)
			}
		}

		public func encode(to encoder: Encoder) throws {
			var container = encoder.singleValueContainer()
			switch self {
			case .gameCenterDetail(let value): try container.encode(value)
			case .gameCenterGroup(let value): try container.encode(value)
			case .gameCenterAchievement(let value): try container.encode(value)
			case .gameCenterLeaderboard(let value): try container.encode(value)
			case .gameCenterActivityVersion(let value): try container.encode(value)
			}
		}
	}

	public init(data: GameCenterActivity, included: [IncludedItem]? = nil, links: DocumentLinks) {
		self.data = data
		self.included = included
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(GameCenterActivity.self, forKey: "data")
		self.included = try values.decodeIfPresent([IncludedItem].self, forKey: "included")
		self.links = try values.decode(DocumentLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
		try values.encodeIfPresent(included, forKey: "included")
		try values.encode(links, forKey: "links")
	}
}
