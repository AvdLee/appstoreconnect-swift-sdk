// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterActivityUpdateRequest: Codable {
	public var data: Data

	public struct Data: Codable, Identifiable {
		public var type: `Type`
		public var id: String
		public var attributes: Attributes?

		public enum `Type`: String, Codable, CaseIterable {
			case gameCenterActivities
		}

		public struct Attributes: Codable {
			public var referenceName: String?
			public var playStyle: PlayStyle?
			public var minimumPlayersCount: Int?
			public var maximumPlayersCount: Int?
			public var isSupportsPartyCode: Bool?
			public var isArchived: Bool?
			public var properties: [String: String]?

			public enum PlayStyle: String, Codable, CaseIterable {
				case asynchronous = "ASYNCHRONOUS"
				case synchronous = "SYNCHRONOUS"
			}

			public init(referenceName: String? = nil, playStyle: PlayStyle? = nil, minimumPlayersCount: Int? = nil, maximumPlayersCount: Int? = nil, isSupportsPartyCode: Bool? = nil, isArchived: Bool? = nil, properties: [String: String]? = nil) {
				self.referenceName = referenceName
				self.playStyle = playStyle
				self.minimumPlayersCount = minimumPlayersCount
				self.maximumPlayersCount = maximumPlayersCount
				self.isSupportsPartyCode = isSupportsPartyCode
				self.isArchived = isArchived
				self.properties = properties
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.referenceName = try values.decodeIfPresent(String.self, forKey: "referenceName")
				self.playStyle = try values.decodeIfPresent(PlayStyle.self, forKey: "playStyle")
				self.minimumPlayersCount = try values.decodeIfPresent(Int.self, forKey: "minimumPlayersCount")
				self.maximumPlayersCount = try values.decodeIfPresent(Int.self, forKey: "maximumPlayersCount")
				self.isSupportsPartyCode = try values.decodeIfPresent(Bool.self, forKey: "supportsPartyCode")
				self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
				self.properties = try values.decodeIfPresent([String: String].self, forKey: "properties")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(referenceName, forKey: "referenceName")
				try values.encodeIfPresent(playStyle, forKey: "playStyle")
				try values.encodeIfPresent(minimumPlayersCount, forKey: "minimumPlayersCount")
				try values.encodeIfPresent(maximumPlayersCount, forKey: "maximumPlayersCount")
				try values.encodeIfPresent(isSupportsPartyCode, forKey: "supportsPartyCode")
				try values.encodeIfPresent(isArchived, forKey: "archived")
				try values.encodeIfPresent(properties, forKey: "properties")
			}
		}

		public init(type: `Type`, id: String, attributes: Attributes? = nil) {
			self.type = type
			self.id = id
			self.attributes = attributes
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.type = try values.decode(`Type`.self, forKey: "type")
			self.id = try values.decode(String.self, forKey: "id")
			self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encode(type, forKey: "type")
			try values.encode(id, forKey: "id")
			try values.encodeIfPresent(attributes, forKey: "attributes")
		}
	}

	public init(data: Data) {
		self.data = data
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.data = try values.decode(Data.self, forKey: "data")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(data, forKey: "data")
	}
}
