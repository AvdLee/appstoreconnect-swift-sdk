// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GameCenterMatchmakingRuleSetTest: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case gameCenterMatchmakingRuleSetTests
	}

	public struct Attributes: Codable {
		public var matchmakingResults: [[MatchmakingResultItem]]?

		public struct MatchmakingResultItem: Codable {
			public var requestName: String?
			public var teamAssignments: [GameCenterMatchmakingTeamAssignment]?

			public init(requestName: String? = nil, teamAssignments: [GameCenterMatchmakingTeamAssignment]? = nil) {
				self.requestName = requestName
				self.teamAssignments = teamAssignments
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.requestName = try values.decodeIfPresent(String.self, forKey: "requestName")
				self.teamAssignments = try values.decodeIfPresent([GameCenterMatchmakingTeamAssignment].self, forKey: "teamAssignments")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(requestName, forKey: "requestName")
				try values.encodeIfPresent(teamAssignments, forKey: "teamAssignments")
			}
		}

		public init(matchmakingResults: [[MatchmakingResultItem]]? = nil) {
			self.matchmakingResults = matchmakingResults
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.matchmakingResults = try values.decodeIfPresent([[MatchmakingResultItem]].self, forKey: "matchmakingResults")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(matchmakingResults, forKey: "matchmakingResults")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
