// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CapabilityOption: Codable {
	public var key: Key?
	public var name: String?
	public var description: String?
	public var isEnabledByDefault: Bool?
	public var isEnabled: Bool?
	public var isSupportsWildcard: Bool?

	public enum Key: String, Codable, CaseIterable {
		case xcode5 = "XCODE_5"
		case xcode6 = "XCODE_6"
		case completeProtection = "COMPLETE_PROTECTION"
		case protectedUnlessOpen = "PROTECTED_UNLESS_OPEN"
		case protectedUntilFirstUserAuth = "PROTECTED_UNTIL_FIRST_USER_AUTH"
		case primaryAppConsent = "PRIMARY_APP_CONSENT"
	}

	public init(key: Key? = nil, name: String? = nil, description: String? = nil, isEnabledByDefault: Bool? = nil, isEnabled: Bool? = nil, isSupportsWildcard: Bool? = nil) {
		self.key = key
		self.name = name
		self.description = description
		self.isEnabledByDefault = isEnabledByDefault
		self.isEnabled = isEnabled
		self.isSupportsWildcard = isSupportsWildcard
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.key = try values.decodeIfPresent(Key.self, forKey: "key")
		self.name = try values.decodeIfPresent(String.self, forKey: "name")
		self.description = try values.decodeIfPresent(String.self, forKey: "description")
		self.isEnabledByDefault = try values.decodeIfPresent(Bool.self, forKey: "enabledByDefault")
		self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
		self.isSupportsWildcard = try values.decodeIfPresent(Bool.self, forKey: "supportsWildcard")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encodeIfPresent(key, forKey: "key")
		try values.encodeIfPresent(name, forKey: "name")
		try values.encodeIfPresent(description, forKey: "description")
		try values.encodeIfPresent(isEnabledByDefault, forKey: "enabledByDefault")
		try values.encodeIfPresent(isEnabled, forKey: "enabled")
		try values.encodeIfPresent(isSupportsWildcard, forKey: "supportsWildcard")
	}
}
