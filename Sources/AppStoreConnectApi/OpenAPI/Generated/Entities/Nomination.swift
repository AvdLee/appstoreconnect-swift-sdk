// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Nomination: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var relationships: Relationships?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case nominations
	}

	public struct Attributes: Codable {
		public var name: String?
		public var type: `Type`?
		public var description: String?
		public var createdDate: Date?
		public var lastModifiedDate: Date?
		public var submittedDate: Date?
		public var state: State?
		public var publishStartDate: Date?
		public var publishEndDate: Date?
		public var deviceFamilies: [DeviceFamily]?
		public var locales: [String]?
		public var supplementalMaterialsUris: [URL]?
		public var hasInAppEvents: Bool?
		public var isLaunchInSelectMarketsFirst: Bool?
		public var notes: String?
		public var isPreOrderEnabled: Bool?

		public enum `Type`: String, Codable, CaseIterable {
			case appLaunch = "APP_LAUNCH"
			case appEnhancements = "APP_ENHANCEMENTS"
			case newContent = "NEW_CONTENT"
		}

		public enum State: String, Codable, CaseIterable {
			case draft = "DRAFT"
			case submitted = "SUBMITTED"
			case archived = "ARCHIVED"
		}

		public init(name: String? = nil, type: `Type`? = nil, description: String? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil, submittedDate: Date? = nil, state: State? = nil, publishStartDate: Date? = nil, publishEndDate: Date? = nil, deviceFamilies: [DeviceFamily]? = nil, locales: [String]? = nil, supplementalMaterialsUris: [URL]? = nil, hasInAppEvents: Bool? = nil, isLaunchInSelectMarketsFirst: Bool? = nil, notes: String? = nil, isPreOrderEnabled: Bool? = nil) {
			self.name = name
			self.type = type
			self.description = description
			self.createdDate = createdDate
			self.lastModifiedDate = lastModifiedDate
			self.submittedDate = submittedDate
			self.state = state
			self.publishStartDate = publishStartDate
			self.publishEndDate = publishEndDate
			self.deviceFamilies = deviceFamilies
			self.locales = locales
			self.supplementalMaterialsUris = supplementalMaterialsUris
			self.hasInAppEvents = hasInAppEvents
			self.isLaunchInSelectMarketsFirst = isLaunchInSelectMarketsFirst
			self.notes = notes
			self.isPreOrderEnabled = isPreOrderEnabled
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.name = try values.decodeIfPresent(String.self, forKey: "name")
			self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
			self.description = try values.decodeIfPresent(String.self, forKey: "description")
			self.createdDate = try values.decodeIfPresent(Date.self, forKey: "createdDate")
			self.lastModifiedDate = try values.decodeIfPresent(Date.self, forKey: "lastModifiedDate")
			self.submittedDate = try values.decodeIfPresent(Date.self, forKey: "submittedDate")
			self.state = try values.decodeIfPresent(State.self, forKey: "state")
			self.publishStartDate = try values.decodeIfPresent(Date.self, forKey: "publishStartDate")
			self.publishEndDate = try values.decodeIfPresent(Date.self, forKey: "publishEndDate")
			self.deviceFamilies = try values.decodeIfPresent([DeviceFamily].self, forKey: "deviceFamilies")
			self.locales = try values.decodeIfPresent([String].self, forKey: "locales")
			self.supplementalMaterialsUris = try values.decodeIfPresent([URL].self, forKey: "supplementalMaterialsUris")
			self.hasInAppEvents = try values.decodeIfPresent(Bool.self, forKey: "hasInAppEvents")
			self.isLaunchInSelectMarketsFirst = try values.decodeIfPresent(Bool.self, forKey: "launchInSelectMarketsFirst")
			self.notes = try values.decodeIfPresent(String.self, forKey: "notes")
			self.isPreOrderEnabled = try values.decodeIfPresent(Bool.self, forKey: "preOrderEnabled")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(name, forKey: "name")
			try values.encodeIfPresent(type, forKey: "type")
			try values.encodeIfPresent(description, forKey: "description")
			try values.encodeIfPresent(createdDate, forKey: "createdDate")
			try values.encodeIfPresent(lastModifiedDate, forKey: "lastModifiedDate")
			try values.encodeIfPresent(submittedDate, forKey: "submittedDate")
			try values.encodeIfPresent(state, forKey: "state")
			try values.encodeIfPresent(publishStartDate, forKey: "publishStartDate")
			try values.encodeIfPresent(publishEndDate, forKey: "publishEndDate")
			try values.encodeIfPresent(deviceFamilies, forKey: "deviceFamilies")
			try values.encodeIfPresent(locales, forKey: "locales")
			try values.encodeIfPresent(supplementalMaterialsUris, forKey: "supplementalMaterialsUris")
			try values.encodeIfPresent(hasInAppEvents, forKey: "hasInAppEvents")
			try values.encodeIfPresent(isLaunchInSelectMarketsFirst, forKey: "launchInSelectMarketsFirst")
			try values.encodeIfPresent(notes, forKey: "notes")
			try values.encodeIfPresent(isPreOrderEnabled, forKey: "preOrderEnabled")
		}
	}

	public struct Relationships: Codable {
		public var relatedApps: RelatedApps?
		public var createdByActor: CreatedByActor?
		public var lastModifiedByActor: LastModifiedByActor?
		public var submittedByActor: SubmittedByActor?
		public var inAppEvents: InAppEvents?
		public var supportedTerritories: SupportedTerritories?

		public struct RelatedApps: Codable {
			public var meta: PagingInformation?
			public var data: [Datum]?

			public struct Datum: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case apps
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
				self.meta = meta
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
				self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(meta, forKey: "meta")
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct CreatedByActor: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case actors
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct LastModifiedByActor: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case actors
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct SubmittedByActor: Codable {
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case actors
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(data: Data? = nil) {
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct InAppEvents: Codable {
			public var meta: PagingInformation?
			public var data: [Datum]?

			public struct Datum: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case appEvents
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
				self.meta = meta
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
				self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(meta, forKey: "meta")
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public struct SupportedTerritories: Codable {
			public var meta: PagingInformation?
			public var data: [Datum]?

			public struct Datum: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case territories
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(meta: PagingInformation? = nil, data: [Datum]? = nil) {
				self.meta = meta
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.meta = try values.decodeIfPresent(PagingInformation.self, forKey: "meta")
				self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(meta, forKey: "meta")
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public init(relatedApps: RelatedApps? = nil, createdByActor: CreatedByActor? = nil, lastModifiedByActor: LastModifiedByActor? = nil, submittedByActor: SubmittedByActor? = nil, inAppEvents: InAppEvents? = nil, supportedTerritories: SupportedTerritories? = nil) {
			self.relatedApps = relatedApps
			self.createdByActor = createdByActor
			self.lastModifiedByActor = lastModifiedByActor
			self.submittedByActor = submittedByActor
			self.inAppEvents = inAppEvents
			self.supportedTerritories = supportedTerritories
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.relatedApps = try values.decodeIfPresent(RelatedApps.self, forKey: "relatedApps")
			self.createdByActor = try values.decodeIfPresent(CreatedByActor.self, forKey: "createdByActor")
			self.lastModifiedByActor = try values.decodeIfPresent(LastModifiedByActor.self, forKey: "lastModifiedByActor")
			self.submittedByActor = try values.decodeIfPresent(SubmittedByActor.self, forKey: "submittedByActor")
			self.inAppEvents = try values.decodeIfPresent(InAppEvents.self, forKey: "inAppEvents")
			self.supportedTerritories = try values.decodeIfPresent(SupportedTerritories.self, forKey: "supportedTerritories")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(relatedApps, forKey: "relatedApps")
			try values.encodeIfPresent(createdByActor, forKey: "createdByActor")
			try values.encodeIfPresent(lastModifiedByActor, forKey: "lastModifiedByActor")
			try values.encodeIfPresent(submittedByActor, forKey: "submittedByActor")
			try values.encodeIfPresent(inAppEvents, forKey: "inAppEvents")
			try values.encodeIfPresent(supportedTerritories, forKey: "supportedTerritories")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.relationships = relationships
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(relationships, forKey: "relationships")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
