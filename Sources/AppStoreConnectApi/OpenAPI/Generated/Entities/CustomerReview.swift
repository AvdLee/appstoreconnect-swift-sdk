// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CustomerReview: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var relationships: Relationships?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case customerReviews
	}

	public struct Attributes: Codable {
		public var rating: Int?
		public var title: String?
		public var body: String?
		public var reviewerNickname: String?
		public var createdDate: Date?
		public var territory: TerritoryCode?

		public init(rating: Int? = nil, title: String? = nil, body: String? = nil, reviewerNickname: String? = nil, createdDate: Date? = nil, territory: TerritoryCode? = nil) {
			self.rating = rating
			self.title = title
			self.body = body
			self.reviewerNickname = reviewerNickname
			self.createdDate = createdDate
			self.territory = territory
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.rating = try values.decodeIfPresent(Int.self, forKey: "rating")
			self.title = try values.decodeIfPresent(String.self, forKey: "title")
			self.body = try values.decodeIfPresent(String.self, forKey: "body")
			self.reviewerNickname = try values.decodeIfPresent(String.self, forKey: "reviewerNickname")
			self.createdDate = try values.decodeIfPresent(Date.self, forKey: "createdDate")
			self.territory = try values.decodeIfPresent(TerritoryCode.self, forKey: "territory")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(rating, forKey: "rating")
			try values.encodeIfPresent(title, forKey: "title")
			try values.encodeIfPresent(body, forKey: "body")
			try values.encodeIfPresent(reviewerNickname, forKey: "reviewerNickname")
			try values.encodeIfPresent(createdDate, forKey: "createdDate")
			try values.encodeIfPresent(territory, forKey: "territory")
		}
	}

	public struct Relationships: Codable {
		public var response: Response?

		public struct Response: Codable {
			public var links: RelationshipLinks?
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case customerReviewResponses
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(links: RelationshipLinks? = nil, data: Data? = nil) {
				self.links = links
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.links = try values.decodeIfPresent(RelationshipLinks.self, forKey: "links")
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(links, forKey: "links")
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public init(response: Response? = nil) {
			self.response = response
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.response = try values.decodeIfPresent(Response.self, forKey: "response")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(response, forKey: "response")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.relationships = relationships
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(relationships, forKey: "relationships")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
