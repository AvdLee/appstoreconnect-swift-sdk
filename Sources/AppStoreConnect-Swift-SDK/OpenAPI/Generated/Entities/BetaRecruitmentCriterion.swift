// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BetaRecruitmentCriterion: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case betaRecruitmentCriteria
	}

	public struct Attributes: Codable {
		public var lastModifiedDate: Date?
		public var deviceFamilyOsVersionFilters: [DeviceFamilyOsVersionFilter]?

		public init(lastModifiedDate: Date? = nil, deviceFamilyOsVersionFilters: [DeviceFamilyOsVersionFilter]? = nil) {
			self.lastModifiedDate = lastModifiedDate
			self.deviceFamilyOsVersionFilters = deviceFamilyOsVersionFilters
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.lastModifiedDate = try values.decodeIfPresent(Date.self, forKey: "lastModifiedDate")
			self.deviceFamilyOsVersionFilters = try values.decodeIfPresent([DeviceFamilyOsVersionFilter].self, forKey: "deviceFamilyOsVersionFilters")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(lastModifiedDate, forKey: "lastModifiedDate")
			try values.encodeIfPresent(deviceFamilyOsVersionFilters, forKey: "deviceFamilyOsVersionFilters")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
