// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AppClipDomainStatus: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case appClipDomainStatuses
	}

	public struct Attributes: Codable {
		public var domains: [Domain]?
		public var lastUpdatedDate: Date?

		public struct Domain: Codable {
			public var domain: String?
			public var isValid: Bool?
			public var lastUpdatedDate: Date?
			public var errorCode: ErrorCode?

			public enum ErrorCode: String, Codable, CaseIterable {
				case badHTTPResponse = "BAD_HTTP_RESPONSE"
				case badJSONContent = "BAD_JSON_CONTENT"
				case badPkcs7Signature = "BAD_PKCS7_SIGNATURE"
				case cannotReachAasaFile = "CANNOT_REACH_AASA_FILE"
				case crossSiteRedirectsForbidden = "CROSS_SITE_REDIRECTS_FORBIDDEN"
				case dnsError = "DNS_ERROR"
				case insecureRedirectsForbidden = "INSECURE_REDIRECTS_FORBIDDEN"
				case invalidEntitlementMissingSection = "INVALID_ENTITLEMENT_MISSING_SECTION"
				case invalidEntitlementSyntaxError = "INVALID_ENTITLEMENT_SYNTAX_ERROR"
				case invalidEntitlementUnhandledSection = "INVALID_ENTITLEMENT_UNHANDLED_SECTION"
				case invalidEntitlementUnknownID = "INVALID_ENTITLEMENT_UNKNOWN_ID"
				case networkError = "NETWORK_ERROR"
				case networkErrorTemporary = "NETWORK_ERROR_TEMPORARY"
				case otherError = "OTHER_ERROR"
				case timeout = "TIMEOUT"
				case tlsError = "TLS_ERROR"
				case tooManyRedirects = "TOO_MANY_REDIRECTS"
				case unexpectedError = "UNEXPECTED_ERROR"
			}

			public init(domain: String? = nil, isValid: Bool? = nil, lastUpdatedDate: Date? = nil, errorCode: ErrorCode? = nil) {
				self.domain = domain
				self.isValid = isValid
				self.lastUpdatedDate = lastUpdatedDate
				self.errorCode = errorCode
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.domain = try values.decodeIfPresent(String.self, forKey: "domain")
				self.isValid = try values.decodeIfPresent(Bool.self, forKey: "isValid")
				self.lastUpdatedDate = try values.decodeIfPresent(Date.self, forKey: "lastUpdatedDate")
				self.errorCode = try values.decodeIfPresent(ErrorCode.self, forKey: "errorCode")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(domain, forKey: "domain")
				try values.encodeIfPresent(isValid, forKey: "isValid")
				try values.encodeIfPresent(lastUpdatedDate, forKey: "lastUpdatedDate")
				try values.encodeIfPresent(errorCode, forKey: "errorCode")
			}
		}

		public init(domains: [Domain]? = nil, lastUpdatedDate: Date? = nil) {
			self.domains = domains
			self.lastUpdatedDate = lastUpdatedDate
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.domains = try values.decodeIfPresent([Domain].self, forKey: "domains")
			self.lastUpdatedDate = try values.decodeIfPresent(Date.self, forKey: "lastUpdatedDate")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(domains, forKey: "domains")
			try values.encodeIfPresent(lastUpdatedDate, forKey: "lastUpdatedDate")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
