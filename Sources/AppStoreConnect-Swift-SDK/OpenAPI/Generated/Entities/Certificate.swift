// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Certificate: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var relationships: Relationships?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case certificates
	}

	public struct Attributes: Codable {
		public var name: String?
		public var certificateType: CertificateType?
		public var displayName: String?
		public var serialNumber: String?
		public var platform: BundleIDPlatform?
		public var expirationDate: Date?
		public var certificateContent: String?
		public var isActivated: Bool?

		public init(name: String? = nil, certificateType: CertificateType? = nil, displayName: String? = nil, serialNumber: String? = nil, platform: BundleIDPlatform? = nil, expirationDate: Date? = nil, certificateContent: String? = nil, isActivated: Bool? = nil) {
			self.name = name
			self.certificateType = certificateType
			self.displayName = displayName
			self.serialNumber = serialNumber
			self.platform = platform
			self.expirationDate = expirationDate
			self.certificateContent = certificateContent
			self.isActivated = isActivated
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.name = try values.decodeIfPresent(String.self, forKey: "name")
			self.certificateType = try values.decodeIfPresent(CertificateType.self, forKey: "certificateType")
			self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
			self.serialNumber = try values.decodeIfPresent(String.self, forKey: "serialNumber")
			self.platform = try values.decodeIfPresent(BundleIDPlatform.self, forKey: "platform")
			self.expirationDate = try values.decodeIfPresent(Date.self, forKey: "expirationDate")
			self.certificateContent = try values.decodeIfPresent(String.self, forKey: "certificateContent")
			self.isActivated = try values.decodeIfPresent(Bool.self, forKey: "activated")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(name, forKey: "name")
			try values.encodeIfPresent(certificateType, forKey: "certificateType")
			try values.encodeIfPresent(displayName, forKey: "displayName")
			try values.encodeIfPresent(serialNumber, forKey: "serialNumber")
			try values.encodeIfPresent(platform, forKey: "platform")
			try values.encodeIfPresent(expirationDate, forKey: "expirationDate")
			try values.encodeIfPresent(certificateContent, forKey: "certificateContent")
			try values.encodeIfPresent(isActivated, forKey: "activated")
		}
	}

	public struct Relationships: Codable {
		public var passTypeID: PassTypeID?

		public struct PassTypeID: Codable {
			public var links: RelationshipLinks?
			public var data: Data?

			public struct Data: Codable, Identifiable {
				public var type: `Type`
				public var id: String

				public enum `Type`: String, Codable, CaseIterable {
					case passTypeIDs = "passTypeIds"
				}

				public init(type: `Type`, id: String) {
					self.type = type
					self.id = id
				}

				public init(from decoder: Decoder) throws {
					let values = try decoder.container(keyedBy: StringCodingKey.self)
					self.type = try values.decode(`Type`.self, forKey: "type")
					self.id = try values.decode(String.self, forKey: "id")
				}

				public func encode(to encoder: Encoder) throws {
					var values = encoder.container(keyedBy: StringCodingKey.self)
					try values.encode(type, forKey: "type")
					try values.encode(id, forKey: "id")
				}
			}

			public init(links: RelationshipLinks? = nil, data: Data? = nil) {
				self.links = links
				self.data = data
			}

			public init(from decoder: Decoder) throws {
				let values = try decoder.container(keyedBy: StringCodingKey.self)
				self.links = try values.decodeIfPresent(RelationshipLinks.self, forKey: "links")
				self.data = try values.decodeIfPresent(Data.self, forKey: "data")
			}

			public func encode(to encoder: Encoder) throws {
				var values = encoder.container(keyedBy: StringCodingKey.self)
				try values.encodeIfPresent(links, forKey: "links")
				try values.encodeIfPresent(data, forKey: "data")
			}
		}

		public init(passTypeID: PassTypeID? = nil) {
			self.passTypeID = passTypeID
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.passTypeID = try values.decodeIfPresent(PassTypeID.self, forKey: "passTypeId")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(passTypeID, forKey: "passTypeId")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.relationships = relationships
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.relationships = try values.decodeIfPresent(Relationships.self, forKey: "relationships")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(relationships, forKey: "relationships")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
