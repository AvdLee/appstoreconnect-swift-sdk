// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AccessibilityDeclaration: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks?

	public enum `Type`: String, Codable, CaseIterable {
		case accessibilityDeclarations
	}

	public struct Attributes: Codable {
		public var deviceFamily: DeviceFamily?
		public var state: State?
		public var isSupportsAudioDescriptions: Bool?
		public var isSupportsCaptions: Bool?
		public var isSupportsDarkInterface: Bool?
		public var isSupportsDifferentiateWithoutColorAlone: Bool?
		public var isSupportsLargerText: Bool?
		public var isSupportsReducedMotion: Bool?
		public var isSupportsSufficientContrast: Bool?
		public var isSupportsVoiceControl: Bool?
		public var isSupportsVoiceover: Bool?

		public enum State: String, Codable, CaseIterable {
			case draft = "DRAFT"
			case published = "PUBLISHED"
			case replaced = "REPLACED"
		}

		public init(deviceFamily: DeviceFamily? = nil, state: State? = nil, isSupportsAudioDescriptions: Bool? = nil, isSupportsCaptions: Bool? = nil, isSupportsDarkInterface: Bool? = nil, isSupportsDifferentiateWithoutColorAlone: Bool? = nil, isSupportsLargerText: Bool? = nil, isSupportsReducedMotion: Bool? = nil, isSupportsSufficientContrast: Bool? = nil, isSupportsVoiceControl: Bool? = nil, isSupportsVoiceover: Bool? = nil) {
			self.deviceFamily = deviceFamily
			self.state = state
			self.isSupportsAudioDescriptions = isSupportsAudioDescriptions
			self.isSupportsCaptions = isSupportsCaptions
			self.isSupportsDarkInterface = isSupportsDarkInterface
			self.isSupportsDifferentiateWithoutColorAlone = isSupportsDifferentiateWithoutColorAlone
			self.isSupportsLargerText = isSupportsLargerText
			self.isSupportsReducedMotion = isSupportsReducedMotion
			self.isSupportsSufficientContrast = isSupportsSufficientContrast
			self.isSupportsVoiceControl = isSupportsVoiceControl
			self.isSupportsVoiceover = isSupportsVoiceover
		}

		public init(from decoder: Decoder) throws {
			let values = try decoder.container(keyedBy: StringCodingKey.self)
			self.deviceFamily = try values.decodeIfPresent(DeviceFamily.self, forKey: "deviceFamily")
			self.state = try values.decodeIfPresent(State.self, forKey: "state")
			self.isSupportsAudioDescriptions = try values.decodeIfPresent(Bool.self, forKey: "supportsAudioDescriptions")
			self.isSupportsCaptions = try values.decodeIfPresent(Bool.self, forKey: "supportsCaptions")
			self.isSupportsDarkInterface = try values.decodeIfPresent(Bool.self, forKey: "supportsDarkInterface")
			self.isSupportsDifferentiateWithoutColorAlone = try values.decodeIfPresent(Bool.self, forKey: "supportsDifferentiateWithoutColorAlone")
			self.isSupportsLargerText = try values.decodeIfPresent(Bool.self, forKey: "supportsLargerText")
			self.isSupportsReducedMotion = try values.decodeIfPresent(Bool.self, forKey: "supportsReducedMotion")
			self.isSupportsSufficientContrast = try values.decodeIfPresent(Bool.self, forKey: "supportsSufficientContrast")
			self.isSupportsVoiceControl = try values.decodeIfPresent(Bool.self, forKey: "supportsVoiceControl")
			self.isSupportsVoiceover = try values.decodeIfPresent(Bool.self, forKey: "supportsVoiceover")
		}

		public func encode(to encoder: Encoder) throws {
			var values = encoder.container(keyedBy: StringCodingKey.self)
			try values.encodeIfPresent(deviceFamily, forKey: "deviceFamily")
			try values.encodeIfPresent(state, forKey: "state")
			try values.encodeIfPresent(isSupportsAudioDescriptions, forKey: "supportsAudioDescriptions")
			try values.encodeIfPresent(isSupportsCaptions, forKey: "supportsCaptions")
			try values.encodeIfPresent(isSupportsDarkInterface, forKey: "supportsDarkInterface")
			try values.encodeIfPresent(isSupportsDifferentiateWithoutColorAlone, forKey: "supportsDifferentiateWithoutColorAlone")
			try values.encodeIfPresent(isSupportsLargerText, forKey: "supportsLargerText")
			try values.encodeIfPresent(isSupportsReducedMotion, forKey: "supportsReducedMotion")
			try values.encodeIfPresent(isSupportsSufficientContrast, forKey: "supportsSufficientContrast")
			try values.encodeIfPresent(isSupportsVoiceControl, forKey: "supportsVoiceControl")
			try values.encodeIfPresent(isSupportsVoiceover, forKey: "supportsVoiceover")
		}
	}

	public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks? = nil) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}

	public init(from decoder: Decoder) throws {
		let values = try decoder.container(keyedBy: StringCodingKey.self)
		self.type = try values.decode(`Type`.self, forKey: "type")
		self.id = try values.decode(String.self, forKey: "id")
		self.attributes = try values.decodeIfPresent(Attributes.self, forKey: "attributes")
		self.links = try values.decodeIfPresent(ResourceLinks.self, forKey: "links")
	}

	public func encode(to encoder: Encoder) throws {
		var values = encoder.container(keyedBy: StringCodingKey.self)
		try values.encode(type, forKey: "type")
		try values.encode(id, forKey: "id")
		try values.encodeIfPresent(attributes, forKey: "attributes")
		try values.encodeIfPresent(links, forKey: "links")
	}
}
