// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var backgroundAssets: BackgroundAssets {
		BackgroundAssets(path: path + "/backgroundAssets")
	}

	public struct BackgroundAssets {
		/// Path: `/v1/apps/{id}/backgroundAssets`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.BackgroundAssetsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_backgroundAssets_getToManyRelated")
		}

		public struct GetParameters {
			public var filterAssetPackIdentifier: [String]?
			public var fieldsBackgroundAssets: [FieldsBackgroundAssets]?
			public var fieldsBackgroundAssetVersions: [FieldsBackgroundAssetVersions]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsBackgroundAssets: String, Codable, CaseIterable {
				case assetPackIdentifier
				case createdDate
				case versions
				case internalBetaVersion
			}

			public enum FieldsBackgroundAssetVersions: String, Codable, CaseIterable {
				case createdDate
				case platforms
				case state
				case version
				case internalBetaRelease
				case assetFile
				case manifestFile
				case backgroundAssetUploadFiles
			}

			public enum Include: String, Codable, CaseIterable {
				case internalBetaVersion
			}

			public init(filterAssetPackIdentifier: [String]? = nil, fieldsBackgroundAssets: [FieldsBackgroundAssets]? = nil, fieldsBackgroundAssetVersions: [FieldsBackgroundAssetVersions]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterAssetPackIdentifier = filterAssetPackIdentifier
				self.fieldsBackgroundAssets = fieldsBackgroundAssets
				self.fieldsBackgroundAssetVersions = fieldsBackgroundAssetVersions
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterAssetPackIdentifier, forKey: "filter[assetPackIdentifier]")
				encoder.encode(fieldsBackgroundAssets, forKey: "fields[backgroundAssets]")
				encoder.encode(fieldsBackgroundAssetVersions, forKey: "fields[backgroundAssetVersions]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
