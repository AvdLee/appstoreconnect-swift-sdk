// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var betaFeedbackScreenshotSubmissions: BetaFeedbackScreenshotSubmissions {
		BetaFeedbackScreenshotSubmissions(path: path + "/betaFeedbackScreenshotSubmissions")
	}

	public struct BetaFeedbackScreenshotSubmissions {
		/// Path: `/v1/apps/{id}/betaFeedbackScreenshotSubmissions`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.BetaFeedbackScreenshotSubmissionsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_betaFeedbackScreenshotSubmissions_getToManyRelated")
		}

		public struct GetParameters {
			public var filterDeviceModel: [String]?
			public var filterOsVersion: [String]?
			public var filterAppPlatform: [FilterAppPlatform]?
			public var filterDevicePlatform: [FilterDevicePlatform]?
			public var filterBuild: [String]?
			public var filterBuildPreReleaseVersion: [String]?
			public var filterTester: [String]?
			public var sort: [Sort]?
			public var fieldsBetaFeedbackScreenshotSubmissions: [FieldsBetaFeedbackScreenshotSubmissions]?
			public var fieldsBuilds: [FieldsBuilds]?
			public var fieldsBetaTesters: [FieldsBetaTesters]?
			public var limit: Int?
			public var include: [Include]?

			public enum FilterAppPlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum FilterDevicePlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum Sort: String, Codable, CaseIterable {
				case createdDate
				case minuscreatedDate = "-createdDate"
			}

			public enum FieldsBetaFeedbackScreenshotSubmissions: String, Codable, CaseIterable {
				case createdDate
				case comment
				case email
				case deviceModel
				case osVersion
				case locale
				case timeZone
				case architecture
				case connectionType
				case pairedAppleWatch
				case appUptimeInMilliseconds
				case diskBytesAvailable
				case diskBytesTotal
				case batteryPercentage
				case screenWidthInPoints
				case screenHeightInPoints
				case appPlatform
				case devicePlatform
				case deviceFamily
				case buildBundleID = "buildBundleId"
				case screenshots
				case build
				case tester
			}

			public enum FieldsBuilds: String, Codable, CaseIterable {
				case version
				case uploadedDate
				case expirationDate
				case expired
				case minOsVersion
				case lsMinimumSystemVersion
				case computedMinMacOsVersion
				case computedMinVisionOsVersion
				case iconAssetToken
				case processingState
				case buildAudienceType
				case usesNonExemptEncryption
				case preReleaseVersion
				case individualTesters
				case betaGroups
				case betaBuildLocalizations
				case appEncryptionDeclaration
				case betaAppReviewSubmission
				case app
				case buildBetaDetail
				case appStoreVersion
				case icons
				case buildBundles
				case perfPowerMetrics
				case diagnosticSignatures
			}

			public enum FieldsBetaTesters: String, Codable, CaseIterable {
				case firstName
				case lastName
				case email
				case inviteType
				case state
				case apps
				case betaGroups
				case builds
			}

			public enum Include: String, Codable, CaseIterable {
				case build
				case tester
			}

			public init(filterDeviceModel: [String]? = nil, filterOsVersion: [String]? = nil, filterAppPlatform: [FilterAppPlatform]? = nil, filterDevicePlatform: [FilterDevicePlatform]? = nil, filterBuild: [String]? = nil, filterBuildPreReleaseVersion: [String]? = nil, filterTester: [String]? = nil, sort: [Sort]? = nil, fieldsBetaFeedbackScreenshotSubmissions: [FieldsBetaFeedbackScreenshotSubmissions]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsBetaTesters: [FieldsBetaTesters]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterDeviceModel = filterDeviceModel
				self.filterOsVersion = filterOsVersion
				self.filterAppPlatform = filterAppPlatform
				self.filterDevicePlatform = filterDevicePlatform
				self.filterBuild = filterBuild
				self.filterBuildPreReleaseVersion = filterBuildPreReleaseVersion
				self.filterTester = filterTester
				self.sort = sort
				self.fieldsBetaFeedbackScreenshotSubmissions = fieldsBetaFeedbackScreenshotSubmissions
				self.fieldsBuilds = fieldsBuilds
				self.fieldsBetaTesters = fieldsBetaTesters
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterDeviceModel, forKey: "filter[deviceModel]")
				encoder.encode(filterOsVersion, forKey: "filter[osVersion]")
				encoder.encode(filterAppPlatform, forKey: "filter[appPlatform]")
				encoder.encode(filterDevicePlatform, forKey: "filter[devicePlatform]")
				encoder.encode(filterBuild, forKey: "filter[build]")
				encoder.encode(filterBuildPreReleaseVersion, forKey: "filter[build.preReleaseVersion]")
				encoder.encode(filterTester, forKey: "filter[tester]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsBetaFeedbackScreenshotSubmissions, forKey: "fields[betaFeedbackScreenshotSubmissions]")
				encoder.encode(fieldsBuilds, forKey: "fields[builds]")
				encoder.encode(fieldsBetaTesters, forKey: "fields[betaTesters]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
