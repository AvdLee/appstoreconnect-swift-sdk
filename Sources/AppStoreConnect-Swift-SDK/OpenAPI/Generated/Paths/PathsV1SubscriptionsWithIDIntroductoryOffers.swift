// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Subscriptions.WithID {
	public var introductoryOffers: IntroductoryOffers {
		IntroductoryOffers(path: path + "/introductoryOffers")
	}

	public struct IntroductoryOffers {
		/// Path: `/v1/subscriptions/{id}/introductoryOffers`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.SubscriptionIntroductoryOffersResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "subscriptions_introductoryOffers_getToManyRelated")
		}

		public struct GetParameters {
			public var filterTerritory: [String]?
			public var fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers]?
			public var fieldsSubscriptions: [FieldsSubscriptions]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsSubscriptionIntroductoryOffers: String, Codable, CaseIterable {
				case startDate
				case endDate
				case duration
				case offerMode
				case numberOfPeriods
				case subscription
				case territory
				case subscriptionPricePoint
			}

			public enum FieldsSubscriptions: String, Codable, CaseIterable {
				case name
				case productID = "productId"
				case familySharable
				case state
				case subscriptionPeriod
				case reviewNote
				case groupLevel
				case subscriptionLocalizations
				case appStoreReviewScreenshot
				case group
				case introductoryOffers
				case promotionalOffers
				case offerCodes
				case prices
				case pricePoints
				case promotedPurchase
				case subscriptionAvailability
				case winBackOffers
				case images
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public enum FieldsSubscriptionPricePoints: String, Codable, CaseIterable {
				case customerPrice
				case proceeds
				case proceedsYear2
				case territory
				case equalizations
			}

			public enum Include: String, Codable, CaseIterable {
				case subscription
				case territory
				case subscriptionPricePoint
			}

			public init(filterTerritory: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers]? = nil, fieldsSubscriptions: [FieldsSubscriptions]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterTerritory = filterTerritory
				self.fieldsSubscriptionIntroductoryOffers = fieldsSubscriptionIntroductoryOffers
				self.fieldsSubscriptions = fieldsSubscriptions
				self.fieldsTerritories = fieldsTerritories
				self.fieldsSubscriptionPricePoints = fieldsSubscriptionPricePoints
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterTerritory, forKey: "filter[territory]")
				encoder.encode(fieldsSubscriptionIntroductoryOffers, forKey: "fields[subscriptionIntroductoryOffers]")
				encoder.encode(fieldsSubscriptions, forKey: "fields[subscriptions]")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(fieldsSubscriptionPricePoints, forKey: "fields[subscriptionPricePoints]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
