// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.ScmRepositories.WithID {
	public var gitReferences: GitReferences {
		GitReferences(path: path + "/gitReferences")
	}

	public struct GitReferences {
		/// Path: `/v1/scmRepositories/{id}/gitReferences`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.ScmGitReferencesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "scmRepositories_gitReferences_getToManyRelated")
		}

		public struct GetParameters {
			public var fieldsScmGitReferences: [FieldsScmGitReferences]?
			public var fieldsScmRepositories: [FieldsScmRepositories]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsScmGitReferences: String, Codable, CaseIterable {
				case name
				case canonicalName
				case isDeleted
				case kind
				case repository
			}

			public enum FieldsScmRepositories: String, Codable, CaseIterable {
				case lastAccessedDate
				case httpCloneURL = "httpCloneUrl"
				case sshCloneURL = "sshCloneUrl"
				case ownerName
				case repositoryName
				case scmProvider
				case defaultBranch
				case gitReferences
				case pullRequests
			}

			public enum Include: String, Codable, CaseIterable {
				case repository
			}

			public init(fieldsScmGitReferences: [FieldsScmGitReferences]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.fieldsScmGitReferences = fieldsScmGitReferences
				self.fieldsScmRepositories = fieldsScmRepositories
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsScmGitReferences, forKey: "fields[scmGitReferences]")
				encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
