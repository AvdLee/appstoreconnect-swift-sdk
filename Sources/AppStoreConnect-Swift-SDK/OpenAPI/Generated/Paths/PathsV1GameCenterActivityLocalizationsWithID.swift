// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterActivityLocalizations {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterActivityLocalizations/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterActivityLocalizationResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterActivityLocalizations_getInstance")
		}

		public struct GetParameters {
			public var fieldsGameCenterActivityLocalizations: [FieldsGameCenterActivityLocalizations]?
			public var fieldsGameCenterActivityImages: [FieldsGameCenterActivityImages]?
			public var include: [Include]?

			public enum FieldsGameCenterActivityLocalizations: String, Codable, CaseIterable {
				case locale
				case name
				case description
				case version
				case image
			}

			public enum FieldsGameCenterActivityImages: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case imageAsset
				case uploadOperations
				case assetDeliveryState
			}

			public enum Include: String, Codable, CaseIterable {
				case version
				case image
			}

			public init(fieldsGameCenterActivityLocalizations: [FieldsGameCenterActivityLocalizations]? = nil, fieldsGameCenterActivityImages: [FieldsGameCenterActivityImages]? = nil, include: [Include]? = nil) {
				self.fieldsGameCenterActivityLocalizations = fieldsGameCenterActivityLocalizations
				self.fieldsGameCenterActivityImages = fieldsGameCenterActivityImages
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterActivityLocalizations, forKey: "fields[gameCenterActivityLocalizations]")
				encoder.encode(fieldsGameCenterActivityImages, forKey: "fields[gameCenterActivityImages]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterActivityLocalizationUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterActivityLocalizationResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterActivityLocalizations_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterActivityLocalizations_deleteInstance")
		}
	}
}
