// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1 {
	public var users: Users {
		Users(path: path + "/users")
	}

	public struct Users {
		/// Path: `/v1/users`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.UsersResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "users_getCollection")
		}

		public struct GetParameters {
			public var filterUsername: [String]?
			public var filterRoles: [FilterRoles]?
			public var filterVisibleApps: [String]?
			public var sort: [Sort]?
			public var fieldsUsers: [FieldsUsers]?
			public var fieldsApps: [FieldsApps]?
			public var limit: Int?
			public var include: [Include]?
			public var limitVisibleApps: Int?

			public enum FilterRoles: String, Codable, CaseIterable {
				case admin = "ADMIN"
				case finance = "FINANCE"
				case accountHolder = "ACCOUNT_HOLDER"
				case sales = "SALES"
				case marketing = "MARKETING"
				case appManager = "APP_MANAGER"
				case developer = "DEVELOPER"
				case accessToReports = "ACCESS_TO_REPORTS"
				case customerSupport = "CUSTOMER_SUPPORT"
				case createApps = "CREATE_APPS"
				case cloudManagedDeveloperID = "CLOUD_MANAGED_DEVELOPER_ID"
				case cloudManagedAppDistribution = "CLOUD_MANAGED_APP_DISTRIBUTION"
				case generateIndividualKeys = "GENERATE_INDIVIDUAL_KEYS"
			}

			public enum Sort: String, Codable, CaseIterable {
				case username
				case minususername = "-username"
				case lastName
				case minuslastName = "-lastName"
			}

			public enum FieldsUsers: String, Codable, CaseIterable {
				case username
				case firstName
				case lastName
				case roles
				case allAppsVisible
				case provisioningAllowed
				case visibleApps
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case accessibilityURL = "accessibilityUrl"
				case name
				case bundleID = "bundleId"
				case sku
				case primaryLocale
				case isOrEverWasMadeForKids
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
				case contentRightsDeclaration
				case streamlinedPurchasingEnabled
				case accessibilityDeclarations
				case appEncryptionDeclarations
				case ciProduct
				case betaTesters
				case betaGroups
				case appStoreVersions
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case appPricePoints
				case endUserLicenseAgreement
				case appPriceSchedule
				case appAvailabilityV2
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case perfPowerMetrics
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case customerReviews
				case customerReviewSummarizations
				case gameCenterDetail
				case appStoreVersionExperimentsV2
				case alternativeDistributionKey
				case analyticsReportRequests
				case marketplaceSearchDetail
				case backgroundAssets
				case betaFeedbackScreenshotSubmissions
				case betaFeedbackCrashSubmissions
				case webhooks
			}

			public enum Include: String, Codable, CaseIterable {
				case visibleApps
			}

			public init(filterUsername: [String]? = nil, filterRoles: [FilterRoles]? = nil, filterVisibleApps: [String]? = nil, sort: [Sort]? = nil, fieldsUsers: [FieldsUsers]? = nil, fieldsApps: [FieldsApps]? = nil, limit: Int? = nil, include: [Include]? = nil, limitVisibleApps: Int? = nil) {
				self.filterUsername = filterUsername
				self.filterRoles = filterRoles
				self.filterVisibleApps = filterVisibleApps
				self.sort = sort
				self.fieldsUsers = fieldsUsers
				self.fieldsApps = fieldsApps
				self.limit = limit
				self.include = include
				self.limitVisibleApps = limitVisibleApps
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterUsername, forKey: "filter[username]")
				encoder.encode(filterRoles, forKey: "filter[roles]")
				encoder.encode(filterVisibleApps, forKey: "filter[visibleApps]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsUsers, forKey: "fields[users]")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitVisibleApps, forKey: "limit[visibleApps]")
				return encoder.items
			}
		}
	}
}
