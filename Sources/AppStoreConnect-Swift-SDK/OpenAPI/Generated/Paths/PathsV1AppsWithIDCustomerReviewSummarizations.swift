// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var customerReviewSummarizations: CustomerReviewSummarizations {
		CustomerReviewSummarizations(path: path + "/customerReviewSummarizations")
	}

	public struct CustomerReviewSummarizations {
		/// Path: `/v1/apps/{id}/customerReviewSummarizations`
		public let path: String

		public func get(parameters: GetParameters) -> Request<AppStoreConnect_Swift_SDK.CustomerReviewSummarizationsResponse> {
			Request(path: path, method: "GET", query: parameters.asQuery, id: "apps_customerReviewSummarizations_getToManyRelated")
		}

		public struct GetParameters {
			public var filterPlatform: [FilterPlatform]
			public var filterTerritory: [String]?
			public var fieldsCustomerReviewSummarizations: [FieldsCustomerReviewSummarizations]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var limit: Int?
			public var include: [Include]?

			public enum FilterPlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum FieldsCustomerReviewSummarizations: String, Codable, CaseIterable {
				case createdDate
				case locale
				case platform
				case text
				case territory
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public enum Include: String, Codable, CaseIterable {
				case territory
			}

			public init(filterPlatform: [FilterPlatform], filterTerritory: [String]? = nil, fieldsCustomerReviewSummarizations: [FieldsCustomerReviewSummarizations]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterPlatform = filterPlatform
				self.filterTerritory = filterTerritory
				self.fieldsCustomerReviewSummarizations = fieldsCustomerReviewSummarizations
				self.fieldsTerritories = fieldsTerritories
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterPlatform, forKey: "filter[platform]")
				encoder.encode(filterTerritory, forKey: "filter[territory]")
				encoder.encode(fieldsCustomerReviewSummarizations, forKey: "fields[customerReviewSummarizations]")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
