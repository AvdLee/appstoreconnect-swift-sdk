// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterAchievements.WithID {
	public var releases: Releases {
		Releases(path: path + "/releases")
	}

	public struct Releases {
		/// Path: `/v1/gameCenterAchievements/{id}/releases`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementReleasesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterAchievements_releases_getToManyRelated")
		}

		public struct GetParameters {
			public var filterLive: [String]?
			public var filterGameCenterDetail: [String]?
			public var fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsGameCenterAchievementReleases: String, Codable, CaseIterable {
				case live
				case gameCenterDetail
				case gameCenterAchievement
			}

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case arcadeEnabled
				case challengeEnabled
				case app
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
				case defaultLeaderboard
				case defaultGroupLeaderboard
				case achievementReleases
				case activityReleases
				case challengeReleases
				case leaderboardReleases
				case leaderboardSetReleases
				case challengesMinimumPlatformVersions
			}

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case points
				case showBeforeEarned
				case repeatable
				case archived
				case activityProperties
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterAchievement
			}

			public init(filterLive: [String]? = nil, filterGameCenterDetail: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterLive = filterLive
				self.filterGameCenterDetail = filterGameCenterDetail
				self.fieldsGameCenterAchievementReleases = fieldsGameCenterAchievementReleases
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterLive, forKey: "filter[live]")
				encoder.encode(filterGameCenterDetail, forKey: "filter[gameCenterDetail]")
				encoder.encode(fieldsGameCenterAchievementReleases, forKey: "fields[gameCenterAchievementReleases]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
