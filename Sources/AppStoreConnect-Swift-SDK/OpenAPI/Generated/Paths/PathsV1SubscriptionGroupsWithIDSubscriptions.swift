// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.SubscriptionGroups.WithID {
	public var subscriptions: Subscriptions {
		Subscriptions(path: path + "/subscriptions")
	}

	public struct Subscriptions {
		/// Path: `/v1/subscriptionGroups/{id}/subscriptions`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.SubscriptionsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "subscriptionGroups_subscriptions_getToManyRelated")
		}

		public struct GetParameters {
			public var filterProductID: [String]?
			public var filterName: [String]?
			public var filterState: [FilterState]?
			public var sort: [Sort]?
			public var fieldsSubscriptions: [FieldsSubscriptions]?
			public var fieldsSubscriptionLocalizations: [FieldsSubscriptionLocalizations]?
			public var fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots]?
			public var fieldsSubscriptionGroups: [FieldsSubscriptionGroups]?
			public var fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers]?
			public var fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers]?
			public var fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes]?
			public var fieldsSubscriptionPrices: [FieldsSubscriptionPrices]?
			public var fieldsPromotedPurchases: [FieldsPromotedPurchases]?
			public var fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities]?
			public var fieldsWinBackOffers: [FieldsWinBackOffers]?
			public var fieldsSubscriptionImages: [FieldsSubscriptionImages]?
			public var limit: Int?
			public var include: [Include]?
			public var limitSubscriptionLocalizations: Int?
			public var limitIntroductoryOffers: Int?
			public var limitPromotionalOffers: Int?
			public var limitOfferCodes: Int?
			public var limitPrices: Int?
			public var limitWinBackOffers: Int?
			public var limitImages: Int?

			public enum FilterState: String, Codable, CaseIterable {
				case missingMetadata = "MISSING_METADATA"
				case readyToSubmit = "READY_TO_SUBMIT"
				case waitingForReview = "WAITING_FOR_REVIEW"
				case inReview = "IN_REVIEW"
				case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
				case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
				case approved = "APPROVED"
				case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
				case removedFromSale = "REMOVED_FROM_SALE"
				case rejected = "REJECTED"
			}

			public enum Sort: String, Codable, CaseIterable {
				case name
				case minusname = "-name"
			}

			public enum FieldsSubscriptions: String, Codable, CaseIterable {
				case name
				case productID = "productId"
				case familySharable
				case state
				case subscriptionPeriod
				case reviewNote
				case groupLevel
				case subscriptionLocalizations
				case appStoreReviewScreenshot
				case group
				case introductoryOffers
				case promotionalOffers
				case offerCodes
				case prices
				case pricePoints
				case promotedPurchase
				case subscriptionAvailability
				case winBackOffers
				case images
			}

			public enum FieldsSubscriptionLocalizations: String, Codable, CaseIterable {
				case name
				case locale
				case description
				case state
				case subscription
			}

			public enum FieldsSubscriptionAppStoreReviewScreenshots: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case sourceFileChecksum
				case imageAsset
				case assetToken
				case assetType
				case uploadOperations
				case assetDeliveryState
				case subscription
			}

			public enum FieldsSubscriptionGroups: String, Codable, CaseIterable {
				case referenceName
				case subscriptions
				case subscriptionGroupLocalizations
			}

			public enum FieldsSubscriptionIntroductoryOffers: String, Codable, CaseIterable {
				case startDate
				case endDate
				case duration
				case offerMode
				case numberOfPeriods
				case subscription
				case territory
				case subscriptionPricePoint
			}

			public enum FieldsSubscriptionPromotionalOffers: String, Codable, CaseIterable {
				case duration
				case name
				case numberOfPeriods
				case offerCode
				case offerMode
				case subscription
				case prices
			}

			public enum FieldsSubscriptionOfferCodes: String, Codable, CaseIterable {
				case name
				case customerEligibilities
				case offerEligibility
				case duration
				case offerMode
				case numberOfPeriods
				case totalNumberOfCodes
				case active
				case subscription
				case oneTimeUseCodes
				case customCodes
				case prices
			}

			public enum FieldsSubscriptionPrices: String, Codable, CaseIterable {
				case startDate
				case preserved
				case territory
				case subscriptionPricePoint
			}

			public enum FieldsPromotedPurchases: String, Codable, CaseIterable {
				case visibleForAllUsers
				case enabled
				case state
				case inAppPurchaseV2
				case subscription
			}

			public enum FieldsSubscriptionAvailabilities: String, Codable, CaseIterable {
				case availableInNewTerritories
				case availableTerritories
			}

			public enum FieldsWinBackOffers: String, Codable, CaseIterable {
				case referenceName
				case offerID = "offerId"
				case duration
				case offerMode
				case periodCount
				case customerEligibilityPaidSubscriptionDurationInMonths
				case customerEligibilityTimeSinceLastSubscribedInMonths
				case customerEligibilityWaitBetweenOffersInMonths
				case startDate
				case endDate
				case priority
				case promotionIntent
				case prices
			}

			public enum FieldsSubscriptionImages: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case sourceFileChecksum
				case assetToken
				case imageAsset
				case uploadOperations
				case state
				case subscription
			}

			public enum Include: String, Codable, CaseIterable {
				case subscriptionLocalizations
				case appStoreReviewScreenshot
				case group
				case introductoryOffers
				case promotionalOffers
				case offerCodes
				case prices
				case promotedPurchase
				case subscriptionAvailability
				case winBackOffers
				case images
			}

			public init(filterProductID: [String]? = nil, filterName: [String]? = nil, filterState: [FilterState]? = nil, sort: [Sort]? = nil, fieldsSubscriptions: [FieldsSubscriptions]? = nil, fieldsSubscriptionLocalizations: [FieldsSubscriptionLocalizations]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers]? = nil, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers]? = nil, fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes]? = nil, fieldsSubscriptionPrices: [FieldsSubscriptionPrices]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases]? = nil, fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities]? = nil, fieldsWinBackOffers: [FieldsWinBackOffers]? = nil, fieldsSubscriptionImages: [FieldsSubscriptionImages]? = nil, limit: Int? = nil, include: [Include]? = nil, limitSubscriptionLocalizations: Int? = nil, limitIntroductoryOffers: Int? = nil, limitPromotionalOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, limitWinBackOffers: Int? = nil, limitImages: Int? = nil) {
				self.filterProductID = filterProductID
				self.filterName = filterName
				self.filterState = filterState
				self.sort = sort
				self.fieldsSubscriptions = fieldsSubscriptions
				self.fieldsSubscriptionLocalizations = fieldsSubscriptionLocalizations
				self.fieldsSubscriptionAppStoreReviewScreenshots = fieldsSubscriptionAppStoreReviewScreenshots
				self.fieldsSubscriptionGroups = fieldsSubscriptionGroups
				self.fieldsSubscriptionIntroductoryOffers = fieldsSubscriptionIntroductoryOffers
				self.fieldsSubscriptionPromotionalOffers = fieldsSubscriptionPromotionalOffers
				self.fieldsSubscriptionOfferCodes = fieldsSubscriptionOfferCodes
				self.fieldsSubscriptionPrices = fieldsSubscriptionPrices
				self.fieldsPromotedPurchases = fieldsPromotedPurchases
				self.fieldsSubscriptionAvailabilities = fieldsSubscriptionAvailabilities
				self.fieldsWinBackOffers = fieldsWinBackOffers
				self.fieldsSubscriptionImages = fieldsSubscriptionImages
				self.limit = limit
				self.include = include
				self.limitSubscriptionLocalizations = limitSubscriptionLocalizations
				self.limitIntroductoryOffers = limitIntroductoryOffers
				self.limitPromotionalOffers = limitPromotionalOffers
				self.limitOfferCodes = limitOfferCodes
				self.limitPrices = limitPrices
				self.limitWinBackOffers = limitWinBackOffers
				self.limitImages = limitImages
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterProductID, forKey: "filter[productId]")
				encoder.encode(filterName, forKey: "filter[name]")
				encoder.encode(filterState, forKey: "filter[state]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsSubscriptions, forKey: "fields[subscriptions]")
				encoder.encode(fieldsSubscriptionLocalizations, forKey: "fields[subscriptionLocalizations]")
				encoder.encode(fieldsSubscriptionAppStoreReviewScreenshots, forKey: "fields[subscriptionAppStoreReviewScreenshots]")
				encoder.encode(fieldsSubscriptionGroups, forKey: "fields[subscriptionGroups]")
				encoder.encode(fieldsSubscriptionIntroductoryOffers, forKey: "fields[subscriptionIntroductoryOffers]")
				encoder.encode(fieldsSubscriptionPromotionalOffers, forKey: "fields[subscriptionPromotionalOffers]")
				encoder.encode(fieldsSubscriptionOfferCodes, forKey: "fields[subscriptionOfferCodes]")
				encoder.encode(fieldsSubscriptionPrices, forKey: "fields[subscriptionPrices]")
				encoder.encode(fieldsPromotedPurchases, forKey: "fields[promotedPurchases]")
				encoder.encode(fieldsSubscriptionAvailabilities, forKey: "fields[subscriptionAvailabilities]")
				encoder.encode(fieldsWinBackOffers, forKey: "fields[winBackOffers]")
				encoder.encode(fieldsSubscriptionImages, forKey: "fields[subscriptionImages]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitSubscriptionLocalizations, forKey: "limit[subscriptionLocalizations]")
				encoder.encode(limitIntroductoryOffers, forKey: "limit[introductoryOffers]")
				encoder.encode(limitPromotionalOffers, forKey: "limit[promotionalOffers]")
				encoder.encode(limitOfferCodes, forKey: "limit[offerCodes]")
				encoder.encode(limitPrices, forKey: "limit[prices]")
				encoder.encode(limitWinBackOffers, forKey: "limit[winBackOffers]")
				encoder.encode(limitImages, forKey: "limit[images]")
				return encoder.items
			}
		}
	}
}
