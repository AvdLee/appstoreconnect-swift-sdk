// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterAchievements.WithID {
	public var groupAchievement: GroupAchievement {
		GroupAchievement(path: path + "/groupAchievement")
	}

	public struct GroupAchievement {
		/// Path: `/v1/gameCenterAchievements/{id}/groupAchievement`
		public let path: String

		@available(*, deprecated, message: "Deprecated")
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterAchievements_groupAchievement_getToOneRelated")
		}

		public struct GetParameters {
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsGameCenterGroups: [FieldsGameCenterGroups]?
			public var fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]?
			public var fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]?
			public var fieldsGameCenterActivities: [FieldsGameCenterActivities]?
			public var include: [Include]?
			public var limitLocalizations: Int?
			public var limitReleases: Int?

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case points
				case showBeforeEarned
				case repeatable
				case archived
				case activityProperties
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case arcadeEnabled
				case challengeEnabled
				case app
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
				case defaultLeaderboard
				case defaultGroupLeaderboard
				case achievementReleases
				case activityReleases
				case challengeReleases
				case leaderboardReleases
				case leaderboardSetReleases
				case challengesMinimumPlatformVersions
			}

			public enum FieldsGameCenterGroups: String, Codable, CaseIterable {
				case referenceName
				case gameCenterDetails
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
			}

			public enum FieldsGameCenterAchievementLocalizations: String, Codable, CaseIterable {
				case locale
				case name
				case beforeEarnedDescription
				case afterEarnedDescription
				case gameCenterAchievement
				case gameCenterAchievementImage
			}

			public enum FieldsGameCenterAchievementReleases: String, Codable, CaseIterable {
				case live
				case gameCenterDetail
				case gameCenterAchievement
			}

			public enum FieldsGameCenterActivities: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case playStyle
				case minimumPlayersCount
				case maximumPlayersCount
				case supportsPartyCode
				case archived
				case properties
				case gameCenterDetail
				case gameCenterGroup
				case achievements
				case leaderboards
				case versions
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public init(fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]? = nil, fieldsGameCenterActivities: [FieldsGameCenterActivities]? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) {
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsGameCenterGroups = fieldsGameCenterGroups
				self.fieldsGameCenterAchievementLocalizations = fieldsGameCenterAchievementLocalizations
				self.fieldsGameCenterAchievementReleases = fieldsGameCenterAchievementReleases
				self.fieldsGameCenterActivities = fieldsGameCenterActivities
				self.include = include
				self.limitLocalizations = limitLocalizations
				self.limitReleases = limitReleases
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsGameCenterGroups, forKey: "fields[gameCenterGroups]")
				encoder.encode(fieldsGameCenterAchievementLocalizations, forKey: "fields[gameCenterAchievementLocalizations]")
				encoder.encode(fieldsGameCenterAchievementReleases, forKey: "fields[gameCenterAchievementReleases]")
				encoder.encode(fieldsGameCenterActivities, forKey: "fields[gameCenterActivities]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				encoder.encode(limitReleases, forKey: "limit[releases]")
				return encoder.items
			}
		}
	}
}
