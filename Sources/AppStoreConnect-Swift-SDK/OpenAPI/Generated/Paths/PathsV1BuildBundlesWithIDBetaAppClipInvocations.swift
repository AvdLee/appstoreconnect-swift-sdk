// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.BuildBundles.WithID {
	public var betaAppClipInvocations: BetaAppClipInvocations {
		BetaAppClipInvocations(path: path + "/betaAppClipInvocations")
	}

	public struct BetaAppClipInvocations {
		/// Path: `/v1/buildBundles/{id}/betaAppClipInvocations`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.BetaAppClipInvocationsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "buildBundles_betaAppClipInvocations_getToManyRelated")
		}

		public struct GetParameters {
			public var fieldsBetaAppClipInvocations: [FieldsBetaAppClipInvocations]?
			public var fieldsBetaAppClipInvocationLocalizations: [FieldsBetaAppClipInvocationLocalizations]?
			public var limit: Int?
			public var include: [Include]?
			public var limitBetaAppClipInvocationLocalizations: Int?

			public enum FieldsBetaAppClipInvocations: String, Codable, CaseIterable {
				case url
				case betaAppClipInvocationLocalizations
			}

			public enum FieldsBetaAppClipInvocationLocalizations: String, Codable, CaseIterable {
				case title
				case locale
			}

			public enum Include: String, Codable, CaseIterable {
				case betaAppClipInvocationLocalizations
			}

			public init(fieldsBetaAppClipInvocations: [FieldsBetaAppClipInvocations]? = nil, fieldsBetaAppClipInvocationLocalizations: [FieldsBetaAppClipInvocationLocalizations]? = nil, limit: Int? = nil, include: [Include]? = nil, limitBetaAppClipInvocationLocalizations: Int? = nil) {
				self.fieldsBetaAppClipInvocations = fieldsBetaAppClipInvocations
				self.fieldsBetaAppClipInvocationLocalizations = fieldsBetaAppClipInvocationLocalizations
				self.limit = limit
				self.include = include
				self.limitBetaAppClipInvocationLocalizations = limitBetaAppClipInvocationLocalizations
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsBetaAppClipInvocations, forKey: "fields[betaAppClipInvocations]")
				encoder.encode(fieldsBetaAppClipInvocationLocalizations, forKey: "fields[betaAppClipInvocationLocalizations]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitBetaAppClipInvocationLocalizations, forKey: "limit[betaAppClipInvocationLocalizations]")
				return encoder.items
			}
		}
	}
}
