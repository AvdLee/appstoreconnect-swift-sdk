// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.SubscriptionOfferCodes {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/subscriptionOfferCodes/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.SubscriptionOfferCodeResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "subscriptionOfferCodes_getInstance")
		}

		public struct GetParameters {
			public var fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes]?
			public var fieldsSubscriptionOfferCodeOneTimeUseCodes: [FieldsSubscriptionOfferCodeOneTimeUseCodes]?
			public var fieldsSubscriptionOfferCodeCustomCodes: [FieldsSubscriptionOfferCodeCustomCodes]?
			public var fieldsSubscriptionOfferCodePrices: [FieldsSubscriptionOfferCodePrices]?
			public var include: [Include]?
			public var limitCustomCodes: Int?
			public var limitOneTimeUseCodes: Int?
			public var limitPrices: Int?

			public enum FieldsSubscriptionOfferCodes: String, Codable, CaseIterable {
				case name
				case customerEligibilities
				case offerEligibility
				case duration
				case offerMode
				case numberOfPeriods
				case totalNumberOfCodes
				case active
				case subscription
				case oneTimeUseCodes
				case customCodes
				case prices
			}

			public enum FieldsSubscriptionOfferCodeOneTimeUseCodes: String, Codable, CaseIterable {
				case numberOfCodes
				case createdDate
				case expirationDate
				case active
				case offerCode
				case values
			}

			public enum FieldsSubscriptionOfferCodeCustomCodes: String, Codable, CaseIterable {
				case customCode
				case numberOfCodes
				case createdDate
				case expirationDate
				case active
				case offerCode
			}

			public enum FieldsSubscriptionOfferCodePrices: String, Codable, CaseIterable {
				case territory
				case subscriptionPricePoint
			}

			public enum Include: String, Codable, CaseIterable {
				case subscription
				case oneTimeUseCodes
				case customCodes
				case prices
			}

			public init(fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodes: [FieldsSubscriptionOfferCodeOneTimeUseCodes]? = nil, fieldsSubscriptionOfferCodeCustomCodes: [FieldsSubscriptionOfferCodeCustomCodes]? = nil, fieldsSubscriptionOfferCodePrices: [FieldsSubscriptionOfferCodePrices]? = nil, include: [Include]? = nil, limitCustomCodes: Int? = nil, limitOneTimeUseCodes: Int? = nil, limitPrices: Int? = nil) {
				self.fieldsSubscriptionOfferCodes = fieldsSubscriptionOfferCodes
				self.fieldsSubscriptionOfferCodeOneTimeUseCodes = fieldsSubscriptionOfferCodeOneTimeUseCodes
				self.fieldsSubscriptionOfferCodeCustomCodes = fieldsSubscriptionOfferCodeCustomCodes
				self.fieldsSubscriptionOfferCodePrices = fieldsSubscriptionOfferCodePrices
				self.include = include
				self.limitCustomCodes = limitCustomCodes
				self.limitOneTimeUseCodes = limitOneTimeUseCodes
				self.limitPrices = limitPrices
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsSubscriptionOfferCodes, forKey: "fields[subscriptionOfferCodes]")
				encoder.encode(fieldsSubscriptionOfferCodeOneTimeUseCodes, forKey: "fields[subscriptionOfferCodeOneTimeUseCodes]")
				encoder.encode(fieldsSubscriptionOfferCodeCustomCodes, forKey: "fields[subscriptionOfferCodeCustomCodes]")
				encoder.encode(fieldsSubscriptionOfferCodePrices, forKey: "fields[subscriptionOfferCodePrices]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitCustomCodes, forKey: "limit[customCodes]")
				encoder.encode(limitOneTimeUseCodes, forKey: "limit[oneTimeUseCodes]")
				encoder.encode(limitPrices, forKey: "limit[prices]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.SubscriptionOfferCodeUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.SubscriptionOfferCodeResponse> {
			Request(path: path, method: "PATCH", body: body, id: "subscriptionOfferCodes_updateInstance")
		}
	}
}
