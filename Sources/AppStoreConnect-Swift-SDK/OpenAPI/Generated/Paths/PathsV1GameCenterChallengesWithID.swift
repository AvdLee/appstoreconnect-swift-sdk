// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterChallenges {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterChallenges/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterChallengeResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterChallenges_getInstance")
		}

		public struct GetParameters {
			public var fieldsGameCenterChallenges: [FieldsGameCenterChallenges]?
			public var fieldsGameCenterChallengeVersions: [FieldsGameCenterChallengeVersions]?
			public var include: [Include]?
			public var limitVersions: Int?

			public enum FieldsGameCenterChallenges: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case allowedDurations
				case archived
				case challengeType
				case repeatable
				case gameCenterDetail
				case gameCenterGroup
				case versions
				case leaderboard
			}

			public enum FieldsGameCenterChallengeVersions: String, Codable, CaseIterable {
				case version
				case state
				case challenge
				case localizations
				case releases
				case defaultImage
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case versions
				case leaderboard
			}

			public init(fieldsGameCenterChallenges: [FieldsGameCenterChallenges]? = nil, fieldsGameCenterChallengeVersions: [FieldsGameCenterChallengeVersions]? = nil, include: [Include]? = nil, limitVersions: Int? = nil) {
				self.fieldsGameCenterChallenges = fieldsGameCenterChallenges
				self.fieldsGameCenterChallengeVersions = fieldsGameCenterChallengeVersions
				self.include = include
				self.limitVersions = limitVersions
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterChallenges, forKey: "fields[gameCenterChallenges]")
				encoder.encode(fieldsGameCenterChallengeVersions, forKey: "fields[gameCenterChallengeVersions]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitVersions, forKey: "limit[versions]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterChallengeUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterChallengeResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterChallenges_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterChallenges_deleteInstance")
		}
	}
}
