// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersions.WithID {
	public var appStoreVersionLocalizations: AppStoreVersionLocalizations {
		AppStoreVersionLocalizations(path: path + "/appStoreVersionLocalizations")
	}

	public struct AppStoreVersionLocalizations {
		/// Path: `/v1/appStoreVersions/{id}/appStoreVersionLocalizations`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreVersionLocalizationsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersions_appStoreVersionLocalizations_getToManyRelated")
		}

		public struct GetParameters {
			public var filterLocale: [String]?
			public var fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAppScreenshotSets: [FieldsAppScreenshotSets]?
			public var fieldsAppPreviewSets: [FieldsAppPreviewSets]?
			public var limit: Int?
			public var include: [Include]?
			public var limitAppScreenshotSets: Int?
			public var limitAppPreviewSets: Int?

			public enum FieldsAppStoreVersionLocalizations: String, Codable, CaseIterable {
				case description
				case locale
				case keywords
				case marketingURL = "marketingUrl"
				case promotionalText
				case supportURL = "supportUrl"
				case whatsNew
				case appStoreVersion
				case appScreenshotSets
				case appPreviewSets
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsAppScreenshotSets: String, Codable, CaseIterable {
				case screenshotDisplayType
				case appStoreVersionLocalization
				case appCustomProductPageLocalization
				case appStoreVersionExperimentTreatmentLocalization
				case appScreenshots
			}

			public enum FieldsAppPreviewSets: String, Codable, CaseIterable {
				case previewType
				case appStoreVersionLocalization
				case appCustomProductPageLocalization
				case appStoreVersionExperimentTreatmentLocalization
				case appPreviews
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreVersion
				case appScreenshotSets
				case appPreviewSets
			}

			public init(filterLocale: [String]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAppScreenshotSets: Int? = nil, limitAppPreviewSets: Int? = nil) {
				self.filterLocale = filterLocale
				self.fieldsAppStoreVersionLocalizations = fieldsAppStoreVersionLocalizations
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAppScreenshotSets = fieldsAppScreenshotSets
				self.fieldsAppPreviewSets = fieldsAppPreviewSets
				self.limit = limit
				self.include = include
				self.limitAppScreenshotSets = limitAppScreenshotSets
				self.limitAppPreviewSets = limitAppPreviewSets
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterLocale, forKey: "filter[locale]")
				encoder.encode(fieldsAppStoreVersionLocalizations, forKey: "fields[appStoreVersionLocalizations]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAppScreenshotSets, forKey: "fields[appScreenshotSets]")
				encoder.encode(fieldsAppPreviewSets, forKey: "fields[appPreviewSets]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppScreenshotSets, forKey: "limit[appScreenshotSets]")
				encoder.encode(limitAppPreviewSets, forKey: "limit[appPreviewSets]")
				return encoder.items
			}
		}
	}
}
