// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AnalyticsReports.WithID {
	public var instances: Instances {
		Instances(path: path + "/instances")
	}

	public struct Instances {
		/// Path: `/v1/analyticsReports/{id}/instances`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AnalyticsReportInstancesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "analyticsReports_instances_getToManyRelated")
		}

		public struct GetParameters {
			public var filterGranularity: [FilterGranularity]?
			public var filterProcessingDate: [String]?
			public var fieldsAnalyticsReportInstances: [FieldsAnalyticsReportInstances]?
			public var limit: Int?

			public enum FilterGranularity: String, Codable, CaseIterable {
				case daily = "DAILY"
				case weekly = "WEEKLY"
				case monthly = "MONTHLY"
			}

			public enum FieldsAnalyticsReportInstances: String, Codable, CaseIterable {
				case granularity
				case processingDate
				case segments
			}

			public init(filterGranularity: [FilterGranularity]? = nil, filterProcessingDate: [String]? = nil, fieldsAnalyticsReportInstances: [FieldsAnalyticsReportInstances]? = nil, limit: Int? = nil) {
				self.filterGranularity = filterGranularity
				self.filterProcessingDate = filterProcessingDate
				self.fieldsAnalyticsReportInstances = fieldsAnalyticsReportInstances
				self.limit = limit
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterGranularity, forKey: "filter[granularity]")
				encoder.encode(filterProcessingDate, forKey: "filter[processingDate]")
				encoder.encode(fieldsAnalyticsReportInstances, forKey: "fields[analyticsReportInstances]")
				encoder.encode(limit, forKey: "limit")
				return encoder.items
			}
		}
	}
}
