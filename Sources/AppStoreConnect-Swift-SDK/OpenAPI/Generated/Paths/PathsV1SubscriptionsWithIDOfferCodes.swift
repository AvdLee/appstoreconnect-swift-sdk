// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Subscriptions.WithID {
	public var offerCodes: OfferCodes {
		OfferCodes(path: path + "/offerCodes")
	}

	public struct OfferCodes {
		/// Path: `/v1/subscriptions/{id}/offerCodes`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.SubscriptionOfferCodesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "subscriptions_offerCodes_getToManyRelated")
		}

		public struct GetParameters {
			public var filterTerritory: [String]?
			public var fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes]?
			public var fieldsSubscriptions: [FieldsSubscriptions]?
			public var fieldsSubscriptionOfferCodeOneTimeUseCodes: [FieldsSubscriptionOfferCodeOneTimeUseCodes]?
			public var fieldsSubscriptionOfferCodeCustomCodes: [FieldsSubscriptionOfferCodeCustomCodes]?
			public var fieldsSubscriptionOfferCodePrices: [FieldsSubscriptionOfferCodePrices]?
			public var limit: Int?
			public var include: [Include]?
			public var limitOneTimeUseCodes: Int?
			public var limitCustomCodes: Int?
			public var limitPrices: Int?

			public enum FieldsSubscriptionOfferCodes: String, Codable, CaseIterable {
				case name
				case customerEligibilities
				case offerEligibility
				case duration
				case offerMode
				case numberOfPeriods
				case totalNumberOfCodes
				case active
				case subscription
				case oneTimeUseCodes
				case customCodes
				case prices
			}

			public enum FieldsSubscriptions: String, Codable, CaseIterable {
				case name
				case productID = "productId"
				case familySharable
				case state
				case subscriptionPeriod
				case reviewNote
				case groupLevel
				case subscriptionLocalizations
				case appStoreReviewScreenshot
				case group
				case introductoryOffers
				case promotionalOffers
				case offerCodes
				case prices
				case pricePoints
				case promotedPurchase
				case subscriptionAvailability
				case winBackOffers
				case images
			}

			public enum FieldsSubscriptionOfferCodeOneTimeUseCodes: String, Codable, CaseIterable {
				case numberOfCodes
				case createdDate
				case expirationDate
				case active
				case offerCode
				case values
			}

			public enum FieldsSubscriptionOfferCodeCustomCodes: String, Codable, CaseIterable {
				case customCode
				case numberOfCodes
				case createdDate
				case expirationDate
				case active
				case offerCode
			}

			public enum FieldsSubscriptionOfferCodePrices: String, Codable, CaseIterable {
				case territory
				case subscriptionPricePoint
			}

			public enum Include: String, Codable, CaseIterable {
				case subscription
				case oneTimeUseCodes
				case customCodes
				case prices
			}

			public init(filterTerritory: [String]? = nil, fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes]? = nil, fieldsSubscriptions: [FieldsSubscriptions]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodes: [FieldsSubscriptionOfferCodeOneTimeUseCodes]? = nil, fieldsSubscriptionOfferCodeCustomCodes: [FieldsSubscriptionOfferCodeCustomCodes]? = nil, fieldsSubscriptionOfferCodePrices: [FieldsSubscriptionOfferCodePrices]? = nil, limit: Int? = nil, include: [Include]? = nil, limitOneTimeUseCodes: Int? = nil, limitCustomCodes: Int? = nil, limitPrices: Int? = nil) {
				self.filterTerritory = filterTerritory
				self.fieldsSubscriptionOfferCodes = fieldsSubscriptionOfferCodes
				self.fieldsSubscriptions = fieldsSubscriptions
				self.fieldsSubscriptionOfferCodeOneTimeUseCodes = fieldsSubscriptionOfferCodeOneTimeUseCodes
				self.fieldsSubscriptionOfferCodeCustomCodes = fieldsSubscriptionOfferCodeCustomCodes
				self.fieldsSubscriptionOfferCodePrices = fieldsSubscriptionOfferCodePrices
				self.limit = limit
				self.include = include
				self.limitOneTimeUseCodes = limitOneTimeUseCodes
				self.limitCustomCodes = limitCustomCodes
				self.limitPrices = limitPrices
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterTerritory, forKey: "filter[territory]")
				encoder.encode(fieldsSubscriptionOfferCodes, forKey: "fields[subscriptionOfferCodes]")
				encoder.encode(fieldsSubscriptions, forKey: "fields[subscriptions]")
				encoder.encode(fieldsSubscriptionOfferCodeOneTimeUseCodes, forKey: "fields[subscriptionOfferCodeOneTimeUseCodes]")
				encoder.encode(fieldsSubscriptionOfferCodeCustomCodes, forKey: "fields[subscriptionOfferCodeCustomCodes]")
				encoder.encode(fieldsSubscriptionOfferCodePrices, forKey: "fields[subscriptionOfferCodePrices]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitOneTimeUseCodes, forKey: "limit[oneTimeUseCodes]")
				encoder.encode(limitCustomCodes, forKey: "limit[customCodes]")
				encoder.encode(limitPrices, forKey: "limit[prices]")
				return encoder.items
			}
		}
	}
}
