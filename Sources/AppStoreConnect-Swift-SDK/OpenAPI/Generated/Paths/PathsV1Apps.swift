// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1 {
	public var apps: Apps {
		Apps(path: path + "/apps")
	}

	public struct Apps {
		/// Path: `/v1/apps`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_getCollection")
		}

		public struct GetParameters {
			public var filterName: [String]?
			public var filterBundleID: [String]?
			public var filterSku: [String]?
			public var filterAppStoreVersionsAppStoreState: [FilterAppStoreVersionsAppStoreState]?
			public var filterAppStoreVersionsPlatform: [FilterAppStoreVersionsPlatform]?
			public var filterAppStoreVersionsAppVersionState: [FilterAppStoreVersionsAppVersionState]?
			public var filterReviewSubmissionsState: [FilterReviewSubmissionsState]?
			public var filterReviewSubmissionsPlatform: [FilterReviewSubmissionsPlatform]?
			public var filterAppStoreVersions: [String]?
			public var filterID: [String]?
			public var isExistsGameCenterEnabledVersions: Bool?
			public var sort: [Sort]?
			public var fieldsApps: [FieldsApps]?
			public var fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations]?
			public var fieldsCiProducts: [FieldsCiProducts]?
			public var fieldsBetaGroups: [FieldsBetaGroups]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsPreReleaseVersions: [FieldsPreReleaseVersions]?
			public var fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations]?
			public var fieldsBuilds: [FieldsBuilds]?
			public var fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements]?
			public var fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails]?
			public var fieldsAppInfos: [FieldsAppInfos]?
			public var fieldsAppClips: [FieldsAppClips]?
			public var fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements]?
			public var fieldsInAppPurchases: [FieldsInAppPurchases]?
			public var fieldsSubscriptionGroups: [FieldsSubscriptionGroups]?
			public var fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions]?
			public var fieldsAppCustomProductPages: [FieldsAppCustomProductPages]?
			public var fieldsPromotedPurchases: [FieldsPromotedPurchases]?
			public var fieldsAppEvents: [FieldsAppEvents]?
			public var fieldsReviewSubmissions: [FieldsReviewSubmissions]?
			public var fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]?
			public var limit: Int?
			public var include: [Include]?
			public var limitAppClips: Int?
			public var limitAppCustomProductPages: Int?
			public var limitAppEncryptionDeclarations: Int?
			public var limitAppEvents: Int?
			public var limitAppInfos: Int?
			public var limitAppStoreVersionExperimentsV2: Int?
			public var limitAppStoreVersions: Int?
			public var limitBetaAppLocalizations: Int?
			public var limitBetaGroups: Int?
			public var limitBuilds: Int?
			public var limitGameCenterEnabledVersions: Int?
			public var limitInAppPurchases: Int?
			public var limitInAppPurchasesV2: Int?
			public var limitPreReleaseVersions: Int?
			public var limitPromotedPurchases: Int?
			public var limitReviewSubmissions: Int?
			public var limitSubscriptionGroups: Int?

			public enum FilterAppStoreVersionsAppStoreState: String, Codable, CaseIterable {
				case accepted = "ACCEPTED"
				case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
				case developerRejected = "DEVELOPER_REJECTED"
				case inReview = "IN_REVIEW"
				case invalidBinary = "INVALID_BINARY"
				case metadataRejected = "METADATA_REJECTED"
				case pendingAppleRelease = "PENDING_APPLE_RELEASE"
				case pendingContract = "PENDING_CONTRACT"
				case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
				case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
				case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
				case processingForAppStore = "PROCESSING_FOR_APP_STORE"
				case readyForReview = "READY_FOR_REVIEW"
				case readyForSale = "READY_FOR_SALE"
				case rejected = "REJECTED"
				case removedFromSale = "REMOVED_FROM_SALE"
				case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
				case waitingForReview = "WAITING_FOR_REVIEW"
				case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
				case notApplicable = "NOT_APPLICABLE"
			}

			public enum FilterAppStoreVersionsPlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum FilterAppStoreVersionsAppVersionState: String, Codable, CaseIterable {
				case accepted = "ACCEPTED"
				case developerRejected = "DEVELOPER_REJECTED"
				case inReview = "IN_REVIEW"
				case invalidBinary = "INVALID_BINARY"
				case metadataRejected = "METADATA_REJECTED"
				case pendingAppleRelease = "PENDING_APPLE_RELEASE"
				case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
				case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
				case processingForDistribution = "PROCESSING_FOR_DISTRIBUTION"
				case readyForDistribution = "READY_FOR_DISTRIBUTION"
				case readyForReview = "READY_FOR_REVIEW"
				case rejected = "REJECTED"
				case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
				case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
				case waitingForReview = "WAITING_FOR_REVIEW"
			}

			public enum FilterReviewSubmissionsState: String, Codable, CaseIterable {
				case readyForReview = "READY_FOR_REVIEW"
				case waitingForReview = "WAITING_FOR_REVIEW"
				case inReview = "IN_REVIEW"
				case unresolvedIssues = "UNRESOLVED_ISSUES"
				case canceling = "CANCELING"
				case completing = "COMPLETING"
				case complete = "COMPLETE"
			}

			public enum FilterReviewSubmissionsPlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum Sort: String, Codable, CaseIterable {
				case name
				case minusname = "-name"
				case bundleID = "bundleId"
				case minusbundleID = "-bundleId"
				case sku
				case minussku = "-sku"
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case accessibilityURL = "accessibilityUrl"
				case name
				case bundleID = "bundleId"
				case sku
				case primaryLocale
				case isOrEverWasMadeForKids
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
				case contentRightsDeclaration
				case streamlinedPurchasingEnabled
				case accessibilityDeclarations
				case appEncryptionDeclarations
				case ciProduct
				case betaTesters
				case betaGroups
				case appStoreVersions
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case appPricePoints
				case endUserLicenseAgreement
				case appPriceSchedule
				case appAvailabilityV2
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case perfPowerMetrics
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case customerReviews
				case customerReviewSummarizations
				case gameCenterDetail
				case appStoreVersionExperimentsV2
				case alternativeDistributionKey
				case analyticsReportRequests
				case marketplaceSearchDetail
				case backgroundAssets
				case betaFeedbackScreenshotSubmissions
				case betaFeedbackCrashSubmissions
				case webhooks
			}

			public enum FieldsAppEncryptionDeclarations: String, Codable, CaseIterable {
				case appDescription
				case createdDate
				case usesEncryption
				case exempt
				case containsProprietaryCryptography
				case containsThirdPartyCryptography
				case availableOnFrenchStore
				case platform
				case uploadedDate
				case documentURL = "documentUrl"
				case documentName
				case documentType
				case appEncryptionDeclarationState
				case codeValue
				case app
				case builds
				case appEncryptionDeclarationDocument
			}

			public enum FieldsCiProducts: String, Codable, CaseIterable {
				case name
				case createdDate
				case productType
				case app
				case bundleID = "bundleId"
				case workflows
				case primaryRepositories
				case additionalRepositories
				case buildRuns
			}

			public enum FieldsBetaGroups: String, Codable, CaseIterable {
				case name
				case createdDate
				case isInternalGroup
				case hasAccessToAllBuilds
				case publicLinkEnabled
				case publicLinkID = "publicLinkId"
				case publicLinkLimitEnabled
				case publicLinkLimit
				case publicLink
				case feedbackEnabled
				case iosBuildsAvailableForAppleSiliconMac
				case iosBuildsAvailableForAppleVision
				case app
				case builds
				case betaTesters
				case betaRecruitmentCriteria
				case betaRecruitmentCriterionCompatibleBuildCheck
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsPreReleaseVersions: String, Codable, CaseIterable {
				case version
				case platform
				case builds
				case app
			}

			public enum FieldsBetaAppLocalizations: String, Codable, CaseIterable {
				case feedbackEmail
				case marketingURL = "marketingUrl"
				case privacyPolicyURL = "privacyPolicyUrl"
				case tvOsPrivacyPolicy
				case description
				case locale
				case app
			}

			public enum FieldsBuilds: String, Codable, CaseIterable {
				case version
				case uploadedDate
				case expirationDate
				case expired
				case minOsVersion
				case lsMinimumSystemVersion
				case computedMinMacOsVersion
				case computedMinVisionOsVersion
				case iconAssetToken
				case processingState
				case buildAudienceType
				case usesNonExemptEncryption
				case preReleaseVersion
				case individualTesters
				case betaGroups
				case betaBuildLocalizations
				case appEncryptionDeclaration
				case betaAppReviewSubmission
				case app
				case buildBetaDetail
				case appStoreVersion
				case icons
				case buildBundles
				case perfPowerMetrics
				case diagnosticSignatures
			}

			public enum FieldsBetaLicenseAgreements: String, Codable, CaseIterable {
				case agreementText
				case app
			}

			public enum FieldsBetaAppReviewDetails: String, Codable, CaseIterable {
				case contactFirstName
				case contactLastName
				case contactPhone
				case contactEmail
				case demoAccountName
				case demoAccountPassword
				case demoAccountRequired
				case notes
				case app
			}

			public enum FieldsAppInfos: String, Codable, CaseIterable {
				case appStoreState
				case state
				case appStoreAgeRating
				case australiaAgeRating
				case brazilAgeRating
				case brazilAgeRatingV2
				case franceAgeRating
				case koreaAgeRating
				case kidsAgeBand
				case app
				case ageRatingDeclaration
				case appInfoLocalizations
				case primaryCategory
				case primarySubcategoryOne
				case primarySubcategoryTwo
				case secondaryCategory
				case secondarySubcategoryOne
				case secondarySubcategoryTwo
			}

			public enum FieldsAppClips: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case app
				case appClipDefaultExperiences
				case appClipAdvancedExperiences
			}

			public enum FieldsEndUserLicenseAgreements: String, Codable, CaseIterable {
				case agreementText
				case app
				case territories
			}

			public enum FieldsInAppPurchases: String, Codable, CaseIterable {
				case referenceName
				case productID = "productId"
				case inAppPurchaseType
				case state
				case apps
				case name
				case reviewNote
				case familySharable
				case contentHosting
				case inAppPurchaseLocalizations
				case pricePoints
				case content
				case appStoreReviewScreenshot
				case promotedPurchase
				case iapPriceSchedule
				case inAppPurchaseAvailability
				case images
			}

			public enum FieldsSubscriptionGroups: String, Codable, CaseIterable {
				case referenceName
				case subscriptions
				case subscriptionGroupLocalizations
			}

			public enum FieldsGameCenterEnabledVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case iconAsset
				case compatibleVersions
				case app
			}

			public enum FieldsAppCustomProductPages: String, Codable, CaseIterable {
				case name
				case url
				case visible
				case app
				case appCustomProductPageVersions
			}

			public enum FieldsPromotedPurchases: String, Codable, CaseIterable {
				case visibleForAllUsers
				case enabled
				case state
				case inAppPurchaseV2
				case subscription
			}

			public enum FieldsAppEvents: String, Codable, CaseIterable {
				case referenceName
				case badge
				case eventState
				case deepLink
				case purchaseRequirement
				case primaryLocale
				case priority
				case purpose
				case territorySchedules
				case archivedTerritorySchedules
				case localizations
			}

			public enum FieldsReviewSubmissions: String, Codable, CaseIterable {
				case platform
				case submittedDate
				case state
				case app
				case items
				case appStoreVersionForReview
				case submittedByActor
				case lastUpdatedByActor
			}

			public enum FieldsSubscriptionGracePeriods: String, Codable, CaseIterable {
				case optIn
				case sandboxOptIn
				case duration
				case renewalType
			}

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case arcadeEnabled
				case challengeEnabled
				case app
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
				case defaultLeaderboard
				case defaultGroupLeaderboard
				case achievementReleases
				case activityReleases
				case challengeReleases
				case leaderboardReleases
				case leaderboardSetReleases
				case challengesMinimumPlatformVersions
			}

			public enum FieldsAppStoreVersionExperiments: String, Codable, CaseIterable {
				case name
				case platform
				case trafficProportion
				case state
				case reviewRequired
				case startDate
				case endDate
				case app
				case latestControlVersion
				case controlVersions
				case appStoreVersionExperimentTreatments
			}

			public enum Include: String, Codable, CaseIterable {
				case appEncryptionDeclarations
				case ciProduct
				case betaGroups
				case appStoreVersions
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case endUserLicenseAgreement
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case gameCenterDetail
				case appStoreVersionExperimentsV2
			}

			public init(filterName: [String]? = nil, filterBundleID: [String]? = nil, filterSku: [String]? = nil, filterAppStoreVersionsAppStoreState: [FilterAppStoreVersionsAppStoreState]? = nil, filterAppStoreVersionsPlatform: [FilterAppStoreVersionsPlatform]? = nil, filterAppStoreVersionsAppVersionState: [FilterAppStoreVersionsAppVersionState]? = nil, filterReviewSubmissionsState: [FilterReviewSubmissionsState]? = nil, filterReviewSubmissionsPlatform: [FilterReviewSubmissionsPlatform]? = nil, filterAppStoreVersions: [String]? = nil, filterID: [String]? = nil, isExistsGameCenterEnabledVersions: Bool? = nil, sort: [Sort]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations]? = nil, fieldsCiProducts: [FieldsCiProducts]? = nil, fieldsBetaGroups: [FieldsBetaGroups]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails]? = nil, fieldsAppInfos: [FieldsAppInfos]? = nil, fieldsAppClips: [FieldsAppClips]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases]? = nil, fieldsAppEvents: [FieldsAppEvents]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEncryptionDeclarations: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersions: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) {
				self.filterName = filterName
				self.filterBundleID = filterBundleID
				self.filterSku = filterSku
				self.filterAppStoreVersionsAppStoreState = filterAppStoreVersionsAppStoreState
				self.filterAppStoreVersionsPlatform = filterAppStoreVersionsPlatform
				self.filterAppStoreVersionsAppVersionState = filterAppStoreVersionsAppVersionState
				self.filterReviewSubmissionsState = filterReviewSubmissionsState
				self.filterReviewSubmissionsPlatform = filterReviewSubmissionsPlatform
				self.filterAppStoreVersions = filterAppStoreVersions
				self.filterID = filterID
				self.isExistsGameCenterEnabledVersions = isExistsGameCenterEnabledVersions
				self.sort = sort
				self.fieldsApps = fieldsApps
				self.fieldsAppEncryptionDeclarations = fieldsAppEncryptionDeclarations
				self.fieldsCiProducts = fieldsCiProducts
				self.fieldsBetaGroups = fieldsBetaGroups
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsPreReleaseVersions = fieldsPreReleaseVersions
				self.fieldsBetaAppLocalizations = fieldsBetaAppLocalizations
				self.fieldsBuilds = fieldsBuilds
				self.fieldsBetaLicenseAgreements = fieldsBetaLicenseAgreements
				self.fieldsBetaAppReviewDetails = fieldsBetaAppReviewDetails
				self.fieldsAppInfos = fieldsAppInfos
				self.fieldsAppClips = fieldsAppClips
				self.fieldsEndUserLicenseAgreements = fieldsEndUserLicenseAgreements
				self.fieldsInAppPurchases = fieldsInAppPurchases
				self.fieldsSubscriptionGroups = fieldsSubscriptionGroups
				self.fieldsGameCenterEnabledVersions = fieldsGameCenterEnabledVersions
				self.fieldsAppCustomProductPages = fieldsAppCustomProductPages
				self.fieldsPromotedPurchases = fieldsPromotedPurchases
				self.fieldsAppEvents = fieldsAppEvents
				self.fieldsReviewSubmissions = fieldsReviewSubmissions
				self.fieldsSubscriptionGracePeriods = fieldsSubscriptionGracePeriods
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsAppStoreVersionExperiments = fieldsAppStoreVersionExperiments
				self.limit = limit
				self.include = include
				self.limitAppClips = limitAppClips
				self.limitAppCustomProductPages = limitAppCustomProductPages
				self.limitAppEncryptionDeclarations = limitAppEncryptionDeclarations
				self.limitAppEvents = limitAppEvents
				self.limitAppInfos = limitAppInfos
				self.limitAppStoreVersionExperimentsV2 = limitAppStoreVersionExperimentsV2
				self.limitAppStoreVersions = limitAppStoreVersions
				self.limitBetaAppLocalizations = limitBetaAppLocalizations
				self.limitBetaGroups = limitBetaGroups
				self.limitBuilds = limitBuilds
				self.limitGameCenterEnabledVersions = limitGameCenterEnabledVersions
				self.limitInAppPurchases = limitInAppPurchases
				self.limitInAppPurchasesV2 = limitInAppPurchasesV2
				self.limitPreReleaseVersions = limitPreReleaseVersions
				self.limitPromotedPurchases = limitPromotedPurchases
				self.limitReviewSubmissions = limitReviewSubmissions
				self.limitSubscriptionGroups = limitSubscriptionGroups
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterName, forKey: "filter[name]")
				encoder.encode(filterBundleID, forKey: "filter[bundleId]")
				encoder.encode(filterSku, forKey: "filter[sku]")
				encoder.encode(filterAppStoreVersionsAppStoreState, forKey: "filter[appStoreVersions.appStoreState]")
				encoder.encode(filterAppStoreVersionsPlatform, forKey: "filter[appStoreVersions.platform]")
				encoder.encode(filterAppStoreVersionsAppVersionState, forKey: "filter[appStoreVersions.appVersionState]")
				encoder.encode(filterReviewSubmissionsState, forKey: "filter[reviewSubmissions.state]")
				encoder.encode(filterReviewSubmissionsPlatform, forKey: "filter[reviewSubmissions.platform]")
				encoder.encode(filterAppStoreVersions, forKey: "filter[appStoreVersions]")
				encoder.encode(filterID, forKey: "filter[id]")
				encoder.encode(isExistsGameCenterEnabledVersions, forKey: "exists[gameCenterEnabledVersions]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(fieldsAppEncryptionDeclarations, forKey: "fields[appEncryptionDeclarations]")
				encoder.encode(fieldsCiProducts, forKey: "fields[ciProducts]")
				encoder.encode(fieldsBetaGroups, forKey: "fields[betaGroups]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsPreReleaseVersions, forKey: "fields[preReleaseVersions]")
				encoder.encode(fieldsBetaAppLocalizations, forKey: "fields[betaAppLocalizations]")
				encoder.encode(fieldsBuilds, forKey: "fields[builds]")
				encoder.encode(fieldsBetaLicenseAgreements, forKey: "fields[betaLicenseAgreements]")
				encoder.encode(fieldsBetaAppReviewDetails, forKey: "fields[betaAppReviewDetails]")
				encoder.encode(fieldsAppInfos, forKey: "fields[appInfos]")
				encoder.encode(fieldsAppClips, forKey: "fields[appClips]")
				encoder.encode(fieldsEndUserLicenseAgreements, forKey: "fields[endUserLicenseAgreements]")
				encoder.encode(fieldsInAppPurchases, forKey: "fields[inAppPurchases]")
				encoder.encode(fieldsSubscriptionGroups, forKey: "fields[subscriptionGroups]")
				encoder.encode(fieldsGameCenterEnabledVersions, forKey: "fields[gameCenterEnabledVersions]")
				encoder.encode(fieldsAppCustomProductPages, forKey: "fields[appCustomProductPages]")
				encoder.encode(fieldsPromotedPurchases, forKey: "fields[promotedPurchases]")
				encoder.encode(fieldsAppEvents, forKey: "fields[appEvents]")
				encoder.encode(fieldsReviewSubmissions, forKey: "fields[reviewSubmissions]")
				encoder.encode(fieldsSubscriptionGracePeriods, forKey: "fields[subscriptionGracePeriods]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsAppStoreVersionExperiments, forKey: "fields[appStoreVersionExperiments]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppClips, forKey: "limit[appClips]")
				encoder.encode(limitAppCustomProductPages, forKey: "limit[appCustomProductPages]")
				encoder.encode(limitAppEncryptionDeclarations, forKey: "limit[appEncryptionDeclarations]")
				encoder.encode(limitAppEvents, forKey: "limit[appEvents]")
				encoder.encode(limitAppInfos, forKey: "limit[appInfos]")
				encoder.encode(limitAppStoreVersionExperimentsV2, forKey: "limit[appStoreVersionExperimentsV2]")
				encoder.encode(limitAppStoreVersions, forKey: "limit[appStoreVersions]")
				encoder.encode(limitBetaAppLocalizations, forKey: "limit[betaAppLocalizations]")
				encoder.encode(limitBetaGroups, forKey: "limit[betaGroups]")
				encoder.encode(limitBuilds, forKey: "limit[builds]")
				encoder.encode(limitGameCenterEnabledVersions, forKey: "limit[gameCenterEnabledVersions]")
				encoder.encode(limitInAppPurchases, forKey: "limit[inAppPurchases]")
				encoder.encode(limitInAppPurchasesV2, forKey: "limit[inAppPurchasesV2]")
				encoder.encode(limitPreReleaseVersions, forKey: "limit[preReleaseVersions]")
				encoder.encode(limitPromotedPurchases, forKey: "limit[promotedPurchases]")
				encoder.encode(limitReviewSubmissions, forKey: "limit[reviewSubmissions]")
				encoder.encode(limitSubscriptionGroups, forKey: "limit[subscriptionGroups]")
				return encoder.items
			}
		}
	}
}
