// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterAchievements {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterAchievements/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterAchievements_getInstance")
		}

		public struct GetParameters {
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]?
			public var fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]?
			public var include: [Include]?
			public var limitLocalizations: Int?
			public var limitReleases: Int?

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case points
				case showBeforeEarned
				case repeatable
				case archived
				case activityProperties
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public enum FieldsGameCenterAchievementLocalizations: String, Codable, CaseIterable {
				case locale
				case name
				case beforeEarnedDescription
				case afterEarnedDescription
				case gameCenterAchievement
				case gameCenterAchievementImage
			}

			public enum FieldsGameCenterAchievementReleases: String, Codable, CaseIterable {
				case live
				case gameCenterDetail
				case gameCenterAchievement
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public init(fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) {
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.fieldsGameCenterAchievementLocalizations = fieldsGameCenterAchievementLocalizations
				self.fieldsGameCenterAchievementReleases = fieldsGameCenterAchievementReleases
				self.include = include
				self.limitLocalizations = limitLocalizations
				self.limitReleases = limitReleases
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(fieldsGameCenterAchievementLocalizations, forKey: "fields[gameCenterAchievementLocalizations]")
				encoder.encode(fieldsGameCenterAchievementReleases, forKey: "fields[gameCenterAchievementReleases]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				encoder.encode(limitReleases, forKey: "limit[releases]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterAchievementUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterAchievements_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterAchievements_deleteInstance")
		}
	}
}
