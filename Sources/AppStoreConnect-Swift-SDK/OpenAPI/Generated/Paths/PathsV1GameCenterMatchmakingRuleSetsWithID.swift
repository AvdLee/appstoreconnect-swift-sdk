// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterMatchmakingRuleSets {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterMatchmakingRuleSets/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterMatchmakingRuleSetResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterMatchmakingRuleSets_getInstance")
		}

		public struct GetParameters {
			public var fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets]?
			public var fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams]?
			public var fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules]?
			public var fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues]?
			public var include: [Include]?
			public var limitMatchmakingQueues: Int?
			public var limitRules: Int?
			public var limitTeams: Int?

			public enum FieldsGameCenterMatchmakingRuleSets: String, Codable, CaseIterable {
				case referenceName
				case ruleLanguageVersion
				case minPlayers
				case maxPlayers
				case teams
				case rules
				case matchmakingQueues
			}

			public enum FieldsGameCenterMatchmakingTeams: String, Codable, CaseIterable {
				case referenceName
				case minPlayers
				case maxPlayers
			}

			public enum FieldsGameCenterMatchmakingRules: String, Codable, CaseIterable {
				case referenceName
				case description
				case type
				case expression
				case weight
			}

			public enum FieldsGameCenterMatchmakingQueues: String, Codable, CaseIterable {
				case referenceName
				case classicMatchmakingBundleIDs = "classicMatchmakingBundleIds"
				case ruleSet
				case experimentRuleSet
			}

			public enum Include: String, Codable, CaseIterable {
				case teams
				case rules
				case matchmakingQueues
			}

			public init(fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets]? = nil, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams]? = nil, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules]? = nil, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues]? = nil, include: [Include]? = nil, limitMatchmakingQueues: Int? = nil, limitRules: Int? = nil, limitTeams: Int? = nil) {
				self.fieldsGameCenterMatchmakingRuleSets = fieldsGameCenterMatchmakingRuleSets
				self.fieldsGameCenterMatchmakingTeams = fieldsGameCenterMatchmakingTeams
				self.fieldsGameCenterMatchmakingRules = fieldsGameCenterMatchmakingRules
				self.fieldsGameCenterMatchmakingQueues = fieldsGameCenterMatchmakingQueues
				self.include = include
				self.limitMatchmakingQueues = limitMatchmakingQueues
				self.limitRules = limitRules
				self.limitTeams = limitTeams
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterMatchmakingRuleSets, forKey: "fields[gameCenterMatchmakingRuleSets]")
				encoder.encode(fieldsGameCenterMatchmakingTeams, forKey: "fields[gameCenterMatchmakingTeams]")
				encoder.encode(fieldsGameCenterMatchmakingRules, forKey: "fields[gameCenterMatchmakingRules]")
				encoder.encode(fieldsGameCenterMatchmakingQueues, forKey: "fields[gameCenterMatchmakingQueues]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitMatchmakingQueues, forKey: "limit[matchmakingQueues]")
				encoder.encode(limitRules, forKey: "limit[rules]")
				encoder.encode(limitTeams, forKey: "limit[teams]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterMatchmakingRuleSetUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterMatchmakingRuleSetResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterMatchmakingRuleSets_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterMatchmakingRuleSets_deleteInstance")
		}
	}
}
