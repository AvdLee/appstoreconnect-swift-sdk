// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.CiWorkflows {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/ciWorkflows/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.CiWorkflowResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "ciWorkflows_getInstance")
		}

		public struct GetParameters {
			public var fieldsCiWorkflows: [FieldsCiWorkflows]?
			public var fieldsScmRepositories: [FieldsScmRepositories]?
			public var include: [Include]?

			public enum FieldsCiWorkflows: String, Codable, CaseIterable {
				case name
				case description
				case branchStartCondition
				case tagStartCondition
				case pullRequestStartCondition
				case scheduledStartCondition
				case manualBranchStartCondition
				case manualTagStartCondition
				case manualPullRequestStartCondition
				case actions
				case isEnabled
				case isLockedForEditing
				case clean
				case containerFilePath
				case lastModifiedDate
				case product
				case repository
				case xcodeVersion
				case macOsVersion
				case buildRuns
			}

			public enum FieldsScmRepositories: String, Codable, CaseIterable {
				case lastAccessedDate
				case httpCloneURL = "httpCloneUrl"
				case sshCloneURL = "sshCloneUrl"
				case ownerName
				case repositoryName
				case scmProvider
				case defaultBranch
				case gitReferences
				case pullRequests
			}

			public enum Include: String, Codable, CaseIterable {
				case product
				case repository
				case xcodeVersion
				case macOsVersion
			}

			public init(fieldsCiWorkflows: [FieldsCiWorkflows]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, include: [Include]? = nil) {
				self.fieldsCiWorkflows = fieldsCiWorkflows
				self.fieldsScmRepositories = fieldsScmRepositories
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsCiWorkflows, forKey: "fields[ciWorkflows]")
				encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.CiWorkflowUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.CiWorkflowResponse> {
			Request(path: path, method: "PATCH", body: body, id: "ciWorkflows_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "ciWorkflows_deleteInstance")
		}
	}
}
