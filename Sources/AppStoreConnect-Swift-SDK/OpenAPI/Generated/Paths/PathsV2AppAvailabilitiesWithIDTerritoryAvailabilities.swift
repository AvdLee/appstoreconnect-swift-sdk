// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V2.AppAvailabilities.WithID {
	public var territoryAvailabilities: TerritoryAvailabilities {
		TerritoryAvailabilities(path: path + "/territoryAvailabilities")
	}

	public struct TerritoryAvailabilities {
		/// Path: `/v2/appAvailabilities/{id}/territoryAvailabilities`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.TerritoryAvailabilitiesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appAvailabilitiesV2_territoryAvailabilities_getToManyRelated")
		}

		public struct GetParameters {
			public var fieldsTerritoryAvailabilities: [FieldsTerritoryAvailabilities]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsTerritoryAvailabilities: String, Codable, CaseIterable {
				case available
				case releaseDate
				case preOrderEnabled
				case preOrderPublishDate
				case contentStatuses
				case territory
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public enum Include: String, Codable, CaseIterable {
				case territory
			}

			public init(fieldsTerritoryAvailabilities: [FieldsTerritoryAvailabilities]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.fieldsTerritoryAvailabilities = fieldsTerritoryAvailabilities
				self.fieldsTerritories = fieldsTerritories
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsTerritoryAvailabilities, forKey: "fields[territoryAvailabilities]")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
