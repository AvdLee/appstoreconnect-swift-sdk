// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.ReviewSubmissions.WithID {
	public var items: Items {
		Items(path: path + "/items")
	}

	public struct Items {
		/// Path: `/v1/reviewSubmissions/{id}/items`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.ReviewSubmissionItemsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "reviewSubmissions_items_getToManyRelated")
		}

		public struct GetParameters {
			public var fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]?
			public var fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]?
			public var fieldsAppEvents: [FieldsAppEvents]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsReviewSubmissionItems: String, Codable, CaseIterable {
				case state
				case appStoreVersion
				case appCustomProductPageVersion
				case appStoreVersionExperiment
				case appStoreVersionExperimentV2
				case appEvent
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsAppCustomProductPageVersions: String, Codable, CaseIterable {
				case version
				case state
				case deepLink
				case appCustomProductPage
				case appCustomProductPageLocalizations
			}

			public enum FieldsAppStoreVersionExperiments: String, Codable, CaseIterable {
				case name
				case trafficProportion
				case state
				case reviewRequired
				case startDate
				case endDate
				case appStoreVersion
				case appStoreVersionExperimentTreatments
				case platform
				case app
				case latestControlVersion
				case controlVersions
			}

			public enum FieldsAppEvents: String, Codable, CaseIterable {
				case referenceName
				case badge
				case eventState
				case deepLink
				case purchaseRequirement
				case primaryLocale
				case priority
				case purpose
				case territorySchedules
				case archivedTerritorySchedules
				case localizations
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreVersion
				case appCustomProductPageVersion
				case appStoreVersionExperiment
				case appStoreVersionExperimentV2
				case appEvent
			}

			public init(fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]? = nil, fieldsAppEvents: [FieldsAppEvents]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.fieldsReviewSubmissionItems = fieldsReviewSubmissionItems
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAppCustomProductPageVersions = fieldsAppCustomProductPageVersions
				self.fieldsAppStoreVersionExperiments = fieldsAppStoreVersionExperiments
				self.fieldsAppEvents = fieldsAppEvents
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsReviewSubmissionItems, forKey: "fields[reviewSubmissionItems]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAppCustomProductPageVersions, forKey: "fields[appCustomProductPageVersions]")
				encoder.encode(fieldsAppStoreVersionExperiments, forKey: "fields[appStoreVersionExperiments]")
				encoder.encode(fieldsAppEvents, forKey: "fields[appEvents]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
