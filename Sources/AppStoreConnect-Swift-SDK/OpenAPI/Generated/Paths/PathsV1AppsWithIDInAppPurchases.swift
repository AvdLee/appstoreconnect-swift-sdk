// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var inAppPurchases: InAppPurchases {
		InAppPurchases(path: path + "/inAppPurchases")
	}

	public struct InAppPurchases {
		/// Path: `/v1/apps/{id}/inAppPurchases`
		public let path: String

		@available(*, deprecated, message: "Deprecated")
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.InAppPurchasesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_inAppPurchases_getToManyRelated")
		}

		public struct GetParameters {
			public var filterInAppPurchaseType: [FilterInAppPurchaseType]?
			public var filterCanBeSubmitted: [String]?
			public var sort: [Sort]?
			public var fieldsInAppPurchases: [FieldsInAppPurchases]?
			public var fieldsApps: [FieldsApps]?
			public var limit: Int?
			public var include: [Include]?
			public var limitApps: Int?

			public enum FilterInAppPurchaseType: String, Codable, CaseIterable {
				case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
				case nonConsumable = "NON_CONSUMABLE"
				case consumable = "CONSUMABLE"
				case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
				case freeSubscription = "FREE_SUBSCRIPTION"
			}

			public enum Sort: String, Codable, CaseIterable {
				case referenceName
				case minusreferenceName = "-referenceName"
				case productID = "productId"
				case minusproductID = "-productId"
				case inAppPurchaseType
				case minusinAppPurchaseType = "-inAppPurchaseType"
			}

			public enum FieldsInAppPurchases: String, Codable, CaseIterable {
				case referenceName
				case productID = "productId"
				case inAppPurchaseType
				case state
				case apps
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case accessibilityURL = "accessibilityUrl"
				case name
				case bundleID = "bundleId"
				case sku
				case primaryLocale
				case isOrEverWasMadeForKids
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
				case contentRightsDeclaration
				case streamlinedPurchasingEnabled
				case accessibilityDeclarations
				case appEncryptionDeclarations
				case ciProduct
				case betaTesters
				case betaGroups
				case appStoreVersions
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case appPricePoints
				case endUserLicenseAgreement
				case appPriceSchedule
				case appAvailabilityV2
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case perfPowerMetrics
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case customerReviews
				case customerReviewSummarizations
				case gameCenterDetail
				case appStoreVersionExperimentsV2
				case alternativeDistributionKey
				case analyticsReportRequests
				case marketplaceSearchDetail
				case backgroundAssets
				case betaFeedbackScreenshotSubmissions
				case betaFeedbackCrashSubmissions
				case webhooks
			}

			public enum Include: String, Codable, CaseIterable {
				case apps
			}

			public init(filterInAppPurchaseType: [FilterInAppPurchaseType]? = nil, filterCanBeSubmitted: [String]? = nil, sort: [Sort]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases]? = nil, fieldsApps: [FieldsApps]? = nil, limit: Int? = nil, include: [Include]? = nil, limitApps: Int? = nil) {
				self.filterInAppPurchaseType = filterInAppPurchaseType
				self.filterCanBeSubmitted = filterCanBeSubmitted
				self.sort = sort
				self.fieldsInAppPurchases = fieldsInAppPurchases
				self.fieldsApps = fieldsApps
				self.limit = limit
				self.include = include
				self.limitApps = limitApps
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterInAppPurchaseType, forKey: "filter[inAppPurchaseType]")
				encoder.encode(filterCanBeSubmitted, forKey: "filter[canBeSubmitted]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsInAppPurchases, forKey: "fields[inAppPurchases]")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitApps, forKey: "limit[apps]")
				return encoder.items
			}
		}
	}
}
