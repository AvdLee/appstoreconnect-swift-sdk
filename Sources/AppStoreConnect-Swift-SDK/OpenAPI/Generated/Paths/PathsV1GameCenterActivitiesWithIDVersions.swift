// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterActivities.WithID {
	public var versions: Versions {
		Versions(path: path + "/versions")
	}

	public struct Versions {
		/// Path: `/v1/gameCenterActivities/{id}/versions`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterActivityVersionsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterActivities_versions_getToManyRelated")
		}

		public struct GetParameters {
			public var fieldsGameCenterActivityVersions: [FieldsGameCenterActivityVersions]?
			public var fieldsGameCenterActivities: [FieldsGameCenterActivities]?
			public var fieldsGameCenterActivityLocalizations: [FieldsGameCenterActivityLocalizations]?
			public var fieldsGameCenterActivityImages: [FieldsGameCenterActivityImages]?
			public var fieldsGameCenterActivityVersionReleases: [FieldsGameCenterActivityVersionReleases]?
			public var limit: Int?
			public var include: [Include]?
			public var limitLocalizations: Int?
			public var limitReleases: Int?

			public enum FieldsGameCenterActivityVersions: String, Codable, CaseIterable {
				case version
				case state
				case fallbackURL = "fallbackUrl"
				case activity
				case localizations
				case defaultImage
				case releases
			}

			public enum FieldsGameCenterActivities: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case playStyle
				case minimumPlayersCount
				case maximumPlayersCount
				case supportsPartyCode
				case archived
				case properties
				case gameCenterDetail
				case gameCenterGroup
				case achievements
				case leaderboards
				case versions
			}

			public enum FieldsGameCenterActivityLocalizations: String, Codable, CaseIterable {
				case locale
				case name
				case description
				case version
				case image
			}

			public enum FieldsGameCenterActivityImages: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case imageAsset
				case uploadOperations
				case assetDeliveryState
			}

			public enum FieldsGameCenterActivityVersionReleases: String, Codable, CaseIterable {
				case version
			}

			public enum Include: String, Codable, CaseIterable {
				case activity
				case localizations
				case defaultImage
				case releases
			}

			public init(fieldsGameCenterActivityVersions: [FieldsGameCenterActivityVersions]? = nil, fieldsGameCenterActivities: [FieldsGameCenterActivities]? = nil, fieldsGameCenterActivityLocalizations: [FieldsGameCenterActivityLocalizations]? = nil, fieldsGameCenterActivityImages: [FieldsGameCenterActivityImages]? = nil, fieldsGameCenterActivityVersionReleases: [FieldsGameCenterActivityVersionReleases]? = nil, limit: Int? = nil, include: [Include]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) {
				self.fieldsGameCenterActivityVersions = fieldsGameCenterActivityVersions
				self.fieldsGameCenterActivities = fieldsGameCenterActivities
				self.fieldsGameCenterActivityLocalizations = fieldsGameCenterActivityLocalizations
				self.fieldsGameCenterActivityImages = fieldsGameCenterActivityImages
				self.fieldsGameCenterActivityVersionReleases = fieldsGameCenterActivityVersionReleases
				self.limit = limit
				self.include = include
				self.limitLocalizations = limitLocalizations
				self.limitReleases = limitReleases
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterActivityVersions, forKey: "fields[gameCenterActivityVersions]")
				encoder.encode(fieldsGameCenterActivities, forKey: "fields[gameCenterActivities]")
				encoder.encode(fieldsGameCenterActivityLocalizations, forKey: "fields[gameCenterActivityLocalizations]")
				encoder.encode(fieldsGameCenterActivityImages, forKey: "fields[gameCenterActivityImages]")
				encoder.encode(fieldsGameCenterActivityVersionReleases, forKey: "fields[gameCenterActivityVersionReleases]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				encoder.encode(limitReleases, forKey: "limit[releases]")
				return encoder.items
			}
		}
	}
}
