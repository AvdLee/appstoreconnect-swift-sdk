// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersions.WithID {
	public var appStoreReviewDetail: AppStoreReviewDetail {
		AppStoreReviewDetail(path: path + "/appStoreReviewDetail")
	}

	public struct AppStoreReviewDetail {
		/// Path: `/v1/appStoreVersions/{id}/appStoreReviewDetail`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreReviewDetailResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersions_appStoreReviewDetail_getToOneRelated")
		}

		public struct GetParameters {
			public var fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments]?
			public var include: [Include]?
			public var limitAppStoreReviewAttachments: Int?

			public enum FieldsAppStoreReviewDetails: String, Codable, CaseIterable {
				case contactFirstName
				case contactLastName
				case contactPhone
				case contactEmail
				case demoAccountName
				case demoAccountPassword
				case demoAccountRequired
				case notes
				case appStoreVersion
				case appStoreReviewAttachments
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsAppStoreReviewAttachments: String, Codable, CaseIterable {
				case fileSize
				case fileName
				case sourceFileChecksum
				case uploadOperations
				case assetDeliveryState
				case appStoreReviewDetail
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreVersion
				case appStoreReviewAttachments
			}

			public init(fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments]? = nil, include: [Include]? = nil, limitAppStoreReviewAttachments: Int? = nil) {
				self.fieldsAppStoreReviewDetails = fieldsAppStoreReviewDetails
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAppStoreReviewAttachments = fieldsAppStoreReviewAttachments
				self.include = include
				self.limitAppStoreReviewAttachments = limitAppStoreReviewAttachments
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAppStoreReviewDetails, forKey: "fields[appStoreReviewDetails]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAppStoreReviewAttachments, forKey: "fields[appStoreReviewAttachments]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppStoreReviewAttachments, forKey: "limit[appStoreReviewAttachments]")
				return encoder.items
			}
		}
	}
}
