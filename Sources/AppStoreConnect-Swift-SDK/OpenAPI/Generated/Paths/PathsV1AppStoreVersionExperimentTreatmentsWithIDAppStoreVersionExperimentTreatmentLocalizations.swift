// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersionExperimentTreatments.WithID {
	public var appStoreVersionExperimentTreatmentLocalizations: AppStoreVersionExperimentTreatmentLocalizations {
		AppStoreVersionExperimentTreatmentLocalizations(path: path + "/appStoreVersionExperimentTreatmentLocalizations")
	}

	public struct AppStoreVersionExperimentTreatmentLocalizations {
		/// Path: `/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreVersionExperimentTreatmentLocalizationsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelated")
		}

		public struct GetParameters {
			public var filterLocale: [String]?
			public var fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations]?
			public var fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments]?
			public var fieldsAppScreenshotSets: [FieldsAppScreenshotSets]?
			public var fieldsAppPreviewSets: [FieldsAppPreviewSets]?
			public var limit: Int?
			public var include: [Include]?
			public var limitAppScreenshotSets: Int?
			public var limitAppPreviewSets: Int?

			public enum FieldsAppStoreVersionExperimentTreatmentLocalizations: String, Codable, CaseIterable {
				case locale
				case appStoreVersionExperimentTreatment
				case appScreenshotSets
				case appPreviewSets
			}

			public enum FieldsAppStoreVersionExperimentTreatments: String, Codable, CaseIterable {
				case name
				case appIcon
				case appIconName
				case promotedDate
				case appStoreVersionExperiment
				case appStoreVersionExperimentV2
				case appStoreVersionExperimentTreatmentLocalizations
			}

			public enum FieldsAppScreenshotSets: String, Codable, CaseIterable {
				case screenshotDisplayType
				case appStoreVersionLocalization
				case appCustomProductPageLocalization
				case appStoreVersionExperimentTreatmentLocalization
				case appScreenshots
			}

			public enum FieldsAppPreviewSets: String, Codable, CaseIterable {
				case previewType
				case appStoreVersionLocalization
				case appCustomProductPageLocalization
				case appStoreVersionExperimentTreatmentLocalization
				case appPreviews
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreVersionExperimentTreatment
				case appScreenshotSets
				case appPreviewSets
			}

			public init(filterLocale: [String]? = nil, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAppScreenshotSets: Int? = nil, limitAppPreviewSets: Int? = nil) {
				self.filterLocale = filterLocale
				self.fieldsAppStoreVersionExperimentTreatmentLocalizations = fieldsAppStoreVersionExperimentTreatmentLocalizations
				self.fieldsAppStoreVersionExperimentTreatments = fieldsAppStoreVersionExperimentTreatments
				self.fieldsAppScreenshotSets = fieldsAppScreenshotSets
				self.fieldsAppPreviewSets = fieldsAppPreviewSets
				self.limit = limit
				self.include = include
				self.limitAppScreenshotSets = limitAppScreenshotSets
				self.limitAppPreviewSets = limitAppPreviewSets
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterLocale, forKey: "filter[locale]")
				encoder.encode(fieldsAppStoreVersionExperimentTreatmentLocalizations, forKey: "fields[appStoreVersionExperimentTreatmentLocalizations]")
				encoder.encode(fieldsAppStoreVersionExperimentTreatments, forKey: "fields[appStoreVersionExperimentTreatments]")
				encoder.encode(fieldsAppScreenshotSets, forKey: "fields[appScreenshotSets]")
				encoder.encode(fieldsAppPreviewSets, forKey: "fields[appPreviewSets]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppScreenshotSets, forKey: "limit[appScreenshotSets]")
				encoder.encode(limitAppPreviewSets, forKey: "limit[appPreviewSets]")
				return encoder.items
			}
		}
	}
}
