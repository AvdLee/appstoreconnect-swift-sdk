// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var reviewSubmissions: ReviewSubmissions {
		ReviewSubmissions(path: path + "/reviewSubmissions")
	}

	public struct ReviewSubmissions {
		/// Path: `/v1/apps/{id}/reviewSubmissions`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.ReviewSubmissionsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_reviewSubmissions_getToManyRelated")
		}

		public struct GetParameters {
			public var filterPlatform: [FilterPlatform]?
			public var filterState: [FilterState]?
			public var fieldsReviewSubmissions: [FieldsReviewSubmissions]?
			public var fieldsApps: [FieldsApps]?
			public var fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsActors: [FieldsActors]?
			public var limit: Int?
			public var include: [Include]?
			public var limitItems: Int?

			public enum FilterPlatform: String, Codable, CaseIterable {
				case ios = "IOS"
				case macOs = "MAC_OS"
				case tvOs = "TV_OS"
				case visionOs = "VISION_OS"
			}

			public enum FilterState: String, Codable, CaseIterable {
				case readyForReview = "READY_FOR_REVIEW"
				case waitingForReview = "WAITING_FOR_REVIEW"
				case inReview = "IN_REVIEW"
				case unresolvedIssues = "UNRESOLVED_ISSUES"
				case canceling = "CANCELING"
				case completing = "COMPLETING"
				case complete = "COMPLETE"
			}

			public enum FieldsReviewSubmissions: String, Codable, CaseIterable {
				case platform
				case submittedDate
				case state
				case app
				case items
				case appStoreVersionForReview
				case submittedByActor
				case lastUpdatedByActor
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case accessibilityURL = "accessibilityUrl"
				case name
				case bundleID = "bundleId"
				case sku
				case primaryLocale
				case isOrEverWasMadeForKids
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
				case contentRightsDeclaration
				case streamlinedPurchasingEnabled
				case accessibilityDeclarations
				case appEncryptionDeclarations
				case ciProduct
				case betaTesters
				case betaGroups
				case appStoreVersions
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case appPricePoints
				case endUserLicenseAgreement
				case appPriceSchedule
				case appAvailabilityV2
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case perfPowerMetrics
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case customerReviews
				case customerReviewSummarizations
				case gameCenterDetail
				case appStoreVersionExperimentsV2
				case alternativeDistributionKey
				case analyticsReportRequests
				case marketplaceSearchDetail
				case backgroundAssets
				case betaFeedbackScreenshotSubmissions
				case betaFeedbackCrashSubmissions
				case webhooks
			}

			public enum FieldsReviewSubmissionItems: String, Codable, CaseIterable {
				case state
				case appStoreVersion
				case appCustomProductPageVersion
				case appStoreVersionExperiment
				case appStoreVersionExperimentV2
				case appEvent
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsActors: String, Codable, CaseIterable {
				case actorType
				case userFirstName
				case userLastName
				case userEmail
				case apiKeyID = "apiKeyId"
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case items
				case appStoreVersionForReview
				case submittedByActor
				case lastUpdatedByActor
			}

			public init(filterPlatform: [FilterPlatform]? = nil, filterState: [FilterState]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsActors: [FieldsActors]? = nil, limit: Int? = nil, include: [Include]? = nil, limitItems: Int? = nil) {
				self.filterPlatform = filterPlatform
				self.filterState = filterState
				self.fieldsReviewSubmissions = fieldsReviewSubmissions
				self.fieldsApps = fieldsApps
				self.fieldsReviewSubmissionItems = fieldsReviewSubmissionItems
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsActors = fieldsActors
				self.limit = limit
				self.include = include
				self.limitItems = limitItems
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterPlatform, forKey: "filter[platform]")
				encoder.encode(filterState, forKey: "filter[state]")
				encoder.encode(fieldsReviewSubmissions, forKey: "fields[reviewSubmissions]")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(fieldsReviewSubmissionItems, forKey: "fields[reviewSubmissionItems]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsActors, forKey: "fields[actors]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitItems, forKey: "limit[items]")
				return encoder.items
			}
		}
	}
}
