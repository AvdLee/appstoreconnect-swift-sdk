// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterDetails.WithID {
	public var gameCenterActivities: GameCenterActivities {
		GameCenterActivities(path: path + "/gameCenterActivities")
	}

	public struct GameCenterActivities {
		/// Path: `/v1/gameCenterDetails/{id}/gameCenterActivities`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterActivitiesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterDetails_gameCenterActivities_getToManyRelated")
		}

		public struct GetParameters {
			public var fieldsGameCenterActivities: [FieldsGameCenterActivities]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsGameCenterGroups: [FieldsGameCenterGroups]?
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?
			public var fieldsGameCenterActivityVersions: [FieldsGameCenterActivityVersions]?
			public var limit: Int?
			public var include: [Include]?
			public var limitAchievements: Int?
			public var limitLeaderboards: Int?
			public var limitVersions: Int?

			public enum FieldsGameCenterActivities: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case playStyle
				case minimumPlayersCount
				case maximumPlayersCount
				case supportsPartyCode
				case archived
				case properties
				case gameCenterDetail
				case gameCenterGroup
				case achievements
				case leaderboards
				case versions
			}

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case arcadeEnabled
				case challengeEnabled
				case app
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
				case defaultLeaderboard
				case defaultGroupLeaderboard
				case achievementReleases
				case activityReleases
				case challengeReleases
				case leaderboardReleases
				case leaderboardSetReleases
				case challengesMinimumPlatformVersions
			}

			public enum FieldsGameCenterGroups: String, Codable, CaseIterable {
				case referenceName
				case gameCenterDetails
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
			}

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case points
				case showBeforeEarned
				case repeatable
				case archived
				case activityProperties
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public enum FieldsGameCenterLeaderboards: String, Codable, CaseIterable {
				case defaultFormatter
				case referenceName
				case vendorIdentifier
				case submissionType
				case scoreSortType
				case scoreRangeStart
				case scoreRangeEnd
				case recurrenceStartDate
				case recurrenceDuration
				case recurrenceRule
				case archived
				case activityProperties
				case visibility
				case gameCenterDetail
				case gameCenterGroup
				case groupLeaderboard
				case gameCenterLeaderboardSets
				case localizations
				case releases
				case activity
				case challenge
			}

			public enum FieldsGameCenterActivityVersions: String, Codable, CaseIterable {
				case version
				case state
				case fallbackURL = "fallbackUrl"
				case activity
				case localizations
				case defaultImage
				case releases
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case achievements
				case leaderboards
				case versions
			}

			public init(fieldsGameCenterActivities: [FieldsGameCenterActivities]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, fieldsGameCenterActivityVersions: [FieldsGameCenterActivityVersions]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAchievements: Int? = nil, limitLeaderboards: Int? = nil, limitVersions: Int? = nil) {
				self.fieldsGameCenterActivities = fieldsGameCenterActivities
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsGameCenterGroups = fieldsGameCenterGroups
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.fieldsGameCenterLeaderboards = fieldsGameCenterLeaderboards
				self.fieldsGameCenterActivityVersions = fieldsGameCenterActivityVersions
				self.limit = limit
				self.include = include
				self.limitAchievements = limitAchievements
				self.limitLeaderboards = limitLeaderboards
				self.limitVersions = limitVersions
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterActivities, forKey: "fields[gameCenterActivities]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsGameCenterGroups, forKey: "fields[gameCenterGroups]")
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
				encoder.encode(fieldsGameCenterActivityVersions, forKey: "fields[gameCenterActivityVersions]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAchievements, forKey: "limit[achievements]")
				encoder.encode(limitLeaderboards, forKey: "limit[leaderboards]")
				encoder.encode(limitVersions, forKey: "limit[versions]")
				return encoder.items
			}
		}
	}
}
