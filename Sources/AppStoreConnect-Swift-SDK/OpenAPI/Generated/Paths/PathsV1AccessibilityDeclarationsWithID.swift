// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AccessibilityDeclarations {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/accessibilityDeclarations/{id}`
		public let path: String

		public func get(fieldsAccessibilityDeclarations: [FieldsAccessibilityDeclarations]? = nil) -> Request<AppStoreConnect_Swift_SDK.AccessibilityDeclarationResponse> {
			Request(path: path, method: "GET", query: makeGetQuery(fieldsAccessibilityDeclarations), id: "accessibilityDeclarations_getInstance")
		}

		private func makeGetQuery(_ fieldsAccessibilityDeclarations: [FieldsAccessibilityDeclarations]?) -> [(String, String?)] {
			let encoder = URLQueryEncoder()
			encoder.encode(fieldsAccessibilityDeclarations, forKey: "fields[accessibilityDeclarations]", explode: false)
			return encoder.items
		}

		public enum FieldsAccessibilityDeclarations: String, Codable, CaseIterable {
			case deviceFamily
			case state
			case supportsAudioDescriptions
			case supportsCaptions
			case supportsDarkInterface
			case supportsDifferentiateWithoutColorAlone
			case supportsLargerText
			case supportsReducedMotion
			case supportsSufficientContrast
			case supportsVoiceControl
			case supportsVoiceover
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.AccessibilityDeclarationUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.AccessibilityDeclarationResponse> {
			Request(path: path, method: "PATCH", body: body, id: "accessibilityDeclarations_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "accessibilityDeclarations_deleteInstance")
		}
	}
}
