// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Apps.WithID {
	public var ciProduct: CiProduct {
		CiProduct(path: path + "/ciProduct")
	}

	public struct CiProduct {
		/// Path: `/v1/apps/{id}/ciProduct`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.CiProductResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "apps_ciProduct_getToOneRelated")
		}

		public struct GetParameters {
			public var fieldsCiProducts: [FieldsCiProducts]?
			public var fieldsApps: [FieldsApps]?
			public var fieldsBundleIDs: [FieldsBundleIDs]?
			public var fieldsScmRepositories: [FieldsScmRepositories]?
			public var include: [Include]?
			public var limitPrimaryRepositories: Int?

			public enum FieldsCiProducts: String, Codable, CaseIterable {
				case name
				case createdDate
				case productType
				case app
				case bundleID = "bundleId"
				case workflows
				case primaryRepositories
				case additionalRepositories
				case buildRuns
			}

			public enum FieldsApps: String, Codable, CaseIterable {
				case accessibilityURL = "accessibilityUrl"
				case name
				case bundleID = "bundleId"
				case sku
				case primaryLocale
				case isOrEverWasMadeForKids
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
				case contentRightsDeclaration
				case streamlinedPurchasingEnabled
				case accessibilityDeclarations
				case appEncryptionDeclarations
				case ciProduct
				case betaTesters
				case betaGroups
				case appStoreVersions
				case preReleaseVersions
				case betaAppLocalizations
				case builds
				case betaLicenseAgreement
				case betaAppReviewDetail
				case appInfos
				case appClips
				case appPricePoints
				case endUserLicenseAgreement
				case appPriceSchedule
				case appAvailabilityV2
				case inAppPurchases
				case subscriptionGroups
				case gameCenterEnabledVersions
				case perfPowerMetrics
				case appCustomProductPages
				case inAppPurchasesV2
				case promotedPurchases
				case appEvents
				case reviewSubmissions
				case subscriptionGracePeriod
				case customerReviews
				case customerReviewSummarizations
				case gameCenterDetail
				case appStoreVersionExperimentsV2
				case alternativeDistributionKey
				case analyticsReportRequests
				case marketplaceSearchDetail
				case backgroundAssets
				case betaFeedbackScreenshotSubmissions
				case betaFeedbackCrashSubmissions
				case webhooks
			}

			public enum FieldsBundleIDs: String, Codable, CaseIterable {
				case name
				case platform
				case identifier
				case seedID = "seedId"
				case profiles
				case bundleIDCapabilities = "bundleIdCapabilities"
				case app
			}

			public enum FieldsScmRepositories: String, Codable, CaseIterable {
				case lastAccessedDate
				case httpCloneURL = "httpCloneUrl"
				case sshCloneURL = "sshCloneUrl"
				case ownerName
				case repositoryName
				case scmProvider
				case defaultBranch
				case gitReferences
				case pullRequests
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case bundleID = "bundleId"
				case primaryRepositories
			}

			public init(fieldsCiProducts: [FieldsCiProducts]? = nil, fieldsApps: [FieldsApps]? = nil, fieldsBundleIDs: [FieldsBundleIDs]? = nil, fieldsScmRepositories: [FieldsScmRepositories]? = nil, include: [Include]? = nil, limitPrimaryRepositories: Int? = nil) {
				self.fieldsCiProducts = fieldsCiProducts
				self.fieldsApps = fieldsApps
				self.fieldsBundleIDs = fieldsBundleIDs
				self.fieldsScmRepositories = fieldsScmRepositories
				self.include = include
				self.limitPrimaryRepositories = limitPrimaryRepositories
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsCiProducts, forKey: "fields[ciProducts]")
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(fieldsBundleIDs, forKey: "fields[bundleIds]")
				encoder.encode(fieldsScmRepositories, forKey: "fields[scmRepositories]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitPrimaryRepositories, forKey: "limit[primaryRepositories]")
				return encoder.items
			}
		}
	}
}
