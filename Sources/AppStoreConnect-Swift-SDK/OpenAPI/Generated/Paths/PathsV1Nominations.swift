// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1 {
	public var nominations: Nominations {
		Nominations(path: path + "/nominations")
	}

	public struct Nominations {
		/// Path: `/v1/nominations`
		public let path: String

		public func get(parameters: GetParameters) -> Request<AppStoreConnect_Swift_SDK.NominationsResponse> {
			Request(path: path, method: "GET", query: parameters.asQuery, id: "nominations_getCollection")
		}

		public struct GetParameters {
			public var filterType: [FilterType]?
			public var filterState: [FilterState]
			public var filterRelatedApps: [String]?
			public var sort: [Sort]?
			public var fieldsNominations: [FieldsNominations]?
			public var limit: Int?
			public var include: [Include]?
			public var limitInAppEvents: Int?
			public var limitRelatedApps: Int?
			public var limitSupportedTerritories: Int?

			public enum FilterType: String, Codable, CaseIterable {
				case appLaunch = "APP_LAUNCH"
				case appEnhancements = "APP_ENHANCEMENTS"
				case newContent = "NEW_CONTENT"
			}

			public enum FilterState: String, Codable, CaseIterable {
				case draft = "DRAFT"
				case submitted = "SUBMITTED"
				case archived = "ARCHIVED"
			}

			public enum Sort: String, Codable, CaseIterable {
				case lastModifiedDate
				case minuslastModifiedDate = "-lastModifiedDate"
				case publishStartDate
				case minuspublishStartDate = "-publishStartDate"
				case publishEndDate
				case minuspublishEndDate = "-publishEndDate"
				case name
				case minusname = "-name"
				case type
				case minustype = "-type"
			}

			public enum FieldsNominations: String, Codable, CaseIterable {
				case name
				case type
				case description
				case createdDate
				case lastModifiedDate
				case submittedDate
				case state
				case publishStartDate
				case publishEndDate
				case deviceFamilies
				case locales
				case supplementalMaterialsUris
				case hasInAppEvents
				case launchInSelectMarketsFirst
				case notes
				case preOrderEnabled
				case relatedApps
				case createdByActor
				case lastModifiedByActor
				case submittedByActor
				case inAppEvents
				case supportedTerritories
			}

			public enum Include: String, Codable, CaseIterable {
				case relatedApps
				case createdByActor
				case lastModifiedByActor
				case submittedByActor
				case inAppEvents
				case supportedTerritories
			}

			public init(filterType: [FilterType]? = nil, filterState: [FilterState], filterRelatedApps: [String]? = nil, sort: [Sort]? = nil, fieldsNominations: [FieldsNominations]? = nil, limit: Int? = nil, include: [Include]? = nil, limitInAppEvents: Int? = nil, limitRelatedApps: Int? = nil, limitSupportedTerritories: Int? = nil) {
				self.filterType = filterType
				self.filterState = filterState
				self.filterRelatedApps = filterRelatedApps
				self.sort = sort
				self.fieldsNominations = fieldsNominations
				self.limit = limit
				self.include = include
				self.limitInAppEvents = limitInAppEvents
				self.limitRelatedApps = limitRelatedApps
				self.limitSupportedTerritories = limitSupportedTerritories
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterType, forKey: "filter[type]")
				encoder.encode(filterState, forKey: "filter[state]")
				encoder.encode(filterRelatedApps, forKey: "filter[relatedApps]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(fieldsNominations, forKey: "fields[nominations]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitInAppEvents, forKey: "limit[inAppEvents]")
				encoder.encode(limitRelatedApps, forKey: "limit[relatedApps]")
				encoder.encode(limitSupportedTerritories, forKey: "limit[supportedTerritories]")
				return encoder.items
			}
		}

		public func post(_ body: AppStoreConnect_Swift_SDK.NominationCreateRequest) -> Request<AppStoreConnect_Swift_SDK.NominationResponse> {
			Request(path: path, method: "POST", body: body, id: "nominations_createInstance")
		}
	}
}
