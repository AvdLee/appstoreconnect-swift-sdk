// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersions.WithID {
	public var appStoreVersionExperiments: AppStoreVersionExperiments {
		AppStoreVersionExperiments(path: path + "/appStoreVersionExperiments")
	}

	public struct AppStoreVersionExperiments {
		/// Path: `/v1/appStoreVersions/{id}/appStoreVersionExperiments`
		public let path: String

		@available(*, deprecated, message: "Deprecated")
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreVersionExperimentsResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersions_appStoreVersionExperiments_getToManyRelated")
		}

		public struct GetParameters {
			public var filterState: [FilterState]?
			public var fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments]?
			public var limit: Int?
			public var include: [Include]?
			public var limitAppStoreVersionExperimentTreatments: Int?

			public enum FilterState: String, Codable, CaseIterable {
				case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
				case readyForReview = "READY_FOR_REVIEW"
				case waitingForReview = "WAITING_FOR_REVIEW"
				case inReview = "IN_REVIEW"
				case accepted = "ACCEPTED"
				case approved = "APPROVED"
				case rejected = "REJECTED"
				case completed = "COMPLETED"
				case stopped = "STOPPED"
			}

			public enum FieldsAppStoreVersionExperiments: String, Codable, CaseIterable {
				case name
				case trafficProportion
				case state
				case reviewRequired
				case startDate
				case endDate
				case appStoreVersion
				case appStoreVersionExperimentTreatments
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case platform
				case versionString
				case appStoreState
				case appVersionState
				case copyright
				case reviewType
				case releaseType
				case earliestReleaseDate
				case usesIdfa
				case downloadable
				case createdDate
				case app
				case ageRatingDeclaration
				case appStoreVersionLocalizations
				case build
				case appStoreVersionPhasedRelease
				case gameCenterAppVersion
				case routingAppCoverage
				case appStoreReviewDetail
				case appStoreVersionSubmission
				case appClipDefaultExperience
				case appStoreVersionExperiments
				case appStoreVersionExperimentsV2
				case customerReviews
				case alternativeDistributionPackage
			}

			public enum FieldsAppStoreVersionExperimentTreatments: String, Codable, CaseIterable {
				case name
				case appIcon
				case appIconName
				case promotedDate
				case appStoreVersionExperiment
				case appStoreVersionExperimentV2
				case appStoreVersionExperimentTreatmentLocalizations
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreVersion
				case appStoreVersionExperimentTreatments
			}

			public init(filterState: [FilterState]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments]? = nil, limit: Int? = nil, include: [Include]? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil) {
				self.filterState = filterState
				self.fieldsAppStoreVersionExperiments = fieldsAppStoreVersionExperiments
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAppStoreVersionExperimentTreatments = fieldsAppStoreVersionExperimentTreatments
				self.limit = limit
				self.include = include
				self.limitAppStoreVersionExperimentTreatments = limitAppStoreVersionExperimentTreatments
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterState, forKey: "filter[state]")
				encoder.encode(fieldsAppStoreVersionExperiments, forKey: "fields[appStoreVersionExperiments]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAppStoreVersionExperimentTreatments, forKey: "fields[appStoreVersionExperimentTreatments]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppStoreVersionExperimentTreatments, forKey: "limit[appStoreVersionExperimentTreatments]")
				return encoder.items
			}
		}
	}
}
