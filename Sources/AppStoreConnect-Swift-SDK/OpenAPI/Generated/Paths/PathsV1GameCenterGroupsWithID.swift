// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterGroups {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterGroups/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterGroupResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterGroups_getInstance")
		}

		public struct GetParameters {
			public var fieldsGameCenterGroups: [FieldsGameCenterGroups]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?
			public var fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]?
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var fieldsGameCenterActivities: [FieldsGameCenterActivities]?
			public var fieldsGameCenterChallenges: [FieldsGameCenterChallenges]?
			public var include: [Include]?
			public var limitGameCenterAchievements: Int?
			public var limitGameCenterActivities: Int?
			public var limitGameCenterChallenges: Int?
			public var limitGameCenterDetails: Int?
			public var limitGameCenterLeaderboardSets: Int?
			public var limitGameCenterLeaderboards: Int?

			public enum FieldsGameCenterGroups: String, Codable, CaseIterable {
				case referenceName
				case gameCenterDetails
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
			}

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case arcadeEnabled
				case challengeEnabled
				case app
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
				case defaultLeaderboard
				case defaultGroupLeaderboard
				case achievementReleases
				case activityReleases
				case challengeReleases
				case leaderboardReleases
				case leaderboardSetReleases
				case challengesMinimumPlatformVersions
			}

			public enum FieldsGameCenterLeaderboards: String, Codable, CaseIterable {
				case defaultFormatter
				case referenceName
				case vendorIdentifier
				case submissionType
				case scoreSortType
				case scoreRangeStart
				case scoreRangeEnd
				case recurrenceStartDate
				case recurrenceDuration
				case recurrenceRule
				case archived
				case activityProperties
				case visibility
				case gameCenterDetail
				case gameCenterGroup
				case groupLeaderboard
				case gameCenterLeaderboardSets
				case localizations
				case releases
				case activity
				case challenge
			}

			public enum FieldsGameCenterLeaderboardSets: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case gameCenterDetail
				case gameCenterGroup
				case groupLeaderboardSet
				case localizations
				case gameCenterLeaderboards
				case releases
			}

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case points
				case showBeforeEarned
				case repeatable
				case archived
				case activityProperties
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
				case activity
			}

			public enum FieldsGameCenterActivities: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case playStyle
				case minimumPlayersCount
				case maximumPlayersCount
				case supportsPartyCode
				case archived
				case properties
				case gameCenterDetail
				case gameCenterGroup
				case achievements
				case leaderboards
				case versions
			}

			public enum FieldsGameCenterChallenges: String, Codable, CaseIterable {
				case referenceName
				case vendorIdentifier
				case allowedDurations
				case archived
				case challengeType
				case repeatable
				case gameCenterDetail
				case gameCenterGroup
				case versions
				case leaderboard
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetails
				case gameCenterLeaderboards
				case gameCenterLeaderboardSets
				case gameCenterAchievements
				case gameCenterActivities
				case gameCenterChallenges
			}

			public init(fieldsGameCenterGroups: [FieldsGameCenterGroups]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, fieldsGameCenterActivities: [FieldsGameCenterActivities]? = nil, fieldsGameCenterChallenges: [FieldsGameCenterChallenges]? = nil, include: [Include]? = nil, limitGameCenterAchievements: Int? = nil, limitGameCenterActivities: Int? = nil, limitGameCenterChallenges: Int? = nil, limitGameCenterDetails: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterLeaderboards: Int? = nil) {
				self.fieldsGameCenterGroups = fieldsGameCenterGroups
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsGameCenterLeaderboards = fieldsGameCenterLeaderboards
				self.fieldsGameCenterLeaderboardSets = fieldsGameCenterLeaderboardSets
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.fieldsGameCenterActivities = fieldsGameCenterActivities
				self.fieldsGameCenterChallenges = fieldsGameCenterChallenges
				self.include = include
				self.limitGameCenterAchievements = limitGameCenterAchievements
				self.limitGameCenterActivities = limitGameCenterActivities
				self.limitGameCenterChallenges = limitGameCenterChallenges
				self.limitGameCenterDetails = limitGameCenterDetails
				self.limitGameCenterLeaderboardSets = limitGameCenterLeaderboardSets
				self.limitGameCenterLeaderboards = limitGameCenterLeaderboards
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterGroups, forKey: "fields[gameCenterGroups]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
				encoder.encode(fieldsGameCenterLeaderboardSets, forKey: "fields[gameCenterLeaderboardSets]")
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(fieldsGameCenterActivities, forKey: "fields[gameCenterActivities]")
				encoder.encode(fieldsGameCenterChallenges, forKey: "fields[gameCenterChallenges]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitGameCenterAchievements, forKey: "limit[gameCenterAchievements]")
				encoder.encode(limitGameCenterActivities, forKey: "limit[gameCenterActivities]")
				encoder.encode(limitGameCenterChallenges, forKey: "limit[gameCenterChallenges]")
				encoder.encode(limitGameCenterDetails, forKey: "limit[gameCenterDetails]")
				encoder.encode(limitGameCenterLeaderboardSets, forKey: "limit[gameCenterLeaderboardSets]")
				encoder.encode(limitGameCenterLeaderboards, forKey: "limit[gameCenterLeaderboards]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterGroupUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterGroupResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterGroups_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterGroups_deleteInstance")
		}
	}
}
