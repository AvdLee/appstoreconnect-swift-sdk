// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.Nominations {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/nominations/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.NominationResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "nominations_getInstance")
		}

		public struct GetParameters {
			public var fieldsNominations: [FieldsNominations]?
			public var include: [Include]?
			public var limitInAppEvents: Int?
			public var limitRelatedApps: Int?
			public var limitSupportedTerritories: Int?

			public enum FieldsNominations: String, Codable, CaseIterable {
				case name
				case type
				case description
				case createdDate
				case lastModifiedDate
				case submittedDate
				case state
				case publishStartDate
				case publishEndDate
				case deviceFamilies
				case locales
				case supplementalMaterialsUris
				case hasInAppEvents
				case launchInSelectMarketsFirst
				case notes
				case preOrderEnabled
				case relatedApps
				case createdByActor
				case lastModifiedByActor
				case submittedByActor
				case inAppEvents
				case supportedTerritories
			}

			public enum Include: String, Codable, CaseIterable {
				case relatedApps
				case createdByActor
				case lastModifiedByActor
				case submittedByActor
				case inAppEvents
				case supportedTerritories
			}

			public init(fieldsNominations: [FieldsNominations]? = nil, include: [Include]? = nil, limitInAppEvents: Int? = nil, limitRelatedApps: Int? = nil, limitSupportedTerritories: Int? = nil) {
				self.fieldsNominations = fieldsNominations
				self.include = include
				self.limitInAppEvents = limitInAppEvents
				self.limitRelatedApps = limitRelatedApps
				self.limitSupportedTerritories = limitSupportedTerritories
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsNominations, forKey: "fields[nominations]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitInAppEvents, forKey: "limit[inAppEvents]")
				encoder.encode(limitRelatedApps, forKey: "limit[relatedApps]")
				encoder.encode(limitSupportedTerritories, forKey: "limit[supportedTerritories]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.NominationUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.NominationResponse> {
			Request(path: path, method: "PATCH", body: body, id: "nominations_updateInstance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "nominations_deleteInstance")
		}
	}
}
