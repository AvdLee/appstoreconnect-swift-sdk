// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppStoreVersionExperimentTreatmentLocalizations {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/appStoreVersionExperimentTreatmentLocalizations/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppStoreVersionExperimentTreatmentLocalizationResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "appStoreVersionExperimentTreatmentLocalizations_getInstance")
		}

		public struct GetParameters {
			public var fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations]?
			public var fieldsAppScreenshotSets: [FieldsAppScreenshotSets]?
			public var fieldsAppPreviewSets: [FieldsAppPreviewSets]?
			public var include: [Include]?
			public var limitAppPreviewSets: Int?
			public var limitAppScreenshotSets: Int?

			public enum FieldsAppStoreVersionExperimentTreatmentLocalizations: String, Codable, CaseIterable {
				case locale
				case appStoreVersionExperimentTreatment
				case appScreenshotSets
				case appPreviewSets
			}

			public enum FieldsAppScreenshotSets: String, Codable, CaseIterable {
				case screenshotDisplayType
				case appStoreVersionLocalization
				case appCustomProductPageLocalization
				case appStoreVersionExperimentTreatmentLocalization
				case appScreenshots
			}

			public enum FieldsAppPreviewSets: String, Codable, CaseIterable {
				case previewType
				case appStoreVersionLocalization
				case appCustomProductPageLocalization
				case appStoreVersionExperimentTreatmentLocalization
				case appPreviews
			}

			public enum Include: String, Codable, CaseIterable {
				case appStoreVersionExperimentTreatment
				case appScreenshotSets
				case appPreviewSets
			}

			public init(fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets]? = nil, include: [Include]? = nil, limitAppPreviewSets: Int? = nil, limitAppScreenshotSets: Int? = nil) {
				self.fieldsAppStoreVersionExperimentTreatmentLocalizations = fieldsAppStoreVersionExperimentTreatmentLocalizations
				self.fieldsAppScreenshotSets = fieldsAppScreenshotSets
				self.fieldsAppPreviewSets = fieldsAppPreviewSets
				self.include = include
				self.limitAppPreviewSets = limitAppPreviewSets
				self.limitAppScreenshotSets = limitAppScreenshotSets
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAppStoreVersionExperimentTreatmentLocalizations, forKey: "fields[appStoreVersionExperimentTreatmentLocalizations]")
				encoder.encode(fieldsAppScreenshotSets, forKey: "fields[appScreenshotSets]")
				encoder.encode(fieldsAppPreviewSets, forKey: "fields[appPreviewSets]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitAppPreviewSets, forKey: "limit[appPreviewSets]")
				encoder.encode(limitAppScreenshotSets, forKey: "limit[appScreenshotSets]")
				return encoder.items
			}
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "appStoreVersionExperimentTreatmentLocalizations_deleteInstance")
		}
	}
}
